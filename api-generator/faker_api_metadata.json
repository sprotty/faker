{
  "types": [],
  "classes": [
    {
      "name": "Address",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "building_number",
          "descriptions": [
            {
              "text": "Produces a building number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "platform": "C#",
              "description": "",
              "code": "csFaker::Address.building_number #=> \"7304\""
            },
            {
              "description": "",
              "code": "Faker::Address.building_number #=> \"7304\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "address.building_number"
            }
          ]
        },
        {
          "name": "city",
          "descriptions": [
            {
              "text": "Produces the name of a city."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Address.city #=> \"Imogeneborough\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "address.city"
            }
          ]
        },
        {
          "name": "city_with_state",
          "descriptions": [
            {
              "text": "Produces the name of a city with the state."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Address.city_with_state #=> \"Northfort, California\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "address.city"
            }
          ]
        },
        {
          "name": "city_name",
          "descriptions": [
            {
              "text": "Produces a city name."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Address.city_name #=> \"New York\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "address.city_name"
            }
          ]
        },
        {
          "name": "city_prefix",
          "descriptions": [
            {
              "text": "Produces a city prefix."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Address.city_prefix #=> \"Lake\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "address.city_prefix"
            }
          ]
        },
        {
          "name": "city_suffix",
          "descriptions": [
            {
              "text": "Produces a city suffix."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Address.city_suffix #=> \"fort\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "address.city_suffix"
            }
          ]
        },
        {
          "name": "community",
          "descriptions": [
            {
              "text": "Produces the name of a community."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Address.community #=> \"University Crossing\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "address.community"
            }
          ]
        },
        {
          "name": "country",
          "descriptions": [
            {
              "text": "Produces the name of a country."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Address.country #=> \"French Guiana\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": false,
              "digitSubst": false,
              "translate": true,
              "data": "address.country"
            }
          ]
        },
        {
          "name": "country_by_code",
          "descriptions": [
            {
              "text": "Produces a country by ISO country code.\n<p>See the [List of ISO 3166 country codes](<a href=\"https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes\">en.wikipedia.org/wiki/List_of_ISO_3166_country_codes</a>) on Wikipedia for a full list.</p>"
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "code",
              "type": "String",
              "default": "'US'",
              "descriptions": [
                {
                  "text": "An ISO country code."
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Address.country_by_code(code: 'NL') #=> \"Netherlands\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "address.country_by_code.#{code}"
            }
          ]
        },
        {
          "name": "country_code",
          "descriptions": [
            {
              "text": "Produces an ISO 3166 country code."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Address.country_code #=> \"IT\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "address.country_code"
            }
          ]
        },
        {
          "name": "country_code_long",
          "descriptions": [
            {
              "text": "Produces a long (alpha-3) ISO 3166 country code."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Address.country_code_long #=> \"ITA\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "address.country_code_long"
            }
          ]
        },
        {
          "name": "country_name_to_code",
          "descriptions": [
            {
              "text": "Produces an ISO 3166 country code when given a country name."
            }
          ],
          "return_type": "String",
          "return_desc": "The ISO 3166 country code",
          "arguments": [
            {
              "name": "name",
              "type": "String",
              "default": "'United States'",
              "descriptions": [
                {
                  "text": "<p>Country name in snake_case format.</p>"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Address.country_name_to_code(name: 'United States') #=> \"US\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "address.country_by_name.#{String.lower '#{name}'}"
            }
          ]
        },
        {
          "name": "latitude",
          "descriptions": [
            {
              "text": "Produces a latitude."
            }
          ],
          "return_type": "Float",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Address.latitude #=> -58.17256227443719"
            }
          ],
          "implementations": [
            {
              "type": "Expression",
              "data": "#{random_float '-180..180'}"
            }
          ]
        },
        {
          "name": "longitude",
          "descriptions": [
            {
              "text": "Produces a longitude."
            }
          ],
          "return_type": "Float",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Address.longitude #=> -156.65548382095133"
            }
          ],
          "implementations": [
            {
              "type": "Expression",
              "data": "#{random_float '-180..180'}"
            }
          ]
        },
        {
          "name": "mail_box",
          "descriptions": [
            {
              "text": "Produces a mail box number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Address.mail_box #=> \"PO Box 123\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "data": "address.mail_box"
            }
          ]
        },
        {
          "name": "secondary_address",
          "descriptions": [
            {
              "text": "Produces a secondary address."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Address.secondary_address #=> \"Apt. 672\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "address.secondary_address"
            }
          ]
        },
        {
          "name": "state",
          "descriptions": [
            {
              "text": "Produces the name of a state."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Address.state #=> \"California\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "data": "address.state"
            }
          ]
        },
        {
          "name": "state_abbr",
          "descriptions": [
            {
              "text": "Produces a state abbreviation."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Address.state_abbr #=> \"AP\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "data": "address.state_abbr"
            }
          ]
        },
        {
          "name": "street_address",
          "descriptions": [
            {
              "text": "Produces a street address."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "include_secondary",
              "type": "Boolean",
              "default": "false",
              "descriptions": [
                {
                  "text": "Whether or not to include the secondary address."
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Address.street_address #=> \"282 Kevin Brook\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "address.street_address"
            }
          ]
        },
        {
          "name": "street_name",
          "descriptions": [
            {
              "text": "Produces a street name."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Address.street_name #=> \"Larkin Fork\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "address.street_name"
            }
          ]
        },
        {
          "name": "street_suffix",
          "descriptions": [
            {
              "text": "Produces a street suffix."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Address.street_suffix #=> \"Street\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "address.street_suffix"
            }
          ]
        },
        {
          "name": "time_zone",
          "descriptions": [
            {
              "text": "Produces the name of a time zone."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Address.time_zone #=> \"Asia/Yakutsk\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "address.time_zone"
            }
          ]
        },
        {
          "name": "zip_code",
          "descriptions": [
            {
              "text": "Produces a Zip Code/Postocde."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Address.zip_code #=> \"58517\"\nFaker::Address.zip_code #=> \"23285-4905\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": false,
              "data": "address.postcode"
            }
          ]
        },
        {
          "name": "postcode",
          "descriptions": [
            {
              "text": "Produces a postcode/zipcode."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Address.zip_code #=> \"58517\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": false,
              "data": "address.postcode"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Adjective",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "negative",
          "descriptions": [
            {
              "text": "Produces a negative adjective."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Adjective.negative #=> \"Creepy\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": false,
              "digitSubst": false,
              "translate": true,
              "data": "adjective.negative"
            }
          ]
        },
        {
          "name": "positive",
          "descriptions": [
            {
              "text": "Produces a positive adjective."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Adjective.positive #=> \"Kind\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": false,
              "digitSubst": false,
              "translate": true,
              "data": "adjective.positive"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Alphanumeric",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "alpha",
          "descriptions": [
            {
              "text": "Produces a random string of alphabetic characters (no digits).\n<p>Produces a random string of alphabetic characters (no digits)</p>"
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "number",
              "type": "Integer",
              "default": "32",
              "descriptions": [
                {
                  "text": "<p>The length of the string to generate</p>"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Alphanumeric.alpha(number: 10) #=> \"zlvubkrwga\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(number: 32)\n\t\t\t\tchar_count = resolve(number)\n\t\t\t\treturn '' if char_count.to_i < 1\n\n\t\t\t\tArray.new(char_count) { sample(self::LLetters) }.join"
            }
          ]
        },
        {
          "name": "alpha_numeric",
          "descriptions": [
            {
              "text": "Produces a random string of alphanumeric characters.\n<p>Produces a random string of alphanumeric characters</p>"
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "number",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "<p>The number of characters to generate</p>"
                }
              ]
            },
            {
              "name": "min_alpha",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "<p>The minimum number of alphabetic to add to the string</p>"
                }
              ]
            },
            {
              "name": "min_numeric",
              "type": "Integer",
              "default": "0",
              "descriptions": [
                {
                  "text": "<p>The minimum number of numbers to add to the string</p>"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Alphanumeric.alphanumeric(number: 10) #=> \"3yfq2phxtb\""
            },
            {
              "description": "",
              "code": "Faker::Alphanumeric.alphanumeric(number: 10, min_alpha: 3) #=> \"3yfq2phxtb\""
            },
            {
              "description": "",
              "code": "Faker::Alphanumeric.alphanumeric(number: 10, min_alpha: 3, min_numeric: 3) #=> \"3yfq2phx8b\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(number: 32, min_alpha: 0, min_numeric: 0)\n\t\t\t\tchar_count = resolve(number)\n\t\t\t\treturn '' if char_count.to_i < 1\n\t\t\t\traise ArgumentError, 'min_alpha must be greater than or equal to 0' if min_alpha&.negative?\n\t\t\t\traise ArgumentError, 'min_numeric must be greater than or equal to 0' if min_numeric&.negative?\n\n\t\t\t\treturn Array.new(char_count) { sample(ALPHANUMS) }.join if min_alpha.zero? && min_numeric.zero?\n\n\t\t\t\traise ArgumentError, 'min_alpha + min_numeric must be <= number' if min_alpha + min_numeric > char_count\n\n\t\t\t\trandom_count = char_count - min_alpha - min_numeric\n\n\t\t\t\talphas = Array.new(min_alpha) { sample(self::LLetters) }\n\t\t\t\tnumbers = Array.new(min_numeric) { sample(self::Numbers) }\n\t\t\t\trandoms = Array.new(random_count) { sample(ALPHANUMS) }\n\n\t\t\t\tcombined = alphas + numbers + randoms\n\t\t\t\tcombined.shuffle.join"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Ancient",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "god",
          "descriptions": [
            {
              "text": "Produces a god from ancient mythology."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Ancient.god #=> \"Zeus\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "ancient.god"
            }
          ]
        },
        {
          "name": "hero",
          "descriptions": [
            {
              "text": "Produces a hero from ancient mythology."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Ancient.hero #=> \"Achilles\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "ancient.hero"
            }
          ]
        },
        {
          "name": "primordial",
          "descriptions": [
            {
              "text": "Produces a primordial from ancient mythology."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Ancient.primordial #=> \"Gaia\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "ancient.primordial"
            }
          ]
        },
        {
          "name": "titan",
          "descriptions": [
            {
              "text": "Produces a titan from ancient mythology."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Ancient.titan #=> \"Atlas\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "ancient.titan"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "App",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "author",
          "descriptions": [
            {
              "text": "Produces the name of an app's author."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::App.author #=> \"Daphne Swift\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": false,
              "data": "app.author"
            }
          ]
        },
        {
          "name": "name",
          "descriptions": [
            {
              "text": "Produces an app name."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::App.name #=> \"Treeflex\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": false,
              "data": "app.name"
            }
          ]
        },
        {
          "name": "semantic_version",
          "descriptions": [
            {
              "text": "Produces a String representing a semantic version identifier."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "major",
              "type": "IntegerRange",
              "default": "1..9",
              "descriptions": [
                {
                  "text": "<p>An integer to use or a range to pick the integer from.</p>"
                }
              ]
            },
            {
              "name": "minor",
              "type": "IntegerRange",
              "default": "1..9",
              "descriptions": [
                {
                  "text": "<p>An integer to use or a range to pick the integer from.</p>"
                }
              ]
            },
            {
              "name": "patch",
              "type": "IntegerRange",
              "default": "1..9",
              "descriptions": [
                {
                  "text": "<p>An integer to use or a range to pick the integer from.</p>"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::App.semantic_version #=> \"3.2.5\""
            },
            {
              "description": "",
              "code": "Faker::App.semantic_version(major: 42) #=> \"42.5.2\""
            },
            {
              "description": "",
              "code": "Faker::App.semantic_version(minor: 100..101) #=> \"42.100.4\""
            },
            {
              "description": "",
              "code": "Faker::App.semantic_version(patch: 5..6) #=> \"7.2.6\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(major: 0..9, minor: 0..9, patch: 1..9)\n\t\t\t\t[major, minor, patch].map { |chunk| sample(Array(chunk)) }.join('.')"
            }
          ]
        },
        {
          "name": "version",
          "descriptions": [
            {
              "text": "Produces a version string."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::App.version #=> \"1.85\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "app.version"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Appliance",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "brand",
          "descriptions": [
            {
              "text": "Produces the name of an appliance brand."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Appliance.brand #=> \"Bosch\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "appliance.brand"
            }
          ]
        },
        {
          "name": "equipment",
          "descriptions": [
            {
              "text": "Produces the name of a type of appliance equipment."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Appliance.equipment #=> \"Appliance plug\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "appliance.equipment"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Artist",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "name",
          "descriptions": [
            {
              "text": "Produces the name of an artist."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Artist.name #=> \"Michelangelo\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "artist.names"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Australia",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "animal",
          "descriptions": [
            {
              "text": "Produces an Australian animal.\n<p>Produces an Australian animal</p>"
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Australia.animal\n#=> \"Dingo\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "australia.animals"
            }
          ]
        },
        {
          "name": "location",
          "descriptions": [
            {
              "text": "Produces a location in Australia.\n<p>Produces a location in Australia</p>"
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Australia.location\n#=> \"Sydney\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "australia.locations"
            }
          ]
        },
        {
          "name": "state",
          "descriptions": [
            {
              "text": "Produces an Australian State or Territory.\n<p>Produces an Australian State or Territory</p>"
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Australia.state\n#=> \"New South Wales\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "australia.states"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Avatar",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "image",
          "descriptions": [
            {
              "text": "Produces a URL for an avatar from robohash.org.\n<p>Produces a URL for an avatar from robohash.org</p>"
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "slug",
              "type": "String",
              "descriptions": [
                {
                  "text": ""
                }
              ]
            },
            {
              "name": "size",
              "type": "String",
              "descriptions": [
                {
                  "text": "<p>image size in pixels, in the format of ‘AxB’</p>"
                }
              ]
            },
            {
              "name": "format",
              "type": "String",
              "descriptions": [
                {
                  "text": "<p>The image file format</p>"
                }
              ]
            },
            {
              "name": "set",
              "type": "String",
              "descriptions": [
                {
                  "text": "<p>The avatar set to use</p>"
                }
              ]
            },
            {
              "name": "bgset",
              "type": "String",
              "default": "nil",
              "descriptions": [
                {
                  "text": "<p>The background set to use</p>"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Avatar.image\n#=> \"https://robohash.org/sitsequiquia.png?size=300x300&set=set1\""
            },
            {
              "description": "",
              "code": "Faker::Avatar.image(slug: \"my-own-slug\")\n#=> \"https://robohash.org/my-own-slug.png?size=300x300&set=set1\""
            },
            {
              "description": "",
              "code": "Faker::Avatar.image(slug: \"my-own-slug\", size: \"50x50\")\n#=> \"https://robohash.org/my-own-slug.png?size=50x50&set=set1\""
            },
            {
              "description": "",
              "code": "Faker::Avatar.image(slug: \"my-own-slug\", size: \"50x50\", format: \"jpg\")\n#=> \"https://robohash.org/my-own-slug.jpg?size=50x50&set=set1\""
            },
            {
              "description": "",
              "code": "Faker::Avatar.image(slug: \"my-own-slug\", size: \"50x50\", format: \"bmp\")\n#=> \"https://robohash.org/my-own-slug.bmp?size=50x50&set=set1\""
            },
            {
              "description": "",
              "code": "Faker::Avatar.image(slug: \"my-own-slug\", size: \"50x50\", format: \"bmp\", set: \"set1\", bgset: \"bg1\")\n#=> \"https://robohash.org/my-own-slug.bmp?size=50x50&set=set1&bgset=bg1\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(slug: nil, size: '300x300', format: 'png', set: 'set1', bgset: nil)\n\t\t\t\traise ArgumentError, 'Size should be specified in format 300x300' unless size =~ /^[0-9]+x[0-9]+$/\n\t\t\t\traise ArgumentError, \"Supported formats are #{SUPPORTED_FORMATS.join(', ')}\" unless SUPPORTED_FORMATS.include?(format)\n\n\t\t\t\tslug ||= Faker::Lorem.words.join\n\t\t\t\tbgset_query = \"&bgset=#{bgset}\" if bgset\n\t\t\t\t\"https://robohash.org/#{slug}.#{format}?size=#{size}&set=#{set}#{bgset_query}\""
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Bank",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "account_number",
          "descriptions": [
            {
              "text": "Produces a bank account number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "digits",
              "type": "Integer",
              "default": "10",
              "descriptions": [
                {
                  "text": "<p>Number of digits that the generated account number should have.</p>"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Bank.account_number #=> 6738582379\nFaker::Bank.account_number(digits: 13) #=> 673858237902"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(digits: 10)\n\t\t\t\toutput = ''\n\n\t\t\t\toutput += rand.to_s[2..] while output.length < digits\n\n\t\t\t\toutput[0...digits]"
            }
          ]
        },
        {
          "name": "bsb_number",
          "descriptions": [
            {
              "text": "Produces an Australian BSB (Bank-State-Branch) number.\n<p>Produces an Australian BSB (Bank-State-Branch) number</p>"
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Bank.bsb_number\n#=> \"036616\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "compile_bsb_number"
            }
          ]
        },
        {
          "name": "checksum",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(num_string)\n\t\t\t\tnum_array = num_string.chars.map(&:to_i)\n\t\t\t\t(\n\t\t\t\t7 * (num_array[0] + num_array[3] + num_array[6]) +\n\t\t\t\t3 * (num_array[1] + num_array[4] + num_array[7]) +\n\t\t\t\t9 * (num_array[2] + num_array[5])\n\t\t\t\t) % 10"
            }
          ]
        },
        {
          "name": "compile_bsb_number",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "digit_one_two = %w[01 03 06 08 11 12 73 76 78 30]\n\t\t\t\tstate = (2..7).to_a.map(&:to_s).sample\n\t\t\t\tdigit_one_two.sample + state + rand_numstring + rand_numstring + rand_numstring"
            }
          ]
        },
        {
          "name": "compile_fraction",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(routing_num)\n\t\t\t\tprefix = (1..50).to_a.map(&:to_s).sample\n\t\t\t\tnumerator = routing_num.chars[5..8].join.to_i.to_s\n\t\t\t\tdenominator = routing_num.chars[0..4].join.to_i.to_s\n\t\t\t\t\"#{prefix}-#{numerator}/#{denominator}\""
            }
          ]
        },
        {
          "name": "compile_routing_number",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "digit_one_two = %w[00 01 02 03 04 05 06 07 08 09 10 11 12]\n\t\t\t\t((21..32).to_a + (61..72).to_a + [80]).each { |x| digit_one_two << x.to_s }\n\t\t\t\tdigit_one_two.sample + rand_numstring + rand_numstring + rand_numstring + rand_numstring + rand_numstring + rand_numstring + rand_numstring"
            }
          ]
        },
        {
          "name": "iban",
          "descriptions": [
            {
              "text": "Produces a bank iban number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "country_code",
              "type": "String",
              "default": "'GB'",
              "descriptions": [
                {
                  "text": "<p>Specifies what country prefix is used to generate the iban code. Providing ‘nil` will use a random country.</p>"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Bank.iban #=> \"GB76DZJM33188515981979\"\nFaker::Bank.iban(country_code: \"be\") #=> \"BE6375388567752043\"\nFaker::Bank.iban(country_code: nil) #=> \"DE45186738071857270067\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "bank.iban_details.#{country_code.downcase}.bban_pattern"
            }
          ]
        },
        {
          "name": "iban_checksum",
          "descriptions": [
            {
              "text": "Calculates the mandatory checksum in 3rd and 4th characters in IBAN format source: https://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits.\n<p>Calculates the mandatory checksum in 3rd and 4th characters in IBAN format source: <a href=\"https://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\">en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits</a></p>"
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(country_code, account)\n\t\t\t\t# Converts letters to numbers according the iban rules, A=10..Z=35\n\t\t\t\taccount_to_number = \"#{account}#{country_code}00\".upcase.chars.map do |d|\n\t\t\t\td =~ /[A-Z]/ ? (d.ord - 55).to_s : d\n\t\t\t\tend.join.to_i\n\n\t\t\t\t# This is the correct answer to (iban_to_num + checksum) % 97 == 1\n\t\t\t\tchecksum = 98 - (account_to_number % 97)\n\n\t\t\t\t# Use leftpad to make the size always to 2\n\t\t\t\tchecksum.to_s.rjust(2, '0')"
            }
          ]
        },
        {
          "name": "iban_country_code",
          "descriptions": [
            {
              "text": "Produces the ISO 3166 code of a country that uses the IBAN system."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Bank.iban_country_code #=> \"CH\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "sample(translate('faker.bank.iban_details').keys).to_s.upcase"
            }
          ]
        },
        {
          "name": "name",
          "descriptions": [
            {
              "text": "Produces a bank name."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Bank.name #=> \"ABN AMRO CORPORATE FINANCE LIMITED\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "bank.name"
            }
          ]
        },
        {
          "name": "rand_numstring",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(0..9).to_a.map(&:to_s).sample"
            }
          ]
        },
        {
          "name": "routing_number",
          "descriptions": [
            {
              "text": "Produces a routing number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Bank.routing_number #=> \"729343831\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "valid_routing_number"
            }
          ]
        },
        {
          "name": "routing_number_with_format",
          "descriptions": [
            {
              "text": "Produces a valid routing number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Bank.routing_number #=> \"729343831\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "compile_fraction(valid_routing_number)"
            }
          ]
        },
        {
          "name": "swift_bic",
          "descriptions": [
            {
              "text": "Produces a swift / bic number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Bank.swift_bic #=> \"AAFMGB21\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "bank.swift_bic"
            }
          ]
        },
        {
          "name": "valid_checksum",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "Boolean",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(routing_number, checksum)\n\t\t\t\trouting_number[8].to_i == checksum"
            }
          ]
        },
        {
          "name": "valid_routing_number",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "routing_number = compile_routing_number\n\t\t\t\tchecksum = checksum(routing_number)\n\t\t\t\treturn routing_number if valid_checksum?(routing_number, checksum)\n\n\t\t\t\trouting_number[0..7] + checksum.to_s"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Barcode",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "ean",
          "descriptions": [
            {
              "text": "Returns a EAN 8 or 13 digit format barcode number with check digit  @return [String].\n<p>Returns a EAN 8 or 13 digit format barcode number with check digit</p>\n\n<pre><code>@return [String]\n\n@example\nFaker::Barcode.ean      =&gt; &quot;85657526&quot;\nFaker::Barcode.ean(8)   =&gt; &quot;30152700&quot;\nFaker::Barcode.ean(13)  =&gt; &quot;2115190480285&quot;\n</code></pre>"
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(length = 8)\n\t\t\t\tgenerate_barcode(\"barcode.ean_#{Integer(length)}\")"
            }
          ]
        },
        {
          "name": "ean_with_composite_symbology",
          "descriptions": [
            {
              "text": "Returns a EAN 8 or 13 digit format barcode number with composite string attached with check digit  @return [String].\n<p>Returns a EAN 8 or 13 digit format barcode number with composite string attached with check digit</p>\n\n<pre><code>@return [String]\n\n@example\nFaker::Barcode.ean_with_composite_sumbology      =&gt; &quot;41007624|JHOC6649&quot;\nFaker::Barcode.ean_with_composite_sumbology(8)   =&gt; &quot;38357961|XUYJ3266&quot;\nFaker::Barcode.ean_with_composite_sumbology(13)  =&gt; &quot;9530722443911|CKHWQHID&quot;\n</code></pre>"
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "barcode.composite_symbol"
            }
          ]
        },
        {
          "name": "generate_barcode",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(key)\n\t\t\t\tbarcode = parse(key)\n\t\t\t\tcheck_digit = generate_check_digit(*sum_even_odd(barcode))\n\t\t\t\t\"#{barcode}#{check_digit}\""
            }
          ]
        },
        {
          "name": "generate_check_digit",
          "descriptions": [
            {
              "text": "Generates the check digits from sum passed.\n<p>Generates the check digits from sum passed</p>"
            }
          ],
          "return_type": "Integer",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Barcode.send(:generate_check_digit, 12, 4)   => 0\nFaker::Barcode.send(:generate_check_digit, 23, 5)   => 6"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(odd_sum, even_sum)\n\t\t\t\t(10 - (odd_sum * 3 + even_sum) % 10) % 10"
            }
          ]
        },
        {
          "name": "isbn",
          "descriptions": [
            {
              "text": "Returns a ISBN format barcode number with check digit  @return [String].\n<p>Returns a ISBN format barcode number with check digit</p>\n\n<pre><code>@return [String]\n\n@example\nFaker::Barcode.isbn      =&gt; &quot;9798363807732&quot;\n</code></pre>"
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "generate_barcode('barcode.isbn')"
            }
          ]
        },
        {
          "name": "ismn",
          "descriptions": [
            {
              "text": "Returns a ISMN format barcode number with check digit  @return [String].\n<p>Returns a ISMN format barcode number with check digit</p>\n\n<pre><code>@return [String]\n\n@example\nFaker::Barcode.ismn      =&gt; &quot;9790527672897&quot;\n</code></pre>"
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "generate_barcode('barcode.ismn')"
            }
          ]
        },
        {
          "name": "issn",
          "descriptions": [
            {
              "text": "Returns a ISSN format barcode number with check digit  @return [String].\n<p>Returns a ISSN format barcode number with check digit</p>\n\n<pre><code>@return [String]\n\n@example\nFaker::Barcode.issn      =&gt; &quot;9775541703338&quot;\n</code></pre>"
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "generate_barcode('barcode.issn')"
            }
          ]
        },
        {
          "name": "sum_even_odd",
          "descriptions": [
            {
              "text": "Returns the sum of even and odd numbers from value passed.\n<p>Returns the sum of even and odd numbers from value passed</p>"
            }
          ],
          "return_type": "Array<Integer>",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Barcode.send(:sum_even_odd, 12345)   => [9, 5]\nFaker::Barcode.send(:sum_even_odd, 87465)   => [17, 13]"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(fake_num)\n\t\t\t\tnumber = fake_num.to_i\n\t\t\t\tsum_even, sum_odd = 0, 0, index = 1\n\n\t\t\t\twhile number != 0\n\t\t\t\tindex.even? ? sum_even += number % 10 : sum_odd += number % 10\n\n\t\t\t\tnumber /= 10\n\t\t\t\tindex += 1"
            }
          ]
        },
        {
          "name": "upc_a",
          "descriptions": [
            {
              "text": "Returns a UPC_A format barcode number with check digit  @return [String].\n<p>Returns a UPC_A format barcode number with check digit</p>\n\n<pre><code>@return [String]\n\n@example\nFaker::Barcode.upc_a      =&gt; &quot;766807541831&quot;\n</code></pre>"
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "generate_barcode('barcode.upc_a')"
            }
          ]
        },
        {
          "name": "upc_a_with_composite_symbology",
          "descriptions": [
            {
              "text": "Returns a UPC_A format barcode number with composite string attached with check digit  @return [String].\n<p>Returns a UPC_A format barcode number with composite string attached with check digit</p>\n\n<pre><code>@return [String]\n\n@example\nFaker::Barcode.upc_a_with_composite_symbology      =&gt; &quot;790670155765|JOVG6208&quot;\n</code></pre>"
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "barcode.composite_symbol"
            }
          ]
        },
        {
          "name": "upc_e",
          "descriptions": [
            {
              "text": "Returns a UPC_E format barcode number with check digit  @return [String].\n<p>Returns a UPC_E format barcode number with check digit</p>\n\n<pre><code>@return [String]\n\n@example\nFaker::Barcode.upc_e      =&gt; &quot;03746820&quot;\n</code></pre>"
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "generate_barcode('barcode.upc_e')"
            }
          ]
        },
        {
          "name": "upc_e_with_composite_symbology",
          "descriptions": [
            {
              "text": "Returns a UPC_E format barcode number with composite string attached with check digit  @return [String].\n<p>Returns a UPC_E format barcode number with composite string attached with check digit</p>\n\n<pre><code>@return [String]\n\n@example\nFaker::Barcode.upc_e_with_composite_symbology      =&gt; &quot;05149247|BKZX9722&quot;\n</code></pre>"
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "barcode.composite_symbol"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Beer",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "alcohol",
          "descriptions": [
            {
              "text": "Produces a random beer alcohol percentage."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Beer.alcohol #=> \"5.4%\""
            }
          ],
          "implementations": [
            {
              "type": "Expression",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "#{rand(2.0..10.0).round(1)}%"
            }
          ]
        },
        {
          "name": "blg",
          "descriptions": [
            {
              "text": "Produces a random beer blg level."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Beer.blg #=> \"5.1Blg\""
            }
          ],
          "implementations": [
            {
              "type": "Expression",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "#{rand(5.0..20.0).round(1)}°Blg"
            }
          ]
        },
        {
          "name": "hop",
          "descriptions": [
            {
              "text": "Produces a random beer hops."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Beer.hop #=> \"Sterling\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "beer.hop"
            }
          ]
        },
        {
          "name": "ibu",
          "descriptions": [
            {
              "text": "Produces a random beer IBU."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Beer.ibu #=> \"87 IBU\""
            }
          ],
          "implementations": [
            {
              "type": "Expression",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "#{rand(10..100)} IBU"
            }
          ]
        },
        {
          "name": "malts",
          "descriptions": [
            {
              "text": "Produces a random beer malt."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Beer.malts #=> \"Munich\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "beer.malt"
            }
          ]
        },
        {
          "name": "name",
          "descriptions": [
            {
              "text": "Produces a random beer name."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Beer.name #=> \"Pliny The Elder\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "beer.name"
            }
          ]
        },
        {
          "name": "style",
          "descriptions": [
            {
              "text": "Produces a random beer style."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Beer.style #=> \"Wood-aged Beer\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "beer.style"
            }
          ]
        },
        {
          "name": "yeast",
          "descriptions": [
            {
              "text": "Produces a random beer yeast."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Beer.yeast #=> \"5335 - Lactobacillus\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "beer.yeast"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Blockchain",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [],
      "classes": [
        {
          "name": "Aeternity",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "address",
              "descriptions": [
                {
                  "text": "Produces a random Aeternity wallet address.\n<p>Produces a random Aeternity wallet address</p>"
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Blockchain::Aeternity.address\n#=> \"ak_zvU8YQLagjcfng7Tg8yCdiZ1rpiWNp1PBn3vtUs44utSvbJVR\""
                }
              ],
              "implementations": [
                {
                  "type": "Expression",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "ak_#{rand_strings}"
                }
              ]
            },
            {
              "name": "contract",
              "descriptions": [
                {
                  "text": "Produces a random Aeternity contract.\n<p>Produces a random Aeternity contract</p>"
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Blockchain::Aeternity.contract\n#=> \"ct_Hk2JsNeWGEYQEHHQCfcBeGrwbhtYSwFTPdDhW2SvjFYVojyhW\""
                }
              ],
              "implementations": [
                {
                  "type": "Expression",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "ct_#{rand_strings}"
                }
              ]
            },
            {
              "name": "oracle",
              "descriptions": [
                {
                  "text": "Produces a random Aeternity oracle.\n<p>Produces a random Aeternity oracle</p>"
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Blockchain::Aeternity.oracle\n#=> \"ok_28QDg7fkF5qiKueSdUvUBtCYPJdmMEoS73CztzXCRAwMGKHKZh\""
                }
              ],
              "implementations": [
                {
                  "type": "Expression",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "ok_#{rand_strings(51)}"
                }
              ]
            },
            {
              "name": "transaction",
              "descriptions": [
                {
                  "text": "Produces a random Aeternity transaction.\n<p>Produces a random Aeternity transaction</p>"
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Blockchain::Aeternity.transaction\n#=> \"th_147nDP22h3pHrLt2qykTH4txUwQh1ccaXp\""
                }
              ],
              "implementations": [
                {
                  "type": "Expression",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "th_#{rand_strings(51)}"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Bitcoin",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "address",
              "descriptions": [
                {
                  "text": "Produces a Bitcoin wallet address.\n<p>Produces a Bitcoin wallet address</p>"
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Blockchain::Bitcoin.address\n#=> \"147nDP22h3pHrLt2qykTH4txUwQh1ccaXp\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "address_for(:main)"
                }
              ]
            },
            {
              "name": "address_for",
              "descriptions": [
                {
                  "text": "Generates a random Bitcoin address for the given network.\n<p>Generates a random Bitcoin address for the given network</p>"
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [
                {
                  "name": "network",
                  "type": "Symbol",
                  "default": "",
                  "descriptions": [
                    {
                      "text": "<p>The name of network protocol to generate an address for</p>"
                    }
                  ]
                }
              ],
              "examples": [],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "(network)\n\t\t\t\t\tversion = PROTOCOL_VERSIONS.fetch(network)\n\t\t\t\t\tpacked = version.chr + Faker::Config.random.bytes(20)\n\t\t\t\t\tchecksum = OpenSSL::Digest::SHA256.digest(OpenSSL::Digest::SHA256.digest(packed))[0..3]\n\t\t\t\t\tFaker::Base58.encode(packed + checksum)"
                }
              ]
            },
            {
              "name": "testnet_address",
              "descriptions": [
                {
                  "text": "Produces a Bitcoin testnet address.\n<p>Produces a Bitcoin testnet address</p>"
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Blockchain::Bitcoin.testnet_address\n#=> \"n4YjRyYD6V6zREpk6opqESDqD3KYnMdVEB\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "address_for(:testnet)"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Ethereum",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "address",
              "descriptions": [
                {
                  "text": "Produces a random Ethereum wallet address.\n<p>Produces a random Ethereum wallet address</p>"
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Blockchain::Ethereum.address\n#=> \"0xd392b0c0500700d02d27ab30805ec80ddd3320ff\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "hex_alphabet = '0123456789abcdef'\n\t\t\t\t\tvar = +'0x'\n\t\t\t\t\t40.times { var << sample(shuffle(hex_alphabet.chars)) }\n\t\t\t\t\tvar"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Tezos",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "account",
              "descriptions": [
                {
                  "text": "Produces a random Tezos account address.\n<p>Produces a random Tezos account address</p>"
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Blockchain::Tezos.account\n#=> \"tz1eUsgK6aj752Fbxwk5sAoEFvSDnPjZ4qvk\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "encode_tz(:tz1, 20)"
                }
              ]
            },
            {
              "name": "block",
              "descriptions": [
                {
                  "text": "Produces a random Tezos block.\n<p>Produces a random Tezos block</p>"
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Blockchain::Tezos.block\n#=> \"BMbhs2rkY1dvAkAyRytvPsjFQ2RiPrBhYkxvWpY65dzkdSuw58a\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "encode_tz(:B, 32)"
                }
              ]
            },
            {
              "name": "contract",
              "descriptions": [
                {
                  "text": "Produces a random Tezos contract.\n<p>Produces a random Tezos contract</p>"
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Blockchain::Tezos.contract\n#=> \"KT1MroqeP15nnitB4CnNfkqHYa2NErhPPLWF\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "encode_tz(:KT1, 20)"
                }
              ]
            },
            {
              "name": "encode_tz",
              "descriptions": [
                {
                  "text": ""
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [
                {
                  "name": "prefix",
                  "type": "Symbol",
                  "descriptions": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "name": "payload_size",
                  "type": "Integer",
                  "default": "",
                  "descriptions": [
                    {
                      "text": "<p>The size of the payload</p>"
                    }
                  ]
                }
              ],
              "examples": [],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "(prefix, payload_size)\n\t\t\t\t\tprefix = PREFIXES.fetch(prefix)\n\t\t\t\t\tpacked = prefix.map(&:chr).join + Faker::Config.random.bytes(payload_size)\n\t\t\t\t\tchecksum = OpenSSL::Digest::SHA256.digest(OpenSSL::Digest::SHA256.digest(packed))[0..3]\n\t\t\t\t\tFaker::Base58.encode(packed + checksum)"
                }
              ]
            },
            {
              "name": "operation",
              "descriptions": [
                {
                  "text": "Produces a random Tezos operation.\n<p>Produces a random Tezos operation</p>"
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Blockchain::Tezos.operation\n#=> \"onygWYXJX3xNstFLv9PcCrhQdCkENC795xwSinmTEc1jsDN4VDa\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "encode_tz(:o, 32)"
                }
              ]
            },
            {
              "name": "public_key",
              "descriptions": [
                {
                  "text": "Produces a random Tezos public key.\n<p>Produces a random Tezos public key</p>"
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Blockchain::Tezos.public_key\n#=> \"edpkuib9x8QXRc5nWwHUg7U1dXsVmaUrUNU5sX9pVEEvwbMVdfMCeq\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "encode_tz(:edpk, 32)"
                }
              ]
            },
            {
              "name": "secret_key",
              "descriptions": [
                {
                  "text": "Produces a random Tezos public key.\n<p>Produces a random Tezos public key</p>"
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Blockchain::Tezos.secret_key\n#=> \"edsk3HZCAGEGpzQPnQUwQeFY4ESanFhQCgLpKriQw8GHyhKCrjHawv\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "encode_tz(:edsk, 32)"
                }
              ]
            },
            {
              "name": "signature",
              "descriptions": [
                {
                  "text": "Produces a random Tezos signature.\n<p>Produces a random Tezos signature</p>"
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Blockchain::Tezos.signature\n#=> \"edsigu165B7VFf3Dpw2QABVzEtCxJY2gsNBNcE3Ti7rRxtDUjqTFRpg67EdAQmY6YWPE5tKJDMnSTJDFu65gic8uLjbW2YwGvAZ\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "encode_tz(:edsig, 64)"
                }
              ]
            }
          ],
          "classes": []
        }
      ]
    },
    {
      "name": "Blood",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "group",
          "descriptions": [
            {
              "text": "Produces a random blood group name."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Blood.group #=> \"AB-\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "blood.group"
            }
          ]
        },
        {
          "name": "rh_factor",
          "descriptions": [
            {
              "text": "Produces a random blood RH-Factor."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Blood.rh_factor #=> \"-\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "blood.rh_factor"
            }
          ]
        },
        {
          "name": "type",
          "descriptions": [
            {
              "text": "Produces a random blood type."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Blood.type #=> \"AB\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "blood.type"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Book",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "author",
          "descriptions": [
            {
              "text": "Produces a random book author.\n<p>Produces a random book author</p>"
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Book.author #=> \"Alysha Olsen\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "book.author"
            }
          ]
        },
        {
          "name": "genre",
          "descriptions": [
            {
              "text": "Produces a random genre.\n<p>Produces a random genre</p>"
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Book.genre #=> \"Mystery\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "book.genre"
            }
          ]
        },
        {
          "name": "publisher",
          "descriptions": [
            {
              "text": "Produces a random book publisher.\n<p>Produces a random book publisher</p>"
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Book.publisher #=> \"Opus Reader\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "book.publisher"
            }
          ]
        },
        {
          "name": "title",
          "descriptions": [
            {
              "text": "Produces a random book title.\n<p>Produces a random book title</p>"
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Book.title #=> \"The Odd Sister\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "book.title"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Books",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [],
      "classes": [
        {
          "name": "CultureSeries",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "book",
              "descriptions": [
                {
                  "text": ""
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Books::CultureSeries.book\n#=> \"The Player of Games\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "culture_series.books"
                }
              ]
            },
            {
              "name": "civ",
              "descriptions": [
                {
                  "text": ""
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Books::CultureSeries.civ\n#=> \"Culture\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "culture_series.civs"
                }
              ]
            },
            {
              "name": "culture_ship",
              "descriptions": [
                {
                  "text": ""
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Books::CultureSeries.culture_ship\n#=> \"Fate Amenable To Change\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "culture_series.culture_ships"
                }
              ]
            },
            {
              "name": "culture_ship_class",
              "descriptions": [
                {
                  "text": ""
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Books::CultureSeries.culture_ship_class\n#=> \"General Systems Vehicle\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "culture_series.culture_ship_classes"
                }
              ]
            },
            {
              "name": "culture_ship_class_abv",
              "descriptions": [
                {
                  "text": ""
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Books::CultureSeries.culture_ship_class_abv\n#=> \"The Odd Sister\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "culture_series.culture_ship_class_abvs"
                }
              ]
            },
            {
              "name": "planet",
              "descriptions": [
                {
                  "text": ""
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Books::CultureSeries.planet\n#=> \"Xinth\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "culture_series.planets"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Dune",
          "descriptions": [
            {
              "text": "\n\t\t\t\tA Faker module beyond your dreams, test data beyond your imagination.\n\t\t\t\t<p>A Faker module beyond your dreams, test data beyond your imagination.</p>\n\t\t\t"
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces the name of a character from Dune.\n<p>Produces the name of a character from Dune</p>"
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Books::Dune.character #=> \"Leto Atreides\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "dune.characters"
                }
              ]
            },
            {
              "name": "city",
              "descriptions": [
                {
                  "text": "Produces the name of a city from Dune.\n<p>Produces the name of a city from Dune</p>"
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Books::Dune.city #=> \"Arrakeen\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "dune.cities"
                }
              ]
            },
            {
              "name": "planet",
              "descriptions": [
                {
                  "text": "Produces the name of a planet from Dune.\n<p>Produces the name of a planet from Dune</p>"
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Books::Dune.planet #=> \"Caladan\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "dune.planets"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Dune.\n<p>Produces a quote from Dune</p>"
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [
                {
                  "name": "character",
                  "type": "String",
                  "default": "nil",
                  "descriptions": [
                    {
                      "text": "<p>The name of the character that the quote should be from</p>"
                    }
                  ]
                }
              ],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Books::Dune.quote\n#=> \"A dead man, surely, no longer requires that water.\""
                },
                {
                  "description": "",
                  "code": "Faker::Books::Dune.quote(character: \"baron_harkonnen\")\n#=> \"He who controls the spice, controls the universe!\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "(character: nil)\n\t\t\t\t\tquoted_characters = translate('faker.dune.quotes').keys\n\n\t\t\t\t\tif character.nil?\n\t\t\t\t\tcharacter = sample(quoted_characters).to_s\n\t\t\t\t\telse\n\t\t\t\t\tcharacter = character.to_s.downcase\n\n\t\t\t\t\tunless quoted_characters.include?(character.to_sym)\n\t\t\t\t\traise ArgumentError,\n\t\t\t\t\t\"Characters quoted can be left blank or #{quoted_characters.join(', ')}\""
                }
              ]
            },
            {
              "name": "saying",
              "descriptions": [
                {
                  "text": "Produces a saying from Dune.\n<p>Produces a saying from Dune</p>"
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [
                {
                  "name": "source",
                  "type": "String",
                  "default": "nil",
                  "descriptions": [
                    {
                      "text": ""
                    }
                  ]
                }
              ],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Books::Dune.saying #=> \"You do not beg the sun for mercy.\""
                },
                {
                  "description": "",
                  "code": "Faker::Books::Dune.saying(source: \"fremen\")\n#=> \"May thy knife chip and shatter.\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "(source: nil)\n\t\t\t\t\tsourced_sayings = translate('faker.dune.sayings').keys\n\n\t\t\t\t\tif source.nil?\n\t\t\t\t\tsource = sample(sourced_sayings).to_s\n\t\t\t\t\telse\n\t\t\t\t\tsource = source.to_s.downcase\n\n\t\t\t\t\tunless sourced_sayings.include?(source.to_sym)\n\t\t\t\t\traise ArgumentError,\n\t\t\t\t\t\"Sources quoted in sayings can be left blank or #{sourced_sayings.join(', ')}\""
                }
              ]
            },
            {
              "name": "title",
              "descriptions": [
                {
                  "text": ""
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Books::Dune.title #=> \"Duke\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "dune.titles"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Lovecraft",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "deity",
              "descriptions": [
                {
                  "text": "Produces the name of a deity.\n<p>Produces the name of a deity</p>"
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Books::Lovecraft.deity #=> \"Shub-Niggurath\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "lovecraft.deity"
                }
              ]
            },
            {
              "name": "fhtagn",
              "descriptions": [
                {
                  "text": ""
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [
                {
                  "name": "number",
                  "type": "Integer",
                  "default": "1",
                  "descriptions": [
                    {
                      "text": "<p>The number of times to repeat the chant</p>"
                    }
                  ]
                }
              ],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Books::Lovecraft.fhtagn\n#=> \"Ph'nglui mglw'nafh Cthulhu R'lyeh wgah'nagl fhtagn\""
                },
                {
                  "description": "",
                  "code": "Faker::Books::Lovecraft.fhtagn(number: 3)\n#=> \"Ph'nglui mglw'nafh Cthulhu R'lyeh wgah'nagl fht..."
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "lovecraft.fhtagn"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces the name of a location.\n<p>Produces the name of a location</p>"
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Books::Lovecraft.location #=> \"Kingsport\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "lovecraft.location"
                }
              ]
            },
            {
              "name": "paragraph",
              "descriptions": [
                {
                  "text": "Produces a random paragraph.\n<p>Produces a random paragraph</p>"
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [
                {
                  "name": "sentence_count",
                  "type": "Integer",
                  "descriptions": [
                    {
                      "text": "<p>Number of sentences to generate</p>"
                    }
                  ]
                },
                {
                  "name": "random_sentences_to_add",
                  "type": "Integer",
                  "default": "3",
                  "descriptions": [
                    {
                      "text": ""
                    }
                  ]
                }
              ],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Books::Lovecraft.paragraph\n#=> \"Squamous nameless daemoniac fungus ululate. Cyclopean stygian decadent loathsome manuscript tenebrous. Foetid abnormal stench. Dank non-euclidean comprehension eldritch. Charnel singular shunned lurk effulgence fungus.\""
                },
                {
                  "description": "",
                  "code": "Faker::Books::Lovecraft.paragraph(sentence_count: 2)\n#=> \"Decadent lurk tenebrous loathsome furtive spectral amorphous gibbous. Gambrel eldritch daemoniac cat madness comprehension stygian effulgence.\""
                },
                {
                  "description": "",
                  "code": "Faker::Books::Lovecraft.paragraph(sentence_count: 1, random_sentences_to_add: 1)\n#=> \"Stench cyclopean fainted antiquarian nameless. Antiquarian ululate tenebrous non-euclidean effulgence.\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "(sentence_count: 3, random_sentences_to_add: 3)\n\t\t\t\t\tsentences(number: resolve(sentence_count) + rand(random_sentences_to_add.to_i).to_i).join(' ')"
                }
              ]
            },
            {
              "name": "paragraph_by_chars",
              "descriptions": [
                {
                  "text": ""
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [
                {
                  "name": "characters",
                  "type": "Integer",
                  "default": "256",
                  "descriptions": [
                    {
                      "text": "<p>Number of characters to generate in the paragraph</p>"
                    }
                  ]
                }
              ],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Books::Lovecraft.paragraph_by_chars\n#=> \"Truffaut stumptown trust fund 8-bit messenger bag portland. Meh kombucha selvage swag biodiesel. Lomo kinfolk jean shorts asymmetrical diy. Wayfarers portland twee stumptown. Wes anderson biodiesel retro 90's pabst. Diy echo 90's mixtape semiotics. Cornho.\""
                },
                {
                  "description": "",
                  "code": "Faker::Books::Lovecraft.paragraph_by_chars(characters: 128)\n#=> \"Effulgence madness noisome. Fungus stygian mortal madness amorphous dank. Decadent noisome hideous effulgence. Tentacles charne.\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "(characters: 256)\n\t\t\t\t\tparagraph = paragraph(sentence_count: 3)\n\n\t\t\t\t\tparagraph += \" #{paragraph(sentence_count: 3)}\" while paragraph.length < characters\n\n\t\t\t\t\t\"#{paragraph[0...characters - 1]}.\""
                }
              ]
            },
            {
              "name": "paragraphs",
              "descriptions": [
                {
                  "text": "Produces a array of random paragraphs.\n<p>Produces a array of random paragraphs</p>"
                }
              ],
              "return_type": "Array<String>",
              "return_desc": "",
              "arguments": [
                {
                  "name": "number",
                  "type": "Integer",
                  "default": "3",
                  "descriptions": [
                    {
                      "text": "<p>Number of paragraphs to generate</p>"
                    }
                  ]
                }
              ],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Books::Lovecraft.paragraphs\n#=> [\n#     \"Noisome daemoniac gibbous abnormal antediluvian. Unutterable fung...\n#     \"Non-euclidean immemorial indescribable accursed furtive. Dank unn...\n#     \"Charnel antediluvian unnamable cat blasphemous comprehension tene...\n#   ]"
                },
                {
                  "description": "",
                  "code": "Faker::Books::Lovecraft.paragraphs(number: 2)\n#=> [\n#     \"Hideous amorphous manuscript antediluvian non-euclidean cat eldri...\n#     \"Tenebrous unnamable comprehension antediluvian lurk. Lurk spectra...\n#   ]"
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "(number: 3)\n\t\t\t\t\t[].tap do |paragraphs|\n\t\t\t\t\t1.upto(resolve(number)) do\n\t\t\t\t\tparagraphs << paragraph(sentence_count: 3)"
                }
              ]
            },
            {
              "name": "sentence",
              "descriptions": [
                {
                  "text": "Produces a random sentence.\n<p>Produces a random sentence</p>"
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [
                {
                  "name": "word_count",
                  "type": "Integer",
                  "descriptions": [
                    {
                      "text": "<p>The number of words to have in the sentence</p>"
                    }
                  ]
                },
                {
                  "name": "random_words_to_add",
                  "type": "Integer",
                  "descriptions": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "name": "open_compounds_allowed",
                  "type": "Boolean",
                  "default": "true",
                  "descriptions": [
                    {
                      "text": "<p>If true, generated sentence can contain words having additional spaces</p>"
                    }
                  ]
                }
              ],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Books::Lovecraft.sentence\n#=> \"Furtive antiquarian squamous dank cat loathsome amorphous lurk.\""
                },
                {
                  "description": "",
                  "code": "Faker::Books::Lovecraft.sentence(word_count: 3)\n#=> \"Daemoniac antediluvian fainted squamous comprehension gambrel nameless singular.\""
                },
                {
                  "description": "",
                  "code": "Faker::Books::Lovecraft.sentence(word_count: 3, random_words_to_add: 1)\n#=> \"Amorphous indescribable tenebrous.\""
                },
                {
                  "description": "",
                  "code": "Faker::Books::Lovecraft.sentence(word_count: 3, random_words_to_add: 0, open_compounds_allowed: true)\n#=> \"Effulgence unmentionable gambrel.\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "(word_count: 4, random_words_to_add: 6, open_compounds_allowed: true)\n\t\t\t\t\t\"#{words(number: word_count + rand(random_words_to_add.to_i).to_i, spaces_allowed: open_compounds_allowed).join(' ').capitalize}.\""
                }
              ]
            },
            {
              "name": "sentences",
              "descriptions": [
                {
                  "text": "Produces a array of random sentences.\n<p>Produces a array of random sentences</p>"
                }
              ],
              "return_type": "Array<String>",
              "return_desc": "",
              "arguments": [
                {
                  "name": "number",
                  "type": "Integer",
                  "default": "3",
                  "descriptions": [
                    {
                      "text": "<p>Number of sentences to generate</p>"
                    }
                  ]
                }
              ],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Books::Lovecraft.sentences\n#=> [\n#     \"Nameless loathsome decadent gambrel.\",\n#     \"Ululate swarthy immemorial cat madness gibbous unmentionable unnamable.\",\n#     \"Decadent antediluvian non-euclidean tentacles amorphous tenebrous.\",\n#   ]"
                },
                {
                  "description": "",
                  "code": "Faker::Books::Lovecraft.sentences(number: 2)\n#=> [\n#     \"Antediluvian amorphous unmentionable singular accursed squamous immemorial.\",\n#     \"Gambrel daemoniac gibbous stygian shunned ululate iridescence abnormal.\",\n#   ]"
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "(number: 3)\n\t\t\t\t\t[].tap do |sentences|\n\t\t\t\t\t1.upto(resolve(number)) do\n\t\t\t\t\tsentences << sentence(word_count: 3)"
                }
              ]
            },
            {
              "name": "tome",
              "descriptions": [
                {
                  "text": "Produces the name of a tome.\n<p>Produces the name of a tome</p>"
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Books::Lovecraft.tome #=> \"Book of Eibon\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "lovecraft.tome"
                }
              ]
            },
            {
              "name": "word",
              "descriptions": [
                {
                  "text": "Produces a random word.\n<p>Produces a random word</p>"
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Books::Lovecraft.word #=> \"furtive\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "random_word = sample(translate('faker.lovecraft.words'))\n\t\t\t\t\trandom_word =~ /\\s/ ? word : random_word"
                }
              ]
            },
            {
              "name": "words",
              "descriptions": [
                {
                  "text": "Produces a array of random words.\n<p>Produces a array of random words</p>"
                }
              ],
              "return_type": "Array<String>",
              "return_desc": "",
              "arguments": [
                {
                  "name": "number",
                  "type": "Integer",
                  "descriptions": [
                    {
                      "text": "<p>Number of words to generate</p>"
                    }
                  ]
                },
                {
                  "name": "spaces_allowed",
                  "type": "Boolean",
                  "default": "false",
                  "descriptions": [
                    {
                      "text": "<p>If true, generated words can contain spaces</p>"
                    }
                  ]
                }
              ],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Books::Lovecraft.words\n#=> [\n#     \"manuscript\",\n#     \"abnormal\",\n#     \"singular\",\n#   ]"
                },
                {
                  "description": "",
                  "code": "Faker::Books::Lovecraft.words(number: 2)\n#=> [\n#     \"daemoniac\",\n#     \"cat\",\n#   ]"
                },
                {
                  "description": "",
                  "code": "Faker::Books::Lovecraft.words(number: 2, spaces_allowed: 1)\n#=> [\n#     \"lurk\",\n#     \"charnel\",\n#   ]"
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "(number: 3, spaces_allowed: false)\n\t\t\t\t\tresolved_num = resolve(number)\n\t\t\t\t\tword_list = translate('faker.lovecraft.words')\n\t\t\t\t\tword_list *= ((resolved_num / word_list.length) + 1)\n\n\t\t\t\t\treturn shuffle(word_list)[0, resolved_num] if spaces_allowed\n\n\t\t\t\t\twords = shuffle(word_list)[0, resolved_num]\n\t\t\t\t\twords.each_with_index { |w, i| words[i] = word if w =~ /\\s/ }"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "TheKingkillerChronicle",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "book",
              "descriptions": [
                {
                  "text": "Produces the name of a The Kingkiller Chronicle book."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Books::TheKingkillerChronicle.book #=> \"The Name of the Wind\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "books.the_kingkiller_chronicle.books"
                }
              ]
            },
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces the name of a The Kingkiller Chronicle character."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Books::TheKingkillerChronicle.character #=> \"Kvothe\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "books.the_kingkiller_chronicle.characters"
                }
              ]
            },
            {
              "name": "creature",
              "descriptions": [
                {
                  "text": "Produces the name of a The Kingkiller Chronicle creature."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Books::TheKingkillerChronicle.creature #=> \"Scrael\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "books.the_kingkiller_chronicle.creatures"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces the name of a The Kingkiller Chronicle location."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Books::TheKingkillerChronicle.location #=> \"Tarbean\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "books.the_kingkiller_chronicle.locations"
                }
              ]
            }
          ],
          "classes": []
        }
      ]
    },
    {
      "name": "Boolean",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "get_boolean",
          "descriptions": [
            {
              "text": "Produces a boolean.\n<p>Produces a boolean</p>"
            }
          ],
          "return_type": "Boolean",
          "return_desc": "",
          "arguments": [
            {
              "name": "true_ratio",
              "type": "Float",
              "default": "0.5",
              "descriptions": [
                {
                  "text": "<p>The likelihood (as a float, out of 1.0) for the method to return ‘true`.</p>"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Boolean.boolean #=> true"
            },
            {
              "description": "",
              "code": "Faker::Boolean.boolean(true_ratio: 0.2) #=> false"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(true_ratio: 0.5)\n\t\t\t\t(rand < true_ratio)"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "BossaNova",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "artist",
          "descriptions": [
            {
              "text": "Produces the name of a bossa nova artist."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::BossaNova.artist #=> \"Tom Jobin\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "bossa_nova.artists"
            }
          ]
        },
        {
          "name": "song",
          "descriptions": [
            {
              "text": "Produces a bossa nova song."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::BossaNova.song #=> \"Chega de Saudade\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "bossa_nova.songs"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Business",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "credit_card_expiry_date",
          "descriptions": [
            {
              "text": "Produces a credit card expiration date."
            }
          ],
          "return_type": "Date",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Business.credit_card_expiry_date #=> <Date: 2015-11-11 ((2457338j,0s,0n),+0s,2299161j)>"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "::Date.today + (365 * rand(1..4))"
            }
          ]
        },
        {
          "name": "credit_card_number",
          "descriptions": [
            {
              "text": "Produces a credit card number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Business.credit_card_number #=> \"1228-1221-1221-1431\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "business.credit_card_numbers"
            }
          ]
        },
        {
          "name": "credit_card_type",
          "descriptions": [
            {
              "text": "Produces a type of credit card."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Business.credit_card_type #=> \"visa\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "business.credit_card_types"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Camera",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "brand",
          "descriptions": [
            {
              "text": "Produces a brand of a camera.\n<p>Produces a brand of a camera</p>"
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Camera.brand #=> \"Canon\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "camera.brand"
            }
          ]
        },
        {
          "name": "brand_with_model",
          "descriptions": [
            {
              "text": "Produces a brand with model.\n<p>Produces a brand with model</p>"
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Camera.brand_with_model #=> \"Canon 450D\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "camera.brand_with_model"
            }
          ]
        },
        {
          "name": "model",
          "descriptions": [
            {
              "text": "Produces a model of camera.\n<p>Produces a model of camera</p>"
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Camera.model #=> \"450D\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "camera.model"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Cannabis",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "brand",
          "descriptions": [
            {
              "text": "Produces a random brand."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Cannabis.brand #=> \"Cannavore Confections\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "cannabis.brands"
            }
          ]
        },
        {
          "name": "buzzword",
          "descriptions": [
            {
              "text": "Produces a random buzzword."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Cannabis.buzzword #=> \"high\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "cannabis.buzzwords"
            }
          ]
        },
        {
          "name": "cannabinoid",
          "descriptions": [
            {
              "text": "Produces a random cannabinoid type."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Cannabis.cannabinoid #=> \"Cannabinolic Acid\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "cannabis.cannabinoids"
            }
          ]
        },
        {
          "name": "cannabinoid_abbreviation",
          "descriptions": [
            {
              "text": "Produces a random abbreviation."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Cannabis.cannabinoid_abbreviation #=> \"CBGa\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "cannabis.cannabinoid_abbreviations"
            }
          ]
        },
        {
          "name": "category",
          "descriptions": [
            {
              "text": "Produces a random category."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Cannabis.category #=> \"crystalline\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "cannabis.categories"
            }
          ]
        },
        {
          "name": "health_benefit",
          "descriptions": [
            {
              "text": "Produces a random health benefit."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Cannabis.health_benefit #=> \"prevents infection\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "cannabis.health_benefits"
            }
          ]
        },
        {
          "name": "medical_use",
          "descriptions": [
            {
              "text": "Produces a random kind of medical use."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Cannabis.medical_use #=> \"anti-cancer\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "cannabis.medical_uses"
            }
          ]
        },
        {
          "name": "strain",
          "descriptions": [
            {
              "text": "Produces a random strain."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Cannabis.strain #=> \"Super Glue\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "cannabis.strains"
            }
          ]
        },
        {
          "name": "terpene",
          "descriptions": [
            {
              "text": "Produces a random terpene type."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Cannabis.terpene #=> \"Terpinene\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "cannabis.terpenes"
            }
          ]
        },
        {
          "name": "type",
          "descriptions": [
            {
              "text": "Produces a random type."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Cannabis.type #=> \"indica\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "cannabis.types"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "ChileRut",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "check_digit",
          "descriptions": [
            {
              "text": "Produces a random Chilean digito verificador (check-digit).\n<p>Alias for english speaking devs.</p>"
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::ChileRut.check_digit #=> \"5\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "dv"
            }
          ]
        },
        {
          "name": "dv",
          "descriptions": [
            {
              "text": "Produces a random Chilean digito verificador (check-digit)."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::ChileRut.dv #=> \"k\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "split_reversed_rut = @last_rut.to_s.reverse.chars\n\t\t\t\tseq = [2, 3, 4, 5, 6, 7]\n\t\t\t\ti = 0\n\t\t\t\tdigit_sum = split_reversed_rut.reduce(0) do |sum, n|\n\t\t\t\tpartial_result = sum.to_i + (n.to_i * seq[i])\n\t\t\t\ti = i == 5 ? 0 : i + 1\n\t\t\t\tpartial_result"
            }
          ]
        },
        {
          "name": "format_rut",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(rut)\n\t\t\t\trut.to_s.reverse.gsub(/(\\d{3})(?=\\d)/, '\\\\1.').reverse"
            }
          ]
        },
        {
          "name": "full_rut",
          "descriptions": [
            {
              "text": "Produces a random Chilean RUT (Rol Unico Tributario, ID with 8 digits) with a dv (digito verificador, check-digit)."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "min_rut",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "<p>Specifies the minimum value of the RUT.</p>"
                }
              ]
            },
            {
              "name": "max_rut",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "<p>Specifies the maximum value of the RUT.</p>"
                }
              ]
            },
            {
              "name": "fixed",
              "type": "Boolean",
              "descriptions": [
                {
                  "text": "<p>Determines if the RUT is fixed (returns the min_rut value).</p>"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::ChileRut.full_rut #=> \"30686957-4\"\nFaker::ChileRut.full_rut(min_rut: 10_000_000, max_rut: 30_000_000) #=> \"20686957-4\"\nFaker::ChileRut.full_rut(min_rut: 30_686_957, fixed: true) #=> \"30686957-4\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(min_rut: 1, max_rut: 99_999_999, fixed: false, formatted: false)\n\t\t\t\tthis_rut = rut(min_rut: min_rut, max_rut: max_rut, fixed: fixed)\n\t\t\t\tthis_rut = format_rut(this_rut) if formatted\n\t\t\t\t\"#{this_rut}-#{dv}\""
            }
          ]
        },
        {
          "name": "last_rut",
          "descriptions": [
            {
              "text": "Returns the value of attribute last_rut."
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "type": "Resolve"
            }
          ]
        },
        {
          "name": "rut",
          "descriptions": [
            {
              "text": "Produces a random Chilean RUT (Rol Unico Tributario, ID with 8 digits)."
            }
          ],
          "return_type": "Number",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "min_rut",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "<p>Specifies the minimum value of the RUT.</p>"
                }
              ]
            },
            {
              "name": "max_rut",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "<p>Specifies the maximum value of the RUT.</p>"
                }
              ]
            },
            {
              "name": "is_fixed",
              "type": "Boolean",
              "default": "false",
              "descriptions": [
                {
                  "text": "<p>Determines if the RUT is fixed (returns the min_rut value).</p>"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::ChileRut.rut #=> 11235813\nFaker::ChileRut.rut(min_rut: 10_000_000, max_rut: 30_000_000) #=> 21853211\nFaker::ChileRut.rut(min_rut: 20_890_156, is_fixed: true) #=> 20890156"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(min_rut: 1, max_rut: 99_999_999, is_fixed: false)\n\t\t\t\t@last_rut = is_fixed ? min_rut : rand_in_range(min_rut, max_rut)"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "ChuckNorris",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "fact",
          "descriptions": [
            {
              "text": "Produces a Chuck Norris Fact.\n<p>Original list of facts: <a href=\"https://github.com/jenkinsci/chucknorris-plugin/blob/master/src/main/java/hudson/plugins/chucknorris/FactGenerator.java\">github.com/jenkinsci/chucknorris-plugin/blob/master/src/main/java/hudson/plugins/chucknorris/FactGenerator.java</a></p>"
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::ChuckNorris.fact\n#=> \"Chuck Norris can solve the Towers of Hanoi in one move.\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "chuck_norris.fact"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Code",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "asin",
          "descriptions": [
            {
              "text": "Retrieves a real Amazon ASIN code from https://archive.org/details/asin_listing.\n<p>Retrieves a real Amazon ASIN code from <a href=\"https://archive.org/details/asin_listing\">archive.org/details/asin_listing</a></p>"
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Code.asin #=> \"B000MZW1GE\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "code.asin"
            }
          ]
        },
        {
          "name": "ean",
          "descriptions": [
            {
              "text": "Produces a random EAN (European Article Number) code."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "digits",
              "type": "Integer",
              "default": "13",
              "descriptions": [
                {
                  "text": "<p>the length of the code to generate (either 8 or 13)</p>"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Code.ean(digits: 8) #=> \"36941070\""
            },
            {
              "description": "",
              "code": "Faker::Code.ean #=> \"9941880131907\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(digits: 13)\n\t\t\t\tcase digits\n\t\t\t\twhen 8 then generate_base8_ean\n\t\t\t\twhen 13 then generate_base13_ean\n\t\t\t\telse raise ArgumentError, 'base must be 8 or 13'"
            }
          ]
        },
        {
          "name": "generate_base10_isbn",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "generate(:string) do |g|\n\t\t\t\tg.int(name: :values, length: 9)\n\t\t\t\tg.lit('-')\n\t\t\t\tg.computed(name: :checksum, deps: [:values]) do |values|\n\t\t\t\tremainder = sum(values.to_s) { |value, offset| (offset + 1) * value.to_i } % 11\n\t\t\t\tif remainder == 10\n\t\t\t\t'X'\n\t\t\t\telse\n\t\t\t\tremainder.to_s"
            }
          ]
        },
        {
          "name": "generate_base13_ean",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "generate(:string) do |g|\n\t\t\t\tg.int(name: :values, length: 12)\n\t\t\t\tg.computed(name: :checksum, deps: [:values]) do |values|\n\t\t\t\tcheck_digit = 10 - values.to_s.chars.each_with_index.inject(0) { |s, (v, i)| s + v.to_i * EAN_CHECK_DIGIT13[i] } % 10\n\t\t\t\tif check_digit == 10\n\t\t\t\t0\n\t\t\t\telse\n\t\t\t\tcheck_digit"
            }
          ]
        },
        {
          "name": "generate_base13_isbn",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "generate(:string) do |g|\n\t\t\t\tg.int(name: :values, length: 12)\n\t\t\t\tg.lit('-')\n\t\t\t\tg.computed(name: :checksum, deps: [:values]) do |values|\n\t\t\t\tremainder = sum(values.to_s) { |value, offset| offset.even? ? value.to_i : value.to_i * 3 } % 10\n\t\t\t\t(10 - remainder) % 10"
            }
          ]
        },
        {
          "name": "generate_base8_ean",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "generate(:string) do |g|\n\t\t\t\tg.int(name: :values, length: 7)\n\t\t\t\tg.computed(name: :checksum, deps: [:values]) do |values|\n\t\t\t\tcheck_digit = 10 - values.to_s.chars.each_with_index.inject(0) { |s, (v, i)| s + v.to_i * EAN_CHECK_DIGIT8[i] } % 10\n\t\t\t\tif check_digit == 10\n\t\t\t\t0\n\t\t\t\telse\n\t\t\t\tcheck_digit"
            }
          ]
        },
        {
          "name": "generate_imei",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "str = Array.new(15, 0)\n\t\t\t\tsum = 0\n\t\t\t\tlen = 15\n\n\t\t\t\t# Fill in the first two values of the string based with the specified prefix.\n\t\t\t\t# Reporting Body Identifier list: http://en.wikipedia.org/wiki/Reporting_Body_Identifier\n\t\t\t\tarr = sample(RBI)\n\t\t\t\tstr[0] = arr[0].to_i\n\t\t\t\tstr[1] = arr[1].to_i\n\t\t\t\tpos = 2\n\n\t\t\t\t# Fill all the remaining numbers except for the last one with random values.\n\t\t\t\twhile pos < (len - 1)\n\t\t\t\tstr[pos] = rand(0..9)\n\t\t\t\tpos += 1"
            }
          ]
        },
        {
          "name": "generate_nric_check_alphabet",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(values, prefix)\n\t\t\t\tweight = %w[2 7 6 5 4 3 2]\n\t\t\t\ttotal = values.chars.zip(weight).collect { |a, b| a.to_i * b.to_i }.inject(:+)\n\t\t\t\ttotal += 4 if prefix == 'T'\n\t\t\t\t%w[A B C D E F G H I Z J][10 - total % 11]"
            }
          ]
        },
        {
          "name": "generate_sin_check_digit",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(digits)\n\t\t\t\t# Fast Luhn checksum code from luhn.js:\n\t\t\t\t# https://gist.github.com/ShirtlessKirk/2134376\n\n\t\t\t\tlen = 9\n\t\t\t\tmul = 0\n\n\t\t\t\tluhn_arr = [\n\t\t\t\t[0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n\t\t\t\t[0, 2, 4, 6, 8, 1, 3, 5, 7, 9]\n\t\t\t\t]\n\t\t\t\tsum = 0\n\n\t\t\t\twhile len.positive?\n\t\t\t\tlen -= 1\n\t\t\t\tnum = digits[len].to_i\n\t\t\t\tsum += luhn_arr[mul][num]\n\t\t\t\tmul ^= 1"
            }
          ]
        },
        {
          "name": "imei",
          "descriptions": [
            {
              "text": "Produces a random IMEI (International Mobile Equipment Number) code."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Code.imei #=> \"492033129092256\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "generate_imei"
            }
          ]
        },
        {
          "name": "isbn",
          "descriptions": [
            {
              "text": "Produces a random ISBN (International Standard Book Number) code."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "digits",
              "type": "Integer",
              "default": "10",
              "descriptions": [
                {
                  "text": "<p>the length of the code to generate (either 10 or 13)</p>"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Code.isbn(digits: 13) #=> \"896579606969-8\""
            },
            {
              "description": "",
              "code": "Faker::Code.isbn #=> \"170366802-2\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(digits: 10)\n\t\t\t\tcase digits\n\t\t\t\twhen 10 then generate_base10_isbn\n\t\t\t\twhen 13 then generate_base13_isbn\n\t\t\t\telse raise ArgumentError, 'digits must be 10 or 13'"
            }
          ]
        },
        {
          "name": "npi",
          "descriptions": [
            {
              "text": "Produces a random NPI (National Provider Identifier) code."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Code.npi #=> \"9804062802\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "rand(10**10).to_s.rjust(10, '0')"
            }
          ]
        },
        {
          "name": "nric",
          "descriptions": [
            {
              "text": "Produces a random NRIC (National Registry Identity Card) code.\n<p>By default generates a Singaporean NRIC ID for someone who is born between the age of 18 and 65.</p>"
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "min_age",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "<p>the min age of the person in years</p>"
                }
              ]
            },
            {
              "name": "max_age",
              "type": "Integer",
              "default": "65",
              "descriptions": [
                {
                  "text": "<p>the max age of the person in years</p>"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Code.nric(min_age: 25, max_age: 50) #=> \"S9347283G\""
            },
            {
              "description": "",
              "code": "Faker::Code.nric(max_age: 55) #=> \"S7876903C\""
            },
            {
              "description": "",
              "code": "Faker::Code.nric(min_age: 25) #=> \"S6281697Z\""
            },
            {
              "description": "",
              "code": "Faker::Code.nric #=> \"S6372958B\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(min_age: 18, max_age: 65)\n\t\t\t\tbirthyear = Date.birthday(min_age: min_age, max_age: max_age).year\n\n\t\t\t\tgenerate(:string) do |g|\n\t\t\t\tg.computed(name: :prefix) do\n\t\t\t\tif birthyear < 2000\n\t\t\t\t'S'\n\t\t\t\telse\n\t\t\t\t'T'"
            }
          ]
        },
        {
          "name": "rut",
          "descriptions": [
            {
              "text": "Produces a random RUT (Rol Unico Nacional) code."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Code.rut #=> \"91611842-2\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "value = Number.number(digits: 8).to_s\n\t\t\t\tvd = rut_verificator_digit(value)\n\t\t\t\tvalue << \"-#{vd}\""
            }
          ]
        },
        {
          "name": "rut_verificator_digit",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(rut)\n\t\t\t\ttotal = rut.to_s.rjust(8, '0').chars.zip(%w[3 2 7 6 5 4 3 2]).collect { |a, b| a.to_i * b.to_i }.inject(:+)\n\t\t\t\t(11 - total % 11).to_s.gsub('10', 'k').gsub('11', '0')"
            }
          ]
        },
        {
          "name": "sin",
          "descriptions": [
            {
              "text": "Produces a random SIN (Social Insurance Number for Canada) code."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Code.sin #=> \"996586962\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "# 1   - province or temporary resident\n\t\t\t\t# 2-8 - random numbers\n\t\t\t\t# 9   - checksum\n\n\t\t\t\t# 1st digit. 8,0 are not used\n\t\t\t\tregistry = Faker::Base.sample([1, 2, 3, 4, 5, 6, 7, 9]).to_s\n\n\t\t\t\t# generate 2nd to 8th\n\t\t\t\tpartial = Array.new(7) { Faker::Config.random.rand(0..9) }.join\n\n\t\t\t\t# Generate 9th digit\n\t\t\t\tcheck_digit = generate_sin_check_digit(\"#{registry}#{partial}0\").to_s\n\n\t\t\t\tregistry + partial + check_digit"
            }
          ]
        },
        {
          "name": "sum",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(values)\n\t\t\t\tvalues.chars.each_with_index.inject(0) do |sum, (value, index)|\n\t\t\t\tsum + yield(value, index)"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Coffee",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "blend_name",
          "descriptions": [
            {
              "text": "Produces a random blend name."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Coffee.blend_name #=> \"Major Java\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "coffee.blend_name"
            }
          ]
        },
        {
          "name": "intensifier",
          "descriptions": [
            {
              "text": "Produces a random coffee taste intensity."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Coffee.intensifier #=> \"mild\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "coffee.intensifier"
            }
          ]
        },
        {
          "name": "notes",
          "descriptions": [
            {
              "text": "Produces a string containing a random description of a coffee's taste."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Coffee.notes #=> \"dull, tea-like, cantaloupe, soy sauce, marshmallow\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "coffee.notes"
            }
          ]
        },
        {
          "name": "origin",
          "descriptions": [
            {
              "text": "Produces a random coffee origin place."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Coffee.origin #=> \"Oaxaca, Mexico\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "coffee.country"
            }
          ]
        },
        {
          "name": "search_format",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(key)\n\t\t\t\tkey.split.length > 1 ? key.split.join('_').downcase : key.downcase"
            }
          ]
        },
        {
          "name": "variety",
          "descriptions": [
            {
              "text": "Produces a random coffee variety."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Coffee.variety #=> \"Red Bourbon\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "coffee.variety"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Coin",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "flip",
          "descriptions": [
            {
              "text": "Retrieves a face to a flipped coin.\n<p>Retrieves a face to a flipped coin</p>"
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Coin.flip #=> \"Heads\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "coin.flip"
            }
          ]
        },
        {
          "name": "name",
          "descriptions": [
            {
              "text": "Retrieves a random coin from any country."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Coin.name #=> \"Brazilian Real\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "currency.name"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Color",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "color_name",
          "descriptions": [
            {
              "text": "Produces the name of a color."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Color.color_name #=> \"yellow\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "color.name"
            }
          ]
        },
        {
          "name": "hex_color",
          "descriptions": [
            {
              "text": "Produces a hex color code.\n                            <p>Clients are able to specify the hue, saturation, or lightness of the required color. Alternatively a client can simply specify that they need a light or dark color.</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "args",
              "type": "Hash",
              "default": "nil",
              "descriptions": [
                {
                  "text": "\n<p>Allows the client to specify what color should be return</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Color.hex_color #=> \"#31a785\""
            },
            {
              "description": "",
              "code": "Faker::Color.hex_color(hue: 118, saturation: 1, lightness: 0.53) #=> \"#048700\""
            },
            {
              "description": "",
              "code": "Faker::Color.hex_color(:light) #=> \"#FFEE99\""
            },
            {
              "description": "",
              "code": "Faker::Color.hex_color(:dark) #=> \"#665500\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(args = nil)\n        hsl_hash = {}\n        hsl_hash = { lightness: LIGHTNESS_LOOKUP[args] } if %i[dark light].include?(args)\n        hsl_hash = args if args.is_a?(Hash)\n        hsl_to_hex(hsl_color(**hsl_hash))"
            }
          ]
        },
        {
          "name": "hsl_color",
          "descriptions": [
            {
              "text": "Produces an array of floats representing an HSL color.\n                            <p>The array is in the form of ‘[hue, saturation, lightness]`.</p>\n                        "
            }
          ],
          "return_type": "Array(Float, Float, Float)",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "hue",
              "type": "FLoat",
              "descriptions": [
                {
                  "text": "\n<p>Optional value to use for hue</p>\n"
                }
              ]
            },
            {
              "name": "saturation",
              "type": "Float",
              "descriptions": [
                {
                  "text": "\n<p>Optional value to use for saturation</p>\n"
                }
              ]
            },
            {
              "name": "lightness",
              "type": "Float",
              "default": "nil",
              "descriptions": [
                {
                  "text": "\n<p>Optional value to use for lightness</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Color.hsl_color #=> [69.87, 0.66, 0.3]"
            },
            {
              "description": "",
              "code": "Faker::Color.hsl_color(hue: 70, saturation: 0.5, lightness: 0.8) #=> [70, 0.5, 0.8]"
            },
            {
              "description": "",
              "code": "Faker::Color.hsl_color(hue: 70) #=> [70, 0.66, 0.6]"
            },
            {
              "description": "",
              "code": "Faker::Color.hsl_color(saturation: 0.2) #=> [54, 0.2, 0.3]"
            },
            {
              "description": "",
              "code": "Faker::Color.hsl_color(lightness: 0.6) #=> [69.87, 0.66, 0.6]"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(hue: nil, saturation: nil, lightness: nil)\n        valid_hue = hue || sample((0..360).to_a)\n        valid_saturation = saturation&.clamp(0, 1) || rand.round(2)\n        valid_lightness = lightness&.clamp(0, 1) || rand.round(2)\n        [valid_hue, valid_saturation, valid_lightness]"
            }
          ]
        },
        {
          "name": "hsl_to_hex",
          "descriptions": [
            {
              "text": "Produces a hex code representation of an HSL color.\n                            <p>Produces a hex code representation of an HSL color</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "a_hsl_color",
              "type": "Array(Float, Float, Float)",
              "default": "",
              "descriptions": [
                {
                  "text": "\n<p>The array that represents the HSL color</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "hsl_to_hex([50, 100,80]) #=> #FFEE99"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(a_hsl_color)\n        h, s, l = a_hsl_color\n        c = (1 - (2 * l - 1).abs) * s\n        h_prime = h / 60\n        x = c * (1 - (h_prime % 2 - 1).abs)\n        m = l - 0.5 * c\n\n        rgb = case h_prime.to_i\n              when 0 # 0 <= H' < 1\n                [c, x, 0]\n              when 1 # 1 <= H' < 2\n                [x, c, 0]\n              when 2 # 2 <= H' < 3\n                [0, c, x]\n              when 3 # 3 <= H' < 4\n                [0, x, c]\n              when 4 # 4 <= H' < 5\n                [x, 0, c]\n              else # 5 <= H' < 6\n                [c, 0, x]\n              end.map { |value| ((value + m) * 255).round }\n\n        format('#%02x%02x%02x', rgb[0], rgb[1], rgb[2])"
            }
          ]
        },
        {
          "name": "hsla_color",
          "descriptions": [
            {
              "text": "Produces an array of floats representing an HSLA color.\n                            <p>The array is in the form of ‘[hue, saturation, lightness, alpha]`.</p>\n                        "
            }
          ],
          "return_type": "Array(Float, Float, Float, Float)",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Color.hsla_color #=> [154.77, 0.36, 0.9, 0.2]"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "hsl_color << rand.round(1)"
            }
          ]
        },
        {
          "name": "rgb_color",
          "descriptions": [
            {
              "text": "Produces an array of integers representing an RGB color."
            }
          ],
          "return_type": "Array(Integer, Integer, Integer)",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Color.rgb_color #=> [54, 233, 67]"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "Array.new(3) { single_rgb_color }"
            }
          ]
        },
        {
          "name": "single_rgb_color",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "sample((0..255).to_a)"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Commerce",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "brand",
          "descriptions": [
            {
              "text": "Produces a randomized string of a brand name.\n                            <p>Produces a randomized string of a brand name</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Commerce.brand #=> 'Apple'"
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "commerce.brand"
            }
          ]
        },
        {
          "name": "categories",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "type": "Resolve",
              "data": "commerce.department"
            }
          ]
        },
        {
          "name": "color",
          "descriptions": [
            {
              "text": "Produces a random color."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Commerce.color #=> \"lavender\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "color.name"
            }
          ]
        },
        {
          "name": "department",
          "descriptions": [
            {
              "text": "Produces a random department."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "max",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>Updates the maximum number of names used to generate the department name.</p>\n"
                }
              ]
            },
            {
              "name": "fixed_amount",
              "type": "Boolean",
              "default": "false",
              "descriptions": [
                {
                  "text": "\n<p>Fixes the amount of departments to use instead of using a range.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Commerce.department #=> \"Grocery, Health & Beauty\"\nFaker::Commerce.department(max: 5) #=> \"Grocery, Books, Health & Beauty\"\nFaker::Commerce.department(max: 2, fixed_amount: true) #=> \"Books & Tools\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(max: 3, fixed_amount: false)\n        num = max if fixed_amount\n        num ||= 1 + rand(max)\n\n        categories = categories(num)\n\n        if categories.is_a?(Array)\n          if categories.length > 1\n            merge_categories(categories)\n          else\n            categories[0]"
            }
          ]
        },
        {
          "name": "material",
          "descriptions": [
            {
              "text": "Produces a random material."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Commerce.material #=> \"Plastic\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "commerce.product_name.material"
            }
          ]
        },
        {
          "name": "merge_categories",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "separator"
            }
          ]
        },
        {
          "name": "price",
          "descriptions": [
            {
              "text": "Produces a random product price."
            }
          ],
          "return_type": "Float",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "range",
              "type": "Range",
              "descriptions": [
                {
                  "text": "\n<p>A range to generate the random number within.</p>\n"
                }
              ]
            },
            {
              "name": "as_string",
              "type": "Boolean",
              "default": "false",
              "descriptions": [
                {
                  "text": "\n<p>Changes the return value to [String].</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Commerce.price #=> 44.6\nFaker::Commerce.price(range: 0..10.0, as_string: true) #=> \"2.18\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(range: 0..100.0, as_string: false)\n        price = (rand(range) * 100).floor / 100.0\n        if as_string\n          price_parts = price.to_s.split('.')\n          price = \"#{price_parts[0]}.#{price_parts[-1].ljust(2, '0')}\""
            }
          ]
        },
        {
          "name": "product_name",
          "descriptions": [
            {
              "text": "Produces a random product name."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Commerce.product_name #=> \"Practical Granite Shirt\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "commerce.product_name.adjective"
            }
          ]
        },
        {
          "name": "promotion_code",
          "descriptions": [
            {
              "text": "Produces a random promotion code."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "digits",
              "type": "Integer",
              "default": "6",
              "descriptions": [
                {
                  "text": "\n<p>Updates the number of numerical digits used to generate the promotion code.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Commerce.promotion_code #=> \"AmazingDeal829102\"\nFaker::Commerce.promotion_code(digits: 2) #=> \"AmazingPrice57\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "commerce.promotion_code.adjective"
            }
          ]
        },
        {
          "name": "vendor",
          "descriptions": [
            {
              "text": "Produces a randomized string of a vendor name.\n                            <p>Produces a randomized string of a vendor name</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Commerce.vendor #=> 'Dollar General'"
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "commerce.vendor"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Company",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "abn_checksum",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(abn)\n        abn_weights = [10, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n        sum = 0\n\n        abn_weights.each_with_index do |weight, i|\n          sum += weight * abn[i].to_i"
            }
          ]
        },
        {
          "name": "australian_business_number",
          "descriptions": [
            {
              "text": "Produces a company australian business number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Company.australian_business_number #=> \"93579396170\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "base = format('%09d', rand(10**9))\n        abn = \"00#{base}\"\n\n        (99 - (abn_checksum(abn) % 89)).to_s + base"
            }
          ]
        },
        {
          "name": "brazilian_company_number",
          "descriptions": [
            {
              "text": "Produces a company brazilian company number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Company.brazilian_company_number #=> \"37205322000500\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(formatted: false)\n        digits = Array.new(8) { Faker::Number.digit.to_i } + [0, 0, 0, Faker::Number.non_zero_digit.to_i]\n\n        factors = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2, 6].cycle\n\n        2.times do\n          checksum = digits.inject(0) { |acc, digit| acc + digit * factors.next } % 11\n          digits << (checksum < 2 ? 0 : 11 - checksum)"
            }
          ]
        },
        {
          "name": "bs",
          "descriptions": [
            {
              "text": "Produces some company BS.\n                            <p>When a straight answer won’t do, BS to the rescue!</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Company.bs #=> \"empower customized functionalities\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "translate('faker.company.bs').collect { |list| sample(list) }.join(' ')"
            }
          ]
        },
        {
          "name": "buzzword",
          "descriptions": [
            {
              "text": "Produces a company buzzword."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Company.buzzword #=> \"flexibility\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "sample(translate('faker.company.buzzwords').flatten)"
            }
          ]
        },
        {
          "name": "calculate_gst_checksum",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(state_code, taxpayer_number, registration_number)\n        gst_base = \"#{state_code}#{taxpayer_number}#{registration_number}\"\n        chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'.chars\n        values = gst_base.upcase.chars\n        sum = values.map.with_index do |char, index|\n          product = chars.index(char) * (index.odd? ? 2 : 1)\n          (product / chars.length).floor + (product % chars.length)\n        end.reduce(:+)\n\n        checksum = (chars.length - (sum % chars.length)) % chars.length\n        chars[checksum]"
            }
          ]
        },
        {
          "name": "catch_phrase",
          "descriptions": [
            {
              "text": "Produces a company catch phrase."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Company.catch_phrase #=> \"Grass-roots grid-enabled portal\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "translate('faker.company.buzzwords').collect { |list| sample(list) }.join(' ')"
            }
          ]
        },
        {
          "name": "collect_regon_sum",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(array)\n        weights = if array.size == 9\n                    [8, 9, 2, 3, 4, 5, 6, 7]\n                  else\n                    [2, 4, 8, 5, 0, 9, 7, 3, 6, 1, 2, 4, 8]"
            }
          ]
        },
        {
          "name": "czech_organisation_number",
          "descriptions": [
            {
              "text": "Produces a company czech organisation number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Company.czech_organisation_number #=> \"90642741\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "sum = 0\n        base = []\n        [8, 7, 6, 5, 4, 3, 2].each do |weight|\n          base << sample((0..9).to_a)\n          sum += (weight * base.last)"
            }
          ]
        },
        {
          "name": "department",
          "descriptions": [
            {
              "text": "Produces a company department."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Company.department #=> \"Information Technology\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "company.department"
            }
          ]
        },
        {
          "name": "duns_number",
          "descriptions": [
            {
              "text": "Produces a company duns number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Company.duns_number #=> \"70-655-5105\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "format('%09d', rand(10**9)).gsub(/(\\d{2})(\\d{3})(\\d{4})/, '\\\\1-\\\\2-\\\\3')"
            }
          ]
        },
        {
          "name": "ein",
          "descriptions": [
            {
              "text": "Produces a company EIN (Employer Identification Number)."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Company.ein #=> \"07-4009024\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "format('%09d', rand(10**9)).gsub(/(\\d{2})(\\d{7})/, '\\\\1-\\\\2')"
            }
          ]
        },
        {
          "name": "french_siren_number",
          "descriptions": [
            {
              "text": "Produces a company french siren number.\n                            <p>Get a random French SIREN number. See more here <a href=\"https://fr.wikipedia.org/wiki/Syst%C3%A8me_d%27identification_du_r%C3%A9pertoire_des_entreprises\">fr.wikipedia.org/wiki/Syst%C3%A8me_d%27identification_du_r%C3%A9pertoire_des_entreprises</a></p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Company.french_siren_number #=> \"163417827\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "base = (1..8).map { rand(10) }.join\n        base + luhn_algorithm(base).to_s"
            }
          ]
        },
        {
          "name": "french_siret_number",
          "descriptions": [
            {
              "text": "Produces a company french siret number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Company.french_siret_number #=> \"76430067900496\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "location = rand(100).to_s.rjust(4, '0')\n        org_no = french_siren_number + location\n        org_no + luhn_algorithm(org_no).to_s"
            }
          ]
        },
        {
          "name": "indian_gst_number",
          "descriptions": [
            {
              "text": "Get a random Indian Goods and Services Tax (GST) number.\n                            <p>For more on Indian tax number here: <a href=\"https://simple.wikipedia.org/wiki/GSTIN\">simple.wikipedia.org/wiki/GSTIN</a></p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Company.indian_gst_number #=> \"15VQPNZ2126J2ZU\"\nFaker::Company.indian_gst_number(state_code: \"22\") #=> \"22ZVWEY6632K0ZN\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(state_code: nil)\n        # Check if state code is valid\n        state_code_ranges = [('02'..'38'), ['98']]\n        if state_code && !(state_code_ranges[0].include?(state_code) || state_code == '98')\n          raise ArgumentError, 'state code must be in a range of 02 to 38 or 98'"
            }
          ]
        },
        {
          "name": "industry",
          "descriptions": [
            {
              "text": "Produces a company industry."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Company.industry #=> \"Food & Beverages\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "company.industry"
            }
          ]
        },
        {
          "name": "inn_checksum",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(factor, number)\n        (\n          factor.map.with_index.reduce(0) do |v, i|\n            v + i[0] * number[i[1]].to_i\n          end % 11 % 10\n        ).to_s"
            }
          ]
        },
        {
          "name": "inn_number",
          "descriptions": [
            {
              "text": "For more on Russian tax number algorithm here: https://ru.wikipedia.org/wiki/Идентификационный_номер_налогоплательщика#Вычисление_контрольных_цифр.\n                            <p>For more on Russian tax number algorithm here: <a href=\"https://ru.wikipedia.org/wiki\">ru.wikipedia.org/wiki</a>/Идентификационный_номер_налогоплательщика#Вычисление_контрольных_цифр</p>\n\n                            <p>Range of regions: <a href=\"https://ru.wikipedia.org/wiki\">ru.wikipedia.org/wiki</a>/Коды_субъектов_Российской_Федерации region [String] Any region string</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "type",
              "type": "Symbol",
              "default": "",
              "descriptions": [
                {
                  "text": "\n<p>Legeal or not, defaults to :legal</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Comnpany.russian_tax_number\nFaker::Comnpany.russian_tax_number(region: 'AZ')\nFaker::Comnpany.russian_tax_number(region: 'AZ', type: false)"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(region, type)\n        n10 = [2, 4, 10, 3, 5, 9, 4, 6, 8]\n        n11 = [7, 2, 4, 10, 3, 5, 9, 4, 6, 8]\n        n12 = [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8]\n\n        region = format('%.2d', rand(0o1..92)) if region.nil?\n        checksum = if type == :legal\n                     number = region.to_s + rand(1_000_000..9_999_999).to_s\n                     inn_checksum(n10, number)\n                   else\n                     number = region.to_s + rand(10_000_000..99_999_999).to_s\n                     inn_checksum(n11, number) + inn_checksum(n12, number + inn_checksum(n11, number))"
            }
          ]
        },
        {
          "name": "logo",
          "descriptions": [
            {
              "text": "Produces a company logo.\n                            <p>Get a random company logo url in PNG format.</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Company.logo #=> \"https://pigment.github.io/fake-logos/logos/medium/color/12.png\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "rand_num = rand(1..13)\n        \"https://pigment.github.io/fake-logos/logos/medium/color/#{rand_num}.png\""
            }
          ]
        },
        {
          "name": "luhn_algorithm",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(number)\n        multiplications = []\n\n        number.to_s.reverse.chars.each_with_index do |digit, i|\n          multiplications << if i.even?\n                               digit.to_i * 2\n                             else\n                               digit.to_i"
            }
          ]
        },
        {
          "name": "mod11",
          "descriptions": [
            {
              "text": "Mod11 functionality from https://github.com/badmanski/mod11/blob/master/lib/mod11.rb.\n                            <p>Mod11 functionality from <a href=\"https://github.com/badmanski/mod11/blob/master/lib/mod11.rb\">github.com/badmanski/mod11/blob/master/lib/mod11.rb</a></p>\n                        "
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(number)\n        weight = [2, 3, 4, 5, 6, 7,\n                  2, 3, 4, 5, 6, 7,\n                  2, 3, 4, 5, 6, 7]\n\n        sum = 0\n\n        number.to_s.reverse.chars.each_with_index do |char, i|\n          sum += char.to_i * weight[i]"
            }
          ]
        },
        {
          "name": "name",
          "descriptions": [
            {
              "text": "Produces a company name."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Company.name #=> \"Roberts Inc\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "company.name"
            }
          ]
        },
        {
          "name": "norwegian_organisation_number",
          "descriptions": [
            {
              "text": "Produces a company norwegian organisation number.\n                            <p>Get a random Norwegian organization number. Info: <a href=\"https://www.brreg.no/om-oss/samfunnsoppdraget-vart/registera-vare/einingsregisteret/organisasjonsnummeret\">www.brreg.no/om-oss/samfunnsoppdraget-vart/registera-vare/einingsregisteret/organisasjonsnummeret</a>/</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Company.norwegian_organisation_number #=> \"842457173\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "# Valid leading digit: 8, 9\n        mod11_check = nil\n        while mod11_check.nil?\n          base = [sample([8, 9]), format('%07d', rand(10**7))].join\n          mod11_check = mod11(base)"
            }
          ]
        },
        {
          "name": "polish_register_of_national_economy",
          "descriptions": [
            {
              "text": "Produces a company polish register of national economy.\n                            <p>Get a random Polish register of national economy number. More info <a href=\"https://pl.wikipedia.org/wiki/REGON\">pl.wikipedia.org/wiki/REGON</a></p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Company.polish_register_of_national_economy #=> \"788435970\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(length: 9)\n        raise ArgumentError, 'Length should be 9 or 14' unless [9, 14].include? length\n\n        random_digits = []\n        loop do\n          random_digits = Array.new(length) { rand(10) }\n          break if collect_regon_sum(random_digits) == random_digits.last"
            }
          ]
        },
        {
          "name": "polish_taxpayer_identification_number",
          "descriptions": [
            {
              "text": "Produces a company polish taxpayer identification_number.\n                            <p>Get a random Polish taxpayer identification number More info <a href=\"https://pl.wikipedia.org/wiki/NIP\">pl.wikipedia.org/wiki/NIP</a></p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Company.polish_taxpayer_identification_number #=> \"2767549463\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "result = []\n        weights = [6, 5, 7, 2, 3, 4, 5, 6, 7]\n        loop do\n          result = Array.new(3) { rand(1..9) } + Array.new(7) { rand(10) }\n          break if (weight_sum(result, weights) % 11) == result[9]"
            }
          ]
        },
        {
          "name": "profession",
          "descriptions": [
            {
              "text": "Produces a company profession."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Company.profession #=> \"factory worker\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "company.profession"
            }
          ]
        },
        {
          "name": "russian_tax_number",
          "descriptions": [
            {
              "text": "Get a random Russian tax number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "region",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>Any region string</p>\n"
                }
              ]
            },
            {
              "name": "type",
              "type": "Symbol",
              "default": ":legal",
              "descriptions": [
                {
                  "text": "\n<p>Legeal or not, defaults to :legal</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Company.russian_tax_number                             #=> \"0415584064\"\nFaker::Company.russian_tax_number(region: 'AZ')               #=> \"AZ50124562\"\nFaker::Company.russian_tax_number(region: 'AZ', type: false)  #=> \"AZ8802315465\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(region: nil, type: :legal)\n        inn_number(region, type)"
            }
          ]
        },
        {
          "name": "sic_code",
          "descriptions": [
            {
              "text": "Produces a company sic code."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Company.sic_code #=> \"7383\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "company.sic_code"
            }
          ]
        },
        {
          "name": "south_african_close_corporation_registration_number",
          "descriptions": [
            {
              "text": "Produces a company south african close corporation registration number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Company.south_african_close_corporation_registration_number #=> \"CK38/5739937418/23\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "generate(:string) do |g|\n          g.oneof do |one|\n            one.group do |g_|\n              g_.lit('CK')\n              g_.int(length: 2)"
            }
          ]
        },
        {
          "name": "south_african_listed_company_registration_number",
          "descriptions": [
            {
              "text": "Produces a company south african listed company registration number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Company.south_african_listed_company_registration_number #=> \"2512/87676/06\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "generate(:string) do |g|\n          g.int(length: 4)\n          g.lit('/')\n          g.int(ranges: [1000..9_999_999_999])\n          g.lit('/06')"
            }
          ]
        },
        {
          "name": "south_african_pty_ltd_registration_number",
          "descriptions": [
            {
              "text": "Produces a company south african pty ltd registration number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Company.south_african_pty_ltd_registration_number #=> \"7043/2400717902/07\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "generate(:string) do |g|\n          g.int(length: 4)\n          g.lit('/')\n          g.int(ranges: [1000..9_999_999_999])\n          g.lit('/07')"
            }
          ]
        },
        {
          "name": "south_african_trust_registration_number",
          "descriptions": [
            {
              "text": "Produces a company south african trust registration number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Company.south_african_trust_registration_number #=> \"IT5673/937519896\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "generate(:string) do |g|\n          g.lit('IT')\n          g.int(ranges: [10..9999])\n          g.lit('/')\n          g.int(ranges: [10..9_999_999_999])"
            }
          ]
        },
        {
          "name": "spanish_b_algorithm",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(value)\n        result = value.to_i * 2\n\n        return result if result < 10\n\n        result.to_s[0].to_i + result.to_s[1].to_i"
            }
          ]
        },
        {
          "name": "spanish_cif_control_digit",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(organization_type, code)\n        letters = %w[J A B C D E F G H I]\n\n        control = code.chars.each_with_index.inject(0) do |sum, (value, index)|\n          if (index + 1).even?\n            sum + value.to_i\n          else\n            sum + spanish_b_algorithm(value.to_i)"
            }
          ]
        },
        {
          "name": "spanish_organisation_number",
          "descriptions": [
            {
              "text": "Produces a company spanish organisation number.\n                            <p>Get a random Spanish organization number. See more here <a href=\"https://es.wikipedia.org/wiki/N%C3%BAmero_de_identificaci%C3%B3n_fiscal\">es.wikipedia.org/wiki/N%C3%BAmero_de_identificaci%C3%B3n_fiscal</a></p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Company.spanish_organisation_number #=> \"D6819358\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(organization_type: nil)\n        # Valid leading character: A, B, C, D, E, F, G, H, J, N, P, Q, R, S, U, V, W\n        # format: 1 digit letter (organization type) + 7 digit numbers + 1 digit control (letter or number based on\n        # organization type)\n        letters = %w[A B C D E F G H J N P Q R S U V W]\n\n        organization_type = sample(letters) unless letters.include?(organization_type)\n        code = format('%07d', rand(10**7))\n        control = spanish_cif_control_digit(organization_type, code)\n\n        [organization_type, code, control].join"
            }
          ]
        },
        {
          "name": "suffix",
          "descriptions": [
            {
              "text": "Produces a company suffix."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Company.suffix #=> \"LLC\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "company.suffix"
            }
          ]
        },
        {
          "name": "swedish_organisation_number",
          "descriptions": [
            {
              "text": "Produces a company swedish organisation number.\n                            <p>Get a random Swedish organization number. See more here <a href=\"https://sv.wikipedia.org/wiki/Organisationsnummer\">sv.wikipedia.org/wiki/Organisationsnummer</a></p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Company.swedish_organisation_number #=> \"3866029808\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "# Valid leading digit: 1, 2, 3, 5, 6, 7, 8, 9\n        # Valid third digit: >= 2\n        # Last digit is a control digit\n        base = [sample([1, 2, 3, 5, 6, 7, 8, 9]), sample((0..9).to_a), sample((2..9).to_a), format('%06d', rand(10**6))].join\n        base + luhn_algorithm(base).to_s"
            }
          ]
        },
        {
          "name": "type",
          "descriptions": [
            {
              "text": "Produces a company type."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Company.type #=> \"Partnership\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "company.type"
            }
          ]
        },
        {
          "name": "weight_sum",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(array, weights)\n        sum = 0\n        (0..weights.size - 1).each do |index|\n          sum += (array[index] * weights[index])"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Compass",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "abbreviation",
          "descriptions": [
            {
              "text": "Produces a random abbreviation."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Compass.abbreviation #=> \"NEbN\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "compass.abbreviation"
            }
          ]
        },
        {
          "name": "azimuth",
          "descriptions": [
            {
              "text": "Produces a random azimuth."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Compass.azimuth #=> \"168.75\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "compass.azimuth"
            }
          ]
        },
        {
          "name": "cardinal",
          "descriptions": [
            {
              "text": "Produces a random cardinal."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Compass.cardinal #=> \"north\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "compass.cardinal.word"
            }
          ]
        },
        {
          "name": "cardinal_abbreviation",
          "descriptions": [
            {
              "text": "Produces a random cardinal abbreviation."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Compass.cardinal_abbreviation #=> \"N\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "compass.cardinal.abbreviation"
            }
          ]
        },
        {
          "name": "cardinal_azimuth",
          "descriptions": [
            {
              "text": "Produces a random cardinal azimuth."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Compass.cardinal_azimuth #=> \"90\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "compass.cardinal.azimuth"
            }
          ]
        },
        {
          "name": "direction",
          "descriptions": [
            {
              "text": "Produces a random direction."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Compass.direction #=> \"southeast\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "compass.direction"
            }
          ]
        },
        {
          "name": "half_wind",
          "descriptions": [
            {
              "text": "Produces a random half wind."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Compass.half_wind #=> \"north-northwest\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "compass.half-wind.word"
            }
          ]
        },
        {
          "name": "half_wind_abbreviation",
          "descriptions": [
            {
              "text": "Produces a random half wind abbreviation."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Compass.half_wind_abbreviation #=> \"NNE\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "compass.half-wind.abbreviation"
            }
          ]
        },
        {
          "name": "half_wind_azimuth",
          "descriptions": [
            {
              "text": "Produces a random half wind azimuth."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Compass.half_wind_azimuth #=> \"292.5\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "compass.half-wind.azimuth"
            }
          ]
        },
        {
          "name": "ordinal",
          "descriptions": [
            {
              "text": "Produces a random ordinal."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Compass.ordinal #=> \"northwest\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "compass.ordinal.word"
            }
          ]
        },
        {
          "name": "ordinal_abbreviation",
          "descriptions": [
            {
              "text": "Produces a random ordinal abbreviation."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Compass.ordinal_abbreviation #=> \"SW\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "compass.ordinal.abbreviation"
            }
          ]
        },
        {
          "name": "ordinal_azimuth",
          "descriptions": [
            {
              "text": "Produces a random ordinal azimuth."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Compass.ordinal_azimuth #=> \"135\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "compass.ordinal.azimuth"
            }
          ]
        },
        {
          "name": "quarter_wind",
          "descriptions": [
            {
              "text": "Produces a random quarter wind."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Compass.quarter_wind #=> \"north by west\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "compass.quarter-wind.word"
            }
          ]
        },
        {
          "name": "quarter_wind_abbreviation",
          "descriptions": [
            {
              "text": "Produces a random quarter wind abbreviation."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Compass.quarter_wind_abbreviation #=> \"SWbS\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "compass.quarter-wind.abbreviation"
            }
          ]
        },
        {
          "name": "quarter_wind_azimuth",
          "descriptions": [
            {
              "text": "Produces a random quarter wind azimuth.\n                            <p>Produces a random quarter wind azimuth</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Compass.quarter_wind_azimuth #=> \"56.25\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "compass.quarter-wind.azimuth"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Computer",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "os",
          "descriptions": [
            {
              "text": "Produces the name of a computer os."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "platform",
              "type": "String",
              "default": "'linux'",
              "descriptions": [
                {
                  "text": "<p>optionally specify the platform ‘linux`, `macos`, or `windows`.</p>"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Computer.os #=> \"RHEL 6.10\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "computer.os.#{String.lower '#{platform}'}"
            }
          ]
        },
        {
          "name": "platform",
          "descriptions": [
            {
              "text": "Produces the name of a computer platform."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Computer.platform #=> \"Linux\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "computer.platform"
            }
          ]
        },
        {
          "name": "stack",
          "descriptions": [
            {
              "text": "Produces a string with computer platform and os.                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Computer.stack #=> \"Linux, RHEL 6.10\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "computer.os.#{String.lower '#{platform}'}"
            }
          ]
        },
        {
          "name": "type",
          "descriptions": [
            {
              "text": "Produces the name of a computer type."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Computer.type #=> \"server\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "computer.type"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Construction",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "heavy_equipment",
          "descriptions": [
            {
              "text": "Produces a random heavy equipment."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Construction.heavy_equipment #=> \"Excavator\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "construction.heavy_equipment"
            }
          ]
        },
        {
          "name": "material",
          "descriptions": [
            {
              "text": "Produces a random material."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Construction.material #=> \"Wood\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "construction.materials"
            }
          ]
        },
        {
          "name": "role",
          "descriptions": [
            {
              "text": "Produces a random role."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Construction.role #=> \"Engineer\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "construction.roles"
            }
          ]
        },
        {
          "name": "standard_cost_code",
          "descriptions": [
            {
              "text": "Produces a random standard cost code."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Construction.standard_cost_code #=> \"1-000 - Purpose\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "construction.standard_cost_codes"
            }
          ]
        },
        {
          "name": "subcontract_category",
          "descriptions": [
            {
              "text": "Produces a random subcontract category."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Construction.subcontract_category #=> \"Curb & Gutter\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "construction.subcontract_categories"
            }
          ]
        },
        {
          "name": "trade",
          "descriptions": [
            {
              "text": "Produces a random trade."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Construction.trade #=> \"Carpenter\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "construction.trades"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Cosmere",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "allomancer",
          "descriptions": [
            {
              "text": "Produces a random allomancer."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Cosmere.allomancer #=> \"Coinshot\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "sample(allomancers)"
            }
          ]
        },
        {
          "name": "aon",
          "descriptions": [
            {
              "text": "Produces a random aon."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Cosmere.aon #=> \"Rao\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "sample(aons)"
            }
          ]
        },
        {
          "name": "feruchemist",
          "descriptions": [
            {
              "text": "Produces a random feruchemist."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Cosmere.feruchemist #=> \"Archivist\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "sample(feruchemists)"
            }
          ]
        },
        {
          "name": "herald",
          "descriptions": [
            {
              "text": "Produces a random herald."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Cosmere.herald #=> \"Ishar\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "sample(heralds)"
            }
          ]
        },
        {
          "name": "knight_radiant",
          "descriptions": [
            {
              "text": "Produces a random knight radiant."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Cosmere.knight_radiant #=> \"Truthwatcher\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "sample(knights_radiant)"
            }
          ]
        },
        {
          "name": "metal",
          "descriptions": [
            {
              "text": "Produces a random metal."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Cosmere.metal #=> \"Brass\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "sample(metals)"
            }
          ]
        },
        {
          "name": "shard",
          "descriptions": [
            {
              "text": "Produces a random shard."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Cosmere.shard #=> \"Ambition\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "sample(shards)"
            }
          ]
        },
        {
          "name": "shard_world",
          "descriptions": [
            {
              "text": "Produces a random shard world."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Cosmere.shard_world #=> \"Yolen\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "sample(shard_worlds)"
            }
          ]
        },
        {
          "name": "spren",
          "descriptions": [
            {
              "text": "Produces a random spren."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Cosmere.spren #=> \"Flamespren\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "sample(sprens)"
            }
          ]
        },
        {
          "name": "surge",
          "descriptions": [
            {
              "text": "Produces a random surge."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Cosmere.surge #=> \"Progression\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "sample(surges)"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Creature",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [],
      "classes": [
        {
          "name": "Animal",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "name",
              "descriptions": [
                {
                  "text": "Produces a random animal name.\n                                <p>Produces a random animal name</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Creature::Animal.name #=> \"fly\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "creature.animal.name"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Bird",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "adjective",
              "descriptions": [
                {
                  "text": "Produces a random adjective used to described birds.\n                                <p>Produces a random adjective used to described birds</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Creature::Bird.adjective #=> 'common'"
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "creature.bird.adjectives"
                }
              ]
            },
            {
              "name": "anatomy",
              "descriptions": [
                {
                  "text": "Produces a random bird anatomy word.\n                                <p>Produces a random bird anatomy word</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Creature::Bird.anatomy #=> \"rump\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "creature.bird.anatomy"
                }
              ]
            },
            {
              "name": "anatomy_past_tense",
              "descriptions": [
                {
                  "text": "Produces a random, past tensed bird anatomy word.\n                                <p>Produces a random, past tensed bird anatomy word</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Creature::Bird.anatomy #=> \"breasted\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "creature.bird.anatomy_past_tense"
                }
              ]
            },
            {
              "name": "color",
              "descriptions": [
                {
                  "text": "Produces a random color word used in describing birds.\n                                <p>Produces a random color word used in describing birds</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Creature::Bird.color #=> \"ferruginous\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "creature.bird.colors"
                }
              ]
            },
            {
              "name": "common_family_name",
              "descriptions": [
                {
                  "text": "Produces a random common family name of a bird."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Creature::Bird.common_family_name #=> \"Owls\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "creature.bird.common_family_name"
                }
              ]
            },
            {
              "name": "common_name",
              "descriptions": [
                {
                  "text": "Produces a random common name for a bird.\n                                <p>Produces a random common name for a bird</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [
                {
                  "name": "tax_order",
                  "type": "String | Symbol | nil",
                  "default": "nil",
                  "descriptions": [
                    {
                      "text": "\n<p>Tax</p>\n"
                    }
                  ]
                }
              ],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Creature::Bird.common_name #=> 'wren'"
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "(tax_order = nil)\n          map = translate('faker.creature.bird.order_common_map')\n          if tax_order.nil?\n            sample(map.values.flatten).downcase\n          else\n            raise TypeError, 'tax_order parameter must be symbolizable' \\\n              unless tax_order.respond_to?(:to_sym)\n            raise ArgumentError, \"#{tax_order} is not a valid taxonomic order\" \\\n                                 unless map.keys.include?(tax_order.to_sym)\n\n            the_order = translate('faker.creature.bird.order_common_map')[tax_order.to_sym]\n            sample(the_order).downcase"
                }
              ]
            },
            {
              "name": "emotional_adjective",
              "descriptions": [
                {
                  "text": "Produces a random emotional adjective NOT used to described birds ...but could be.\n                                <p>Produces a random emotional adjective NOT used to described birds …but could be</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Creature::Bird.emotional_adjective #=> 'cantankerous'"
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "creature.bird.emotional_adjectives"
                }
              ]
            },
            {
              "name": "geo",
              "descriptions": [
                {
                  "text": "Produces a random geographical word used in describing birds.\n                                <p>Produces a random geographical word used in describing birds</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Creature::Bird.geo #=> \"Eurasian\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "creature.bird.geo"
                }
              ]
            },
            {
              "name": "implausible_common_name",
              "descriptions": [
                {
                  "text": "Produces a random and IMplausible common name for a bird.\n                                <p>Produces a random and IMplausible common name for a bird</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Creature::Bird.implausible_common_name #=> 'Hellinger's Cantankerous Chickadee'"
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "creature.bird.implausible_common_names"
                }
              ]
            },
            {
              "name": "order",
              "descriptions": [
                {
                  "text": "Produces a random common taxonomic order from the class Aves.\n                                <p>Produces a random common taxonomic order from the class Aves</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Creature::Bird.order #=> \"Passeriformes\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "orders = I18n.translate('faker.creature.bird.order_common_map').keys\n          sample(orders).to_s"
                }
              ]
            },
            {
              "name": "order_with_common_name",
              "descriptions": [
                {
                  "text": "Produces a hash entry with a random order and a random common name that is of that order.\n                                <p>Produces a hash entry with a random order and a random common name that is of that order</p>\n\n                                <p>}</p>\n                            "
                }
              ],
              "return_type": "Hash<order,common_name>",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Creature::Bird.order_with_common_name #=> {\norder: ''Accipitriformes',\ncommon_name: 'Osprey'"
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "(tax_order = nil)\n          map = I18n.translate('faker.creature.bird.order_common_map')\n          o = tax_order.nil? ? order : tax_order\n          { order: o, common_name: sample(map[o.to_sym]) }"
                }
              ]
            },
            {
              "name": "plausible_common_name",
              "descriptions": [
                {
                  "text": "Produces a random and plausible common name for a bird.\n                                <p>Produces a random and plausible common name for a bird</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Creature::Bird.plausible_common_name #=> 'Hellinger's Wren'"
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "creature.bird.plausible_common_names"
                }
              ]
            },
            {
              "name": "silly_adjective",
              "descriptions": [
                {
                  "text": "Produces a random adjective NOT used to described birds ...but probably shouldn't.\n                                <p>Produces a random adjective NOT used to described birds …but probably shouldn’t</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Creature::Bird.silly_adjective #=> 'drunk'"
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "creature.bird.silly_adjectives"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Cat",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "breed",
              "descriptions": [
                {
                  "text": "Produces a random cat breed.\n                                <p>Produces a random cat breed</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Creature::Cat.breed #=> \"Scottish Fold\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "creature.cat.breed"
                }
              ]
            },
            {
              "name": "name",
              "descriptions": [
                {
                  "text": "Produces a random name for a cat.\n                                <p>Produces a random name for a cat</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Creature::Cat.name #=> \"Felix\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "creature.cat.name"
                }
              ]
            },
            {
              "name": "registry",
              "descriptions": [
                {
                  "text": "Produces a random cat breed registry.\n                                <p>Produces a random cat breed registry</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Creature::Cat.registry #=> \"Fancy Southern Africa Cat Council\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "creature.cat.registry"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Dog",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "age",
              "descriptions": [
                {
                  "text": "Produces a random dog age.\n                                <p>Produces a random dog age</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Creature::Dog.age #=> \"puppy\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "creature.dog.age"
                }
              ]
            },
            {
              "name": "breed",
              "descriptions": [
                {
                  "text": "Produces a random dog breed.\n                                <p>Produces a random dog breed</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Creature::Dog.breed #=> \"Yorkshire Terrier\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "creature.dog.breed"
                }
              ]
            },
            {
              "name": "coat_length",
              "descriptions": [
                {
                  "text": "Produces a random coat length.\n                                <p>Produces a random coat length</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Creature::Dog.coat_length #=> \"short\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "creature.dog.coat_length"
                }
              ]
            },
            {
              "name": "gender",
              "descriptions": [
                {
                  "text": "Produces a random gender.\n                                <p>Produces a random gender</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Creature::Dog.gender #=> \"Female\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "Faker::Gender.binary_type"
                }
              ]
            },
            {
              "name": "meme_phrase",
              "descriptions": [
                {
                  "text": "Produces a random dog meme phrase.\n                                <p>Produces a random dog meme phrase</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Creature::Dog.meme_phrase #=> \"smol pupperino\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "creature.dog.meme_phrase"
                }
              ]
            },
            {
              "name": "name",
              "descriptions": [
                {
                  "text": "Produces a random name for a dog.\n                                <p>Produces a random name for a dog</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Creature::Dog.name #=> \"Spike\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "creature.dog.name"
                }
              ]
            },
            {
              "name": "size",
              "descriptions": [
                {
                  "text": "Produces a random size of a dog.\n                                <p>Produces a random size of a dog</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Creature::Dog.size #=> \"small\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "creature.dog.size"
                }
              ]
            },
            {
              "name": "sound",
              "descriptions": [
                {
                  "text": "Produces a random sound made by a dog.\n                                <p>Produces a random sound made by a dog</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Creature::Dog.sound #=> \"woof woof\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "creature.dog.sound"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Horse",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "breed",
              "descriptions": [
                {
                  "text": "Produces a random horse breed.\n                                <p>Produces a random horse breed</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Creature::Horse.breed #=> \"Spanish Barb see Barb Horse\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "creature.horse.breed"
                }
              ]
            },
            {
              "name": "name",
              "descriptions": [
                {
                  "text": "Produces a random name for a horse.\n                                <p>Produces a random name for a horse</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Creature::Horse.name #=> \"Noir\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "creature.horse.name"
                }
              ]
            }
          ],
          "classes": []
        }
      ]
    },
    {
      "name": "Crypto",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "md5",
          "descriptions": [
            {
              "text": "Produces an MD5 hash."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Crypto.md5 #=> \"6b5ed240042e8a65c55ddb826c3408e6\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "OpenSSL::Digest::MD5.hexdigest(Lorem.characters)"
            }
          ]
        },
        {
          "name": "sha1",
          "descriptions": [
            {
              "text": "Produces a SHA1 hash."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Crypto.sha1 #=> \"4e99e31c51eef8b2d290e709f757f92e558a503f\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "OpenSSL::Digest::SHA1.hexdigest(Lorem.characters)"
            }
          ]
        },
        {
          "name": "sha256",
          "descriptions": [
            {
              "text": "Produces a SHA256 hash."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Crypto.sha256 #=> \"51e4dbb424cd9db1ec5fb989514f2a35652ececef33f21c8dd1fd61bb8e3929d\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "OpenSSL::Digest::SHA256.hexdigest(Lorem.characters)"
            }
          ]
        },
        {
          "name": "sha512",
          "descriptions": [
            {
              "text": "Produces a SHA512 hash."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Crypto.sha512 #=> \"7b9fc82a6642874833d01b74a7b4fae3d15373193b55cfba47327f8f0afdc8d0ea155b58639a03a887009ef997dab8dd8d36767620d430f6e787e5996e26da80\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "OpenSSL::Digest::SHA512.hexdigest(Lorem.characters)"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "CryptoCoin",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "acronym",
          "descriptions": [
            {
              "text": "Produces a random crypto coin acronym."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::CryptoCoin.acronym #=> \"BTC\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(coin: coin_array)\n        coin[ACRONYM]"
            }
          ]
        },
        {
          "name": "coin_array",
          "descriptions": [
            {
              "text": "Produces a random crypto coin's name, acronym and logo in an array."
            }
          ],
          "return_type": "Array<String>",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::CryptoCoin.coin_array #=> [\"Dash\", \"DASH\", \"https://i.imgur.com/2uX91cb.png\"]"
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "crypto_coin.coin"
            }
          ]
        },
        {
          "name": "coin_hash",
          "descriptions": [
            {
              "text": "Produces a random crypto coin's name, acronym and logo in a hash."
            }
          ],
          "return_type": "Hash",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::CryptoCoin.coin_hash {:name=>\"Ethereum\", :acronym=>\"ETH\", :url_logo=>\"https://i.imgur.com/uOPFCXj.png\"}"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "coin = coin_array\n\n        {\n          name: coin_name(coin: coin),\n          acronym: acronym(coin: coin),\n          url_logo: url_logo(coin: coin)\n        }"
            }
          ]
        },
        {
          "name": "coin_name",
          "descriptions": [
            {
              "text": "Produces a random crypto coin name."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::CryptoCoin.coin_name #=> \"Bitcoin\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(coin: coin_array)\n        coin[COIN_NAME]"
            }
          ]
        },
        {
          "name": "url_logo",
          "descriptions": [
            {
              "text": "Produces a random crypto coin logo url."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::CryptoCoin.url_logo #=> \"https://i.imgur.com/EFz61Ei.png\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(coin: coin_array)\n        coin[URL_LOGO]"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Currency",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "code",
          "descriptions": [
            {
              "text": "Produces a currency code."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Currency.code #=> \"USD\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "currency.code"
            }
          ]
        },
        {
          "name": "name",
          "descriptions": [
            {
              "text": "Produces the name of a currency."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Currency.name #=> \"Swedish Krona\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "currency.name"
            }
          ]
        },
        {
          "name": "symbol",
          "descriptions": [
            {
              "text": "Produces a currency symbol."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Currency.symbol #=> \"$\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "currency.symbol"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Date",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "backward",
          "descriptions": [
            {
              "text": "Produce a random date in the past (up to N days)."
            }
          ],
          "return_type": "Date",
          "return_desc": "",
          "arguments": [
            {
              "name": "days",
              "type": "Integer",
              "default": "365",
              "descriptions": [
                {
                  "text": "\n<p>The maximum number of days to go into the past.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Date.backward(days: 14) #=> #<Date: 2019-09-12>"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(days: 365)\n        from = ::Date.today - days\n        to   = ::Date.today - 1\n\n        between(from: from, to: to).to_date"
            }
          ]
        },
        {
          "name": "between",
          "descriptions": [
            {
              "text": "Produce a random date between two dates."
            }
          ],
          "return_type": "Date",
          "return_desc": "",
          "arguments": [
            {
              "name": "from",
              "type": "Date",
              "descriptions": [
                {
                  "text": "\n<p>The start of the usable date range.</p>\n"
                }
              ]
            },
            {
              "name": "to",
              "type": "Date",
              "descriptions": [
                {
                  "text": "\n<p>The end of the usable date range.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "\n<p>if used with or without Rails (Active Support)</p>\n",
              "code": "Faker::Date.between(from: '2014-09-23', to: '2014-09-25') #=> #<Date: 2014-09-24>"
            },
            {
              "description": "\n<p>if used with Rails (Active Support)</p>\n",
              "code": "Faker::Date.between(from: 2.days.ago, to: Date.today) #=> #<Date: 2014-09-24>"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(from:, to:)\n        from = get_date_object(from)\n        to   = get_date_object(to)\n\n        Faker::Base.rand_in_range(from, to)"
            }
          ]
        },
        {
          "name": "between_except",
          "descriptions": [
            {
              "text": "Produce a random date between two dates."
            }
          ],
          "return_type": "Date",
          "return_desc": "",
          "arguments": [
            {
              "name": "from",
              "type": "Date",
              "descriptions": [
                {
                  "text": "\n<p>The start of the usable date range.</p>\n"
                }
              ]
            },
            {
              "name": "to",
              "type": "Date",
              "descriptions": [
                {
                  "text": "\n<p>The end of the usable date range.</p>\n"
                }
              ]
            },
            {
              "name": "excepted",
              "type": "Date",
              "descriptions": [
                {
                  "text": "\n<p>A date to exclude.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "\n<p>if used with or without Rails (Active Support)</p>\n",
              "code": "Faker::Date.between_except(from: '2014-09-23', to: '2015-09-25', excepted: '2015-01-24') #=> #<Date: 2014-10-03>"
            },
            {
              "description": "\n<p>if used with Rails (Active Support)</p>\n",
              "code": "Faker::Date.between_except(from: 1.year.ago, to: 1.year.from_now, excepted: Date.today) #=> #<Date: 2014-10-03>"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(from:, to:, excepted:)\n        raise ArgumentError, 'From date, to date and excepted date must not be the same' if from == to && to == excepted\n\n        excepted = get_date_object(excepted)\n\n        loop do\n          date = between(from: from, to: to)\n          break date.to_date if date != excepted"
            }
          ]
        },
        {
          "name": "birthday",
          "descriptions": [
            {
              "text": "Produce a random date in the past (up to N days)."
            }
          ],
          "return_type": "Date",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "min_age",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>The minimum age that the birthday would imply.</p>\n"
                }
              ]
            },
            {
              "name": "max_age",
              "type": "Integer",
              "default": "65",
              "descriptions": [
                {
                  "text": "\n<p>The maximum age that the birthday would imply.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Date.birthday(min_age: 18, max_age: 65) #=> #<Date: 1986-03-28>"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(min_age: 18, max_age: 65)\n        t = ::Date.today\n\n        from = birthday_date(t, max_age)\n        to   = birthday_date(t, min_age)\n\n        between(from: from, to: to).to_date"
            }
          ]
        },
        {
          "name": "birthday_date",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(date, age)\n        year = date.year - age\n\n        day =\n          if date.day == 29 && date.month == 2 && !::Date.leap?(year)\n            28\n          else\n            date.day"
            }
          ]
        },
        {
          "name": "forward",
          "descriptions": [
            {
              "text": "Produce a random date in the future (up to N days)."
            }
          ],
          "return_type": "Date",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "from",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>The start of the usable forward date range.</p>\n"
                }
              ]
            },
            {
              "name": "days",
              "type": "Integer",
              "default": "365",
              "descriptions": [
                {
                  "text": "\n<p>The maximum number of days to go into the future.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "\n<p>if used with or without Rails (Active Support)</p>\n",
              "code": "Faker::Date.forward(days: 23) #=> #<Date: 2014-10-03>"
            },
            {
              "description": "\n<p>if used with Rails (Active Support)</p>\n",
              "code": "Faker::Date.forward(from: Date.current, days: 17) #=> #<Date: 2022-06-22>"
            },
            {
              "description": "\n<p>if used with or without Rails (Active Support)</p>\n",
              "code": "Faker::Date.forward(from: '2022-06-03', days: 10) #=> #<Date: 2022-10-13>"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(from: ::Date.today, days: 365)\n        start_date = get_date_object(from)\n        since = start_date + 1\n        to = start_date + days\n\n        between(from: since, to: to).to_date"
            }
          ]
        },
        {
          "name": "get_date_object",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(date)\n        date = ::Date.parse(date) if date.is_a?(::String)\n        date = date.to_date if date.respond_to?(:to_date)\n        date"
            }
          ]
        },
        {
          "name": "in_date_period",
          "descriptions": [
            {
              "text": "Produces a date in the year and/or month specified."
            }
          ],
          "return_type": "Date",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "month",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>represents the month of the date</p>\n"
                }
              ]
            },
            {
              "name": "year",
              "type": "Integer",
              "default": "::Date.today.year",
              "descriptions": [
                {
                  "text": "\n<p>represents the year of the date</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Date.in_date_period #=> #<Date: 2019-09-01>"
            },
            {
              "description": "",
              "code": "Faker::Date.in_date_period(year: 2018, month: 2) #=> #<Date: 2018-02-26>"
            },
            {
              "description": "",
              "code": "Faker::Date.in_date_period(month: 2) #=> #<Date: 2019-02-26>"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(month: nil, year: ::Date.today.year)\n        from = ::Date.new(year, month || 1, 1)\n        to = ::Date.new(year, month || 12, ::Date.civil(year, month || 12, -1).day)\n\n        between(from: from, to: to).to_date"
            }
          ]
        },
        {
          "name": "on_day_of_week_between",
          "descriptions": [
            {
              "text": "Produce a random date at given day(s) of the week between two dates."
            }
          ],
          "return_type": "Date",
          "return_desc": "",
          "arguments": [
            {
              "name": "day",
              "type": "Symbol",
              "descriptions": [
                {
                  "text": "\n<p># The day(s) of the week. See {DAYS_OF_WEEK}.</p>\n"
                }
              ]
            },
            {
              "name": "from",
              "type": "Date",
              "descriptions": [
                {
                  "text": "\n<p>The start of the usable date range.</p>\n"
                }
              ]
            },
            {
              "name": "to",
              "type": "Date",
              "descriptions": [
                {
                  "text": "\n<p>The end of the usable date range.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "\n<p>if used with or without Rails (Active Support)</p>\n",
              "code": "Faker::Date.on_day_of_week_between(day: :tuesday, from: '2023-01-01', to: '2023-02-01') #=> #<Date: 2032-01-10>"
            },
            {
              "description": "\n<p>if used with Rails (Active Support)</p>\n",
              "code": "Faker::Date.on_day_of_week_between(day: [:saturday, :sunday], from: 1.month.ago, to: Date.today) #=> #<Date: 2014-09-24>"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(day:, from:, to:)\n        days = [day].flatten\n        raise ArgumentError, 'Day of week cannot be empty' if days.empty?\n\n        # Convert given days of the week to numbers used by `Date#wday` method\n        numeric_weekdays = days.map do |d|\n          DAYS_OF_WEEK.index(d.to_sym.downcase) || raise(ArgumentError, \"#{d} is not a valid day of the week\")"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "DcComics",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "hero",
          "descriptions": [
            {
              "text": "Produces a hero name from DC Comics.\n                            <p>Produces a hero name from DC Comics</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::DcComics.hero #=> \"Batman\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "dc_comics.hero"
            }
          ]
        },
        {
          "name": "heroine",
          "descriptions": [
            {
              "text": "Produces a heroine name from DC Comics.\n                            <p>Produces a heroine name from DC Comics</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::DcComics.heroine #=> \"Supergirl\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "dc_comics.heroine"
            }
          ]
        },
        {
          "name": "name",
          "descriptions": [
            {
              "text": "Produces a character name from DC Comics.\n                            <p>Produces a character name from DC Comics</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::DcComics.name #=> \"Clark Kent\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "dc_comics.name"
            }
          ]
        },
        {
          "name": "title",
          "descriptions": [
            {
              "text": "Produces a comic book title from DC Comics.\n                            <p>Produces a comic book title from DC Comics</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::DcComics.title #=> \"Batman: The Long Halloween\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "dc_comics.title"
            }
          ]
        },
        {
          "name": "villain",
          "descriptions": [
            {
              "text": "Produces a villain name from DC Comics.\n                            <p>Produces a villain name from DC Comics</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::DcComics.villain #=> \"The Joker\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "dc_comics.villain"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Demographic",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "demonym",
          "descriptions": [
            {
              "text": "Produces a denonym."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Demographic.denonym #=> \"Panamanian\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "demographic.demonym"
            }
          ]
        },
        {
          "name": "educational_attainment",
          "descriptions": [
            {
              "text": "Produces a level of educational attainment."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Demographic.educational_attainment #=> \"GED or alternative credential\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "demographic.educational_attainment"
            }
          ]
        },
        {
          "name": "height",
          "descriptions": [
            {
              "text": "Produces a height as a string."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "unit",
              "type": "Symbol",
              "default": ":metric",
              "descriptions": [
                {
                  "text": "\n<p>either ‘:metric` or `imperial`.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Demographic.height #=> \"1.61\""
            },
            {
              "description": "",
              "code": "Faker::Demographic.height(unit: :imperial) #=> \"6 ft, 2 in\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(unit: :metric)\n        case unit\n        when :imperial\n          inches = rand_in_range(57, 86)\n          \"#{inches / 12} ft, #{inches % 12} in\"\n        when :metric\n          rand_in_range(1.45, 2.13).round(2).to_s"
            }
          ]
        },
        {
          "name": "marital_status",
          "descriptions": [
            {
              "text": "Produces a marital status."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Demographic.marital_status #=> \"Widowed\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "demographic.marital_status"
            }
          ]
        },
        {
          "name": "race",
          "descriptions": [
            {
              "text": "Produces the name of a race."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Demographic.race #=> \"Native Hawaiian or Other Pacific Islander\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "demographic.race"
            }
          ]
        },
        {
          "name": "sex",
          "descriptions": [
            {
              "text": "Produces a sex for demographic purposes."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Demographic.sex #=> \"Female\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "demographic.sex"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Dessert",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "flavor",
          "descriptions": [
            {
              "text": "Produces the name of a dessert flavor."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Dessert.flavor #=> \"Salted Caramel\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "dessert.flavor"
            }
          ]
        },
        {
          "name": "topping",
          "descriptions": [
            {
              "text": "Produces the name of a dessert topping."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Dessert.topping #=> \"Gummy Bears\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "dessert.topping"
            }
          ]
        },
        {
          "name": "variety",
          "descriptions": [
            {
              "text": "Produces the name of a dessert variety."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Dessert.variety #=> \"Cake\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "dessert.variety"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Device",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "build_number",
          "descriptions": [
            {
              "text": "Produces a build number between 1 and 500."
            }
          ],
          "return_type": "Integer",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Device.build_number #=> 5"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "Faker::Number.between(from: 1, to: 500)"
            }
          ]
        },
        {
          "name": "manufacturer",
          "descriptions": [
            {
              "text": "Produces the name of a manufacturer for a device."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Device.manufacturer #=> \"Apple\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "device.manufacturer"
            }
          ]
        },
        {
          "name": "model_name",
          "descriptions": [
            {
              "text": "Produces a model name for a device."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Device.model_name #=> \"iPhone 4\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "device.model_name"
            }
          ]
        },
        {
          "name": "platform",
          "descriptions": [
            {
              "text": "Produces the name of a platform for a device."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Device.platform #=> \"webOS\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "device.platform"
            }
          ]
        },
        {
          "name": "serial",
          "descriptions": [
            {
              "text": "Produces a serial code for a device."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Device.serial #=> \"ejfjnRNInxh0363JC2WM\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "device.serial"
            }
          ]
        },
        {
          "name": "version",
          "descriptions": [
            {
              "text": "Produces a version number between 1 and 1000."
            }
          ],
          "return_type": "Integer",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Device.version #=> 42"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "Faker::Number.between(from: 1, to: 1000)"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "DrivingLicence",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "british_driving_licence",
          "descriptions": [
            {
              "text": "Produces a random British driving licence number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "last_name",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>The last name of the driving licence’s owner.</p>\n"
                }
              ]
            },
            {
              "name": "initials",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>The initials of the driving licence’s owner.</p>\n"
                }
              ]
            },
            {
              "name": "gender",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>The gender of the driving licence’s owner.</p>\n"
                }
              ]
            },
            {
              "name": "date_of_birth",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>The date of birth of the driving licence’s owner.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::DrivingLicence.british_driving_licence        #=> \"MCDER712081VF7EK\"\nFaker::DrivingLicence.british_driving_licence(last_name: \"O'Carroll\",\ninitials: \"J\",\ngender: :female,\ndate_of_birth: Date.parse(\"1986-10-24\")) #=> \"OCARR815246J91HT\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(last_name: Faker::Name.last_name, initials: Faker::Name.initials, gender: random_gender, date_of_birth: Faker::Date.birthday(min_age: 18, max_age: 65))\n        [\n          gb_licence_padding(last_name, 5),\n          gb_licence_year(date_of_birth, gender),\n          gb_licence_padding(initials, 2),\n          gb_licence_checksum\n        ].join"
            }
          ]
        },
        {
          "name": "gb_licence_checksum",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "generate(:string) do |g|\n          g.int\n          g.letter(ranges: ['A'..'Z'], length: 2)"
            }
          ]
        },
        {
          "name": "gb_licence_padding",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(str, num_chars)\n        prepped = str.upcase.gsub(%r{[^A-Z]}, '') + GB_PADDING\n        prepped[0..(num_chars - 1)]"
            }
          ]
        },
        {
          "name": "gb_licence_year",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(dob, gender)\n        generate(:string) do |g|\n          g.computed do\n            (dob.year / 10) % 10"
            }
          ]
        },
        {
          "name": "northern_irish_driving_licence",
          "descriptions": [
            {
              "text": "Produces a random Northern Irish licence number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::DrivingLicence.northern_irish_driving_licence #=> \"70702548\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "Faker::Number.number(digits: 8).to_s"
            }
          ]
        },
        {
          "name": "random_gender",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "%i[male female].sample(random: Faker::Config.random)"
            }
          ]
        },
        {
          "name": "uk_driving_licence",
          "descriptions": [
            {
              "text": "Produces a random UK driving licence number in either GB or NI format, at a rate consistent with their relative populations.\n                    <p>Produces a random UK driving licence number in either GB or NI format, at a rate consistent with their relative populations</p>\n                "
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [
            {
              "name": "last_name",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>The last name of the driving licence’s owner.</p>\n"
                }
              ]
            },
            {
              "name": "initials",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>The initials of the driving licence’s owner.</p>\n"
                }
              ]
            },
            {
              "name": "gender",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>The gender of the driving licence’s owner.</p>\n"
                }
              ]
            },
            {
              "name": "date_of_birth",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>The date of birth of the driving licence’s owner.</p>\n"
                }
              ]
            }
          ],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(*args)\n        if Faker::Config.random.rand < NI_CHANCE\n          northern_irish_driving_licence\n        else\n          british_driving_licence(*args)"
            }
          ]
        },
        {
          "name": "usa_driving_licence",
          "descriptions": [
            {
              "text": "Produces a random USA driving licence number by state code passed."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::DrivingLicence.usa_driving_licence                 #=> \"V5598249\"\nFaker::DrivingLicence.usa_driving_licence('new mexico')   #=> \"270692028\"\nFaker::DrivingLicence.usa_driving_licence('New Mexico')   #=> \"68178637\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "driving_licence.usa.#{state.to_s.strip.downcase.gsub(' ', '_')}"
            }
          ]
        },
        {
          "name": "initialize",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(msg = 'Invalid state code passed')\n      super"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Drone",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "battery_capacity",
          "descriptions": [
            {
              "text": "Returns the drone battery capacity.\n                            <p>Returns the drone battery capacity</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Drone.battery_capacity #=> \"3500 mAh\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "drone.battery_capacity"
            }
          ]
        },
        {
          "name": "battery_type",
          "descriptions": [
            {
              "text": "Returns the battery type.\n                            <p>Returns the battery type</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Drone.battery_type #=> \"LiPo 4S\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "drone.battery_type"
            }
          ]
        },
        {
          "name": "battery_voltage",
          "descriptions": [
            {
              "text": "Returns battery voltage.\n                            <p>Returns battery voltage</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Drone.battery_voltage #=> \"13.2V\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "drone.battery_voltage"
            }
          ]
        },
        {
          "name": "battery_weight",
          "descriptions": [
            {
              "text": "Returns total battery weight in grams.\n                            <p>Returns total battery weight in grams</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Drone.battery_weight #=> \"198 g\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "drone.battery_weight"
            }
          ]
        },
        {
          "name": "charging_temperature",
          "descriptions": [
            {
              "text": "Returns charging temperature for battery in Fahrenheit.\n                            <p>Returns charging temperature for battery in Fahrenheit</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Drone.charging_temperature #=> \"41-104F\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "drone.charging_temperature"
            }
          ]
        },
        {
          "name": "flight_time",
          "descriptions": [
            {
              "text": "Returns max flight time for drone in optimal conditions.\n                            <p>Returns max flight time for drone in optimal conditions</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Drone.flight_time #=> \"34 min\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "drone.flight_time"
            }
          ]
        },
        {
          "name": "iso",
          "descriptions": [
            {
              "text": "Returns camera ISO range for drone.\n                            <p>Returns camera ISO range for drone</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Drone.iso #=> \"100-3200\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "drone.iso"
            }
          ]
        },
        {
          "name": "max_altitude",
          "descriptions": [
            {
              "text": "Returns max altitude drone can go above sea level in meters.\n                            <p>Returns max altitude drone can go above sea level in meters</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Drone.max_altitude #=> \"5000 m\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "drone.max_altitude"
            }
          ]
        },
        {
          "name": "max_angular_velocity",
          "descriptions": [
            {
              "text": "Returns max angular velocity of drone in degrees/s.\n                            <p>Returns max angular velocity of drone in degrees/s</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Drone.max_angular_velocity #=> \"250 degree/s\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "drone.max_angular_velocity"
            }
          ]
        },
        {
          "name": "max_ascent_speed",
          "descriptions": [
            {
              "text": "Returns maximum ascent speed for drone in m/s.\n                            <p>Returns maximum ascent speed for drone in m/s</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Drone.max_ascent_speed #=> \"4 m/s\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "drone.max_ascent_speed"
            }
          ]
        },
        {
          "name": "max_charging_power",
          "descriptions": [
            {
              "text": "Returns max chargin power required for battery.\n                            <p>Returns max chargin power required for battery</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Drone.max_charging_power #=> \"38W\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "drone.max_charging_power"
            }
          ]
        },
        {
          "name": "max_descent_speed",
          "descriptions": [
            {
              "text": "Returns maximum descent speed for drone in m/s.\n                            <p>Returns maximum descent speed for drone in m/s</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Drone.max_descent_speed #=> \"4 m/s\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "drone.max_descent_speed"
            }
          ]
        },
        {
          "name": "max_flight_distance",
          "descriptions": [
            {
              "text": "Returns how far drone can go in optimal condition when full charged in meters.\n                            <p>Returns how far drone can go in optimal condition when full charged in meters</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Drone.max_flight_distance #=> \"18500 m\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "drone.max_flight_distance"
            }
          ]
        },
        {
          "name": "max_resolution",
          "descriptions": [
            {
              "text": "Returns max camera resolution in MP\".\n                            <p>Returns max camera resolution in MP“</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Drone.max_resolution #=> \"48MP\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "drone.max_resolution"
            }
          ]
        },
        {
          "name": "max_shutter_speed",
          "descriptions": [
            {
              "text": "Returns max shutter speed for camera.\n                            <p>Returns max shutter speed for camera</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Drone.max_shutter_speed #=> \"60s\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "drone.max_shutter_speed"
            }
          ]
        },
        {
          "name": "max_speed",
          "descriptions": [
            {
              "text": "Returns max horizontal speed by drone in m/s.\n                            <p>Returns max horizontal speed by drone in m/s</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Drone.max_speed #=> \"19 m/s\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "drone.max_speed"
            }
          ]
        },
        {
          "name": "max_tilt_angle",
          "descriptions": [
            {
              "text": "Returns max tilt angle drone can go in degrees.\n                            <p>Returns max tilt angle drone can go in degrees</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Drone.max_tilt_angle #=> \"35 degrees\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "drone.max_tilt_angle"
            }
          ]
        },
        {
          "name": "max_wind_resistance",
          "descriptions": [
            {
              "text": "Returns max wind resistance by drone in m/s.\n                            <p>Returns max wind resistance by drone in m/s</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Drone.max_wind_resistance #=> \"10.5 m/s\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "drone.max_wind_resistance"
            }
          ]
        },
        {
          "name": "min_shutter_speed",
          "descriptions": [
            {
              "text": "Returns min shutter speed for camera.\n                            <p>Returns min shutter speed for camera</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Drone.min_shutter_speed #=> \"1/8000s\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "drone.min_shutter_speed"
            }
          ]
        },
        {
          "name": "name",
          "descriptions": [
            {
              "text": "Returns random drone name with company.\n                            <p>Returns random drone name with company</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Drone.name #=> \"DJI Mavic Air 2\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "drone.name"
            }
          ]
        },
        {
          "name": "operating_temperature",
          "descriptions": [
            {
              "text": "Returns operating temperature for drone in Fahrenheit.\n                            <p>Returns operating temperature for drone in Fahrenheit</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Drone.operating_temperature #=> \"14-104F\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "drone.operating_temperature"
            }
          ]
        },
        {
          "name": "photo_format",
          "descriptions": [
            {
              "text": "Returns photo format for drone.\n                            <p>Returns photo format for drone</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Drone.photo_format #=> \"JPEG\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "drone.photo_format"
            }
          ]
        },
        {
          "name": "shutter_speed_range",
          "descriptions": [
            {
              "text": "Returns max and min shutter speed for camera.\n                            <p>Returns max and min shutter speed for camera</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Drone.shutter_speed_range #=> \"8-1/8000s\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "drone.max_shutter_speed"
            }
          ]
        },
        {
          "name": "video_format",
          "descriptions": [
            {
              "text": "Returns video format.\n                            <p>Returns video format</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Drone.video_format #=> \"MP4\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "drone.video_format"
            }
          ]
        },
        {
          "name": "weight",
          "descriptions": [
            {
              "text": "Returns total drone weight in grams.\n                            <p>Returns total drone weight in grams</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Drone.weight #=> \"570 g\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "drone.weight"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Educator",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "campus",
          "descriptions": [
            {
              "text": "Produces a campus name."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Educator.campus #=> \"Vertapple Campus\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "educator.campus"
            }
          ]
        },
        {
          "name": "course_name",
          "descriptions": [
            {
              "text": "Produces a course name."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Educator.course_name #=> \"Criminology 101\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "educator.course_name"
            }
          ]
        },
        {
          "name": "degree",
          "descriptions": [
            {
              "text": "Produces a university degree."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Educator.degree #=> \"Associate Degree in Criminology\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "educator.degree"
            }
          ]
        },
        {
          "name": "primary_school",
          "descriptions": [
            {
              "text": "Produces a primary school."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Educator.primary_school #=> \"Brighthurst Elementary School\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "educator.primary_school"
            }
          ]
        },
        {
          "name": "secondary_school",
          "descriptions": [
            {
              "text": "Produces a secondary school."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Educator.secondary_school #=> \"Iceborough Secondary College\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "educator.secondary_school"
            }
          ]
        },
        {
          "name": "subject",
          "descriptions": [
            {
              "text": "Produces a university subject."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Educator.subject #=> \"Criminology\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "educator.subject"
            }
          ]
        },
        {
          "name": "university",
          "descriptions": [
            {
              "text": "Produces a university name."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Educator.university #=> \"Mallowtown Technical College\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "educator.university"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "ElectricalComponents",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "active",
          "descriptions": [
            {
              "text": "Produces an active electrical component."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::ElectricalComponents.active #=> \"Transistor\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "electrical_components.active"
            }
          ]
        },
        {
          "name": "electromechanical",
          "descriptions": [
            {
              "text": "Produces an electromechanical electrical component."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::ElectricalComponents.electromechanical #=> \"Toggle Switch\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "electrical_components.electromechanical"
            }
          ]
        },
        {
          "name": "passive",
          "descriptions": [
            {
              "text": "Produces a passive electrical component."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::ElectricalComponents.passive #=> \"Resistor\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "electrical_components.passive"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Emotion",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "adjective",
          "descriptions": [
            {
              "text": "Produces an emotion adjective."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Emotion.adjective # => \"nonplussed\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "emotion.adjective"
            }
          ]
        },
        {
          "name": "noun",
          "descriptions": [
            {
              "text": "Produces an emotion noun."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Emotion.noun #=> \"amazement\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "emotion.noun"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Esport",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "event",
          "descriptions": [
            {
              "text": "Produces the name of an eSports event."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Esport.event #=> \"ESL Cologne\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "esport.events"
            }
          ]
        },
        {
          "name": "game",
          "descriptions": [
            {
              "text": "Produces the name of a game played as an eSport."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Esport.game #=> \"Dota 2\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "esport.games"
            }
          ]
        },
        {
          "name": "league",
          "descriptions": [
            {
              "text": "Produces the name of an eSports league."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Esport.league #=> \"IEM\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "esport.leagues"
            }
          ]
        },
        {
          "name": "player",
          "descriptions": [
            {
              "text": "Produces the name of a professional eSports player."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Esport.player #=> \"Crimsix\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "esport.players"
            }
          ]
        },
        {
          "name": "team",
          "descriptions": [
            {
              "text": "Produces the name of an eSports team."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Esport.team #=> \"CLG\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "esport.teams"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Fantasy",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [],
      "classes": [
        {
          "name": "Tolkien",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Tolkien's legendarium.\n                                <p>Produces a character from Tolkien’s legendarium</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Fantasy::Tolkien.character\n#=> \"Goldberry\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "tolkien.characters"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces a location from Tolkien's legendarium.\n                                <p>Produces a location from Tolkien’s legendarium</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Fantasy::Tolkien.location\n#=> \"Helm's Deep\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "tolkien.locations"
                }
              ]
            },
            {
              "name": "poem",
              "descriptions": [
                {
                  "text": "Produces the name of a poem from Tolkien's legendarium.\n                                <p>Produces the name of a poem from Tolkien’s legendarium</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Fantasy::Tolkien.poem\n#=> \"Chip the glasses and crack the plates\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "tolkien.poems"
                }
              ]
            },
            {
              "name": "race",
              "descriptions": [
                {
                  "text": "Produces a race from Tolkien's legendarium.\n                                <p>Produces a race from Tolkien’s legendarium</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Fantasy::Tolkien.race\n#=> \"Uruk-hai\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "tolkien.races"
                }
              ]
            }
          ],
          "classes": []
        }
      ]
    },
    {
      "name": "File",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "dir",
          "descriptions": [
            {
              "text": "Produces a random directory name."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "segment_count",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the number of nested folders in the generated string.</p>\n"
                }
              ]
            },
            {
              "name": "root",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the root of the generated string.</p>\n"
                }
              ]
            },
            {
              "name": "directory_separator",
              "type": "String",
              "default": "::File::Separator",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the separator between the segments.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::File.dir #=> \"et_error/sint_voluptas/quas_veritatis\"\nFaker::File.dir(segment_count: 2) #=> \"ea-suscipit/ut-deleniti\"\nFaker::File.dir(segment_count: 3, root: nil, directory_separator: '/') #=> \"est_porro/fugit_eveniet/incidunt-autem\"\nFaker::File.dir(segment_count: 3, root: nil, directory_separator: '\\\\') #=> \"aut-ullam\\\\quia_quisquam\\\\ut-eos\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(segment_count: 3, root: nil, directory_separator: ::File::Separator)\n        Array\n          .new(segment_count) { Faker::Internet.slug }\n          .unshift(root)\n          .compact\n          .join(directory_separator)\n          .squeeze(directory_separator)"
            }
          ]
        },
        {
          "name": "extension",
          "descriptions": [
            {
              "text": "Produces a random file extension."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::File.extension #=> \"mp3\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "file.extension"
            }
          ]
        },
        {
          "name": "file_name",
          "descriptions": [
            {
              "text": "Produces a random file name."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "dir",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the path used for the generated file.</p>\n"
                }
              ]
            },
            {
              "name": "name",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the filename used for the generated file.</p>\n"
                }
              ]
            },
            {
              "name": "ext",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the extension used the generated file.</p>\n"
                }
              ]
            },
            {
              "name": "directory_separator",
              "type": "String",
              "default": "::File::Separator",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the separator between the directory and name elements.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::File.file_name(dir: 'path/to') #=> \"path/to/something_random.jpg\"\nFaker::File.file_name(dir: 'foo/bar', name: 'baz') #=> \"foo/bar/baz.zip\"\nFaker::File.file_name(dir: 'foo/bar', name: 'baz', ext: 'doc') #=> \"foo/bar/baz.doc\"\nFaker::File.file_name(dir: 'foo/bar', name: 'baz', ext: 'mp3', directory_separator: '\\\\') #=> \"foo/bar\\\\baz.mp3\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(dir: nil, name: nil, ext: nil, directory_separator: ::File::Separator)\n        dir ||= dir(segment_count: 1)\n        name ||= Faker::Lorem.word.downcase\n        ext ||= extension\n\n        [dir, name].join(directory_separator) + \".#{ext}\""
            }
          ]
        },
        {
          "name": "mime_type",
          "descriptions": [
            {
              "text": "Produces a random mime type."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::File.mime_type #=> \"application/pdf\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "file.mime_type.#{media_type}"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Finance",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "condominium_fiscal_code",
          "descriptions": [
            {
              "text": "Returns a random condominium fiscal code."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "country",
              "type": "String",
              "default": "'IT'",
              "descriptions": [
                {
                  "text": "\n<p>Two capital letter country code to use for the vat number.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Finance.condominium_fiscal_code #=> \"012345678\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "finance.condominium_fiscal_code.#{country}"
            }
          ]
        },
        {
          "name": "credit_card",
          "descriptions": [
            {
              "text": "Produces a random credit card number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "types",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>Specific credit card type.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Finance.credit_card #=> \"3018-348979-1853\"\nFaker::Finance.credit_card(:mastercard) #=> \"6771-8921-2291-6236\"\nFaker::Finance.credit_card(:mastercard, :visa) #=> \"4448-8934-1277-7195\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "finance.credit_card.#{type}"
            }
          ]
        },
        {
          "name": "stock_market",
          "descriptions": [
            {
              "text": "Returns a randomly-selected stock market."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Finance.stock_market #=> 'NASDAQ'"
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "finance.stock_market"
            }
          ]
        },
        {
          "name": "ticker",
          "descriptions": [
            {
              "text": "Returns a randomly-selected stock ticker from a specified market."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "markets",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>The name of the market to choose the ticker from (e.g. NYSE, NASDAQ)</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Finance.ticker #=> 'AMZN'\nFaker::Finance.vat_number('NASDAQ') #=> 'GOOG'"
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "finance.ticker.#{market}"
            }
          ]
        },
        {
          "name": "vat_number",
          "descriptions": [
            {
              "text": "Produces a random vat number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "country",
              "type": "String",
              "default": "'BR'",
              "descriptions": [
                {
                  "text": "\n<p>Two capital letter country code to use for the vat number.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Finance.vat_number #=> \"BR38.395.329/2471-83\"\nFaker::Finance.vat_number('DE') #=> \"DE593306671\"\nFaker::Finance.vat_number('ZA') #=> \"ZA79494416181\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "finance.vat_number.#{country}"
            }
          ]
        },
        {
          "name": "vat_number_keys",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "translate('faker.finance.vat_number').keys"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Food",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "allergen",
          "descriptions": [
            {
              "text": "Retrieves an allergen."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Food.allergen #=> \"Peanuts\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "food.allergens"
            }
          ]
        },
        {
          "name": "description",
          "descriptions": [
            {
              "text": "Retrieves a description about some dish.\n                            <p>Retrieves a description about some dish</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Food.description #=> \"Breaded fried chicken with waffles. Served with maple syrup.\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "food.descriptions"
            }
          ]
        },
        {
          "name": "dish",
          "descriptions": [
            {
              "text": "Retrieves a typical dish from each country."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Food.dish #=> \"Feijoada\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "food.dish"
            }
          ]
        },
        {
          "name": "ethnic_category",
          "descriptions": [
            {
              "text": "Retrieves ethnic category.\n                            <p>Retrieves ethnic category</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Food.ethnic_category #=> \"Indian cuisine\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "food.ethnic_category"
            }
          ]
        },
        {
          "name": "fruits",
          "descriptions": [
            {
              "text": "Retrieves a fruit.\n                            <p>Retrieves a fruit</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Food.fruits #=> \"Papaya\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "food.fruits"
            }
          ]
        },
        {
          "name": "ingredient",
          "descriptions": [
            {
              "text": "Retrieves an ingredient.\n                            <p>Retrieves an ingredient</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Food.ingredient #=> \"Olives\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "food.ingredients"
            }
          ]
        },
        {
          "name": "measurement",
          "descriptions": [
            {
              "text": "Retrieves cooking measures.\n                            <p>Retrieves cooking measures</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Food.measurement #=> \"1/3\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "food.measurement_sizes"
            }
          ]
        },
        {
          "name": "metric_measurement",
          "descriptions": [
            {
              "text": "Retrieves metric measurements.\n                            <p>Retrieves metric measurements</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Food.metric_measurement #=> \"centiliter\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "food.metric_measurements"
            }
          ]
        },
        {
          "name": "spice",
          "descriptions": [
            {
              "text": "Retrieves some random spice.\n                            <p>Retrieves some random spice</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Food.spice #=> \"Garlic Chips\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "food.spices"
            }
          ]
        },
        {
          "name": "vegetables",
          "descriptions": [
            {
              "text": "Retrieves a vegetable.\n                            <p>Retrieves a vegetable</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Food.vegetables #=> \"Broccolini\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "food.vegetables"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "FunnyName",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "four_word_name",
          "descriptions": [
            {
              "text": "Retrieves a funny four word name."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::FunnyName.four_word_name #=> \"Maude L. T. Ford\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "data": "funny_name.name"
            }
          ]
        },
        {
          "name": "name",
          "descriptions": [
            {
              "text": "Retrieves a funny name."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::FunnyName.name #=> \"Sam Pull\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "funny_name.name"
            }
          ]
        },
        {
          "name": "name_with_initial",
          "descriptions": [
            {
              "text": "Retrieves a funny name with an initial."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::FunnyName.name_with_initial #=> \"Heather N. Yonn\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "data": "funny_name.name"
            }
          ]
        },
        {
          "name": "three_word_name",
          "descriptions": [
            {
              "text": "Retrieves a funny three word name."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::FunnyName.three_word_name #=> \"Carson O. Gin\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "data": "funny_name.name"
            }
          ]
        },
        {
          "name": "two_word_name",
          "descriptions": [
            {
              "text": "Retrieves a funny two word name."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::FunnyName.two_word_name #=> \"Shirley Knot\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "data": "funny_name.name"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Game",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "genre",
          "descriptions": [
            {
              "text": "Produces the name of a video game genre."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Game.genre #=> \"Real-time strategy\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "game.genre"
            }
          ]
        },
        {
          "name": "platform",
          "descriptions": [
            {
              "text": "Produces the name of a video game console or platform."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Game.platform #=> \"Nintendo Switch\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "game.platform"
            }
          ]
        },
        {
          "name": "title",
          "descriptions": [
            {
              "text": "Produces the name of a video game."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Game.title #=> \"Half-Life 2\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "game.title"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Games",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [],
      "classes": [
        {
          "name": "ClashOfClans",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "defensive_building",
              "descriptions": [
                {
                  "text": "Produces the name of a defensive building from Clash Of Clans."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::ClashOfClans.defensive_building #=> \"Cannon\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.clash_of_clans.defensive_buildings"
                }
              ]
            },
            {
              "name": "rank",
              "descriptions": [
                {
                  "text": "Produces the name of a rank from Clash Of Clans."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::ClashOfClans.rank #=> \"Legend\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.clash_of_clans.ranks"
                }
              ]
            },
            {
              "name": "troop",
              "descriptions": [
                {
                  "text": "Produces the name of a troop from Clash of Clans."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::ClashOfClans.troop #=> \"Barbarian\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.clash_of_clans.troops"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Control",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "altered_item",
              "descriptions": [
                {
                  "text": "Produces the name of an Altered Item.\n                                <p>Produces the name of an Altered Item</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Control.altered_item #=> \"Rubber Duck\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.control.altered_item"
                }
              ]
            },
            {
              "name": "altered_world_event",
              "descriptions": [
                {
                  "text": "Produces the location of an Altered World Event (AWE).\n                                <p>Produces the location of an Altered World Event (AWE)</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Control.altered_world_event #=> \"Ordinary, Wisconsin\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.control.altered_world_event"
                }
              ]
            },
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces the name of a character from Control."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Control.character #=> \"Jesse Faden\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.control.character"
                }
              ]
            },
            {
              "name": "hiss",
              "descriptions": [
                {
                  "text": "Produces a line from the Hiss incantation.\n                                <p>Produces a line from the Hiss incantation</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Control.hiss #=> \"Push the fingers through the surface into the wet.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.control.hiss"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces the name of a location from Control."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Control.location #=> \"Dimensional Research\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.control.location"
                }
              ]
            },
            {
              "name": "object_of_power",
              "descriptions": [
                {
                  "text": "Produces the name of an Object of Power (OoP).\n                                <p>Produces the name of an Object of Power (OoP)</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Control.object_of_power #=> \"Hotline\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.control.object_of_power"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Control.\n                                <p>Produces a quote from Control</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Control.quote #=> \"He never liked fridge duty\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.control.quote"
                }
              ]
            },
            {
              "name": "the_board",
              "descriptions": [
                {
                  "text": "< Produces a line/quote/message from The Board >.\n                                <p>&lt; Produces a line/quote/message from The Board &gt;</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Control.the_board #=> \"< You/We wield the Gun/You. The Board appoints you. Congratulations, Director. >\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.control.the_board"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "DnD",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "alignment",
              "descriptions": [
                {
                  "text": "Produces the name of an alignment from Dungeons and Dragons."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::DnD.alignment #=> \"Lawful Neutral\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "dnd.alignments"
                }
              ]
            },
            {
              "name": "background",
              "descriptions": [
                {
                  "text": "Produces the name of a background from Dungeons and Dragons (PHB)."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::DnD.background #=> \"Urchin\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "dnd.backgrounds"
                }
              ]
            },
            {
              "name": "city",
              "descriptions": [
                {
                  "text": "Produces the name of a city from Dungeons and Dragons."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::DnD.city #=> \"Earthfast\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "dnd.cities"
                }
              ]
            },
            {
              "name": "first_name",
              "descriptions": [
                {
                  "text": "Produces the first name of a character or monster from Dungeons and Dragons."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::DnD.name #=> \"Eilonwy\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "dnd.name.first_name"
                }
              ]
            },
            {
              "name": "klass",
              "descriptions": [
                {
                  "text": "Produces the name of a class from Dungeons and Dragons (PHB)."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::DnD.klass #=> \"Warlock\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "dnd.klasses"
                }
              ]
            },
            {
              "name": "language",
              "descriptions": [
                {
                  "text": "Produces the name of a language from Dungeons and Dragons."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::DnD.language #=> \"Gnomish\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "dnd.languages"
                }
              ]
            },
            {
              "name": "last_name",
              "descriptions": [
                {
                  "text": "Produces a last name from Dungeons and Dragons."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::DnD.last_name #=> \"Leafwhisper\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "dnd.name.last_name"
                }
              ]
            },
            {
              "name": "melee_weapon",
              "descriptions": [
                {
                  "text": "Produces the name of a melee weapon from Dungeons and Dragons."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::DnD.melee_weapon #=> \"Handaxe\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "dnd.melee_weapons"
                }
              ]
            },
            {
              "name": "monster",
              "descriptions": [
                {
                  "text": "Produces the name of a monster from Dungeons and Dragons."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::DnD.monster #=> \"Manticore\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "dnd.monsters"
                }
              ]
            },
            {
              "name": "name",
              "descriptions": [
                {
                  "text": "Produces a full name from Dungeons and Dragons."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::DnD.name #=> \"Drakon Blackthorn\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "dnd.name.first_name"
                }
              ]
            },
            {
              "name": "race",
              "descriptions": [
                {
                  "text": "Produces the name of a race from Dungeons and Dragons (PHB)."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::DnD.races #=> \"Dwarf\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "dnd.races"
                }
              ]
            },
            {
              "name": "ranged_weapon",
              "descriptions": [
                {
                  "text": "Produces the name of a ranged weapon from Dungeons and Dragons."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::DnD.ranged_weapon #=> \"Shortbow\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "dnd.ranged_weapons"
                }
              ]
            },
            {
              "name": "title_name",
              "descriptions": [
                {
                  "text": "Produces a last name from Dungeons and Dragons."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::DnD.title_name #=> \"Corvus the Cunning\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "dnd.name.first_name"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Dota",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "building",
              "descriptions": [
                {
                  "text": "Produces the name of a building from Dota."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Dota.building #=> \"Tower\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.dota.building"
                }
              ]
            },
            {
              "name": "hero",
              "descriptions": [
                {
                  "text": "Produces the name of a hero from Dota."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Dota.hero #=> \"Abaddon\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.dota.hero"
                }
              ]
            },
            {
              "name": "item",
              "descriptions": [
                {
                  "text": "Produces the name of an item from Dota."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Dota.item #=> \"Armlet of Mordiggian\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.dota.item"
                }
              ]
            },
            {
              "name": "player",
              "descriptions": [
                {
                  "text": "Produces the name of a professional Dota player."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Dota.player #=> \"Dendi\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.dota.player"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces the name of a hero from Dota."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [
                {
                  "name": "hero",
                  "type": "String",
                  "default": "'abaddon'",
                  "descriptions": [
                    {
                      "text": "\n<p>The name of a Dota hero.</p>\n"
                    }
                  ]
                }
              ],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Dota.quote #=> \"You have called death upon yourself.\"\nFaker::Games::Dota.quote(hero: 'alchemist') #=> \"Better living through alchemy!\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.dota.#{hero}.quote"
                }
              ]
            },
            {
              "name": "team",
              "descriptions": [
                {
                  "text": "Produces the name of a professional Dota team."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Dota.team #=> \"Evil Geniuses\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.dota.team"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "ElderScrolls",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "city",
              "descriptions": [
                {
                  "text": "Produces the name of a city from the Elder Scrolls universe."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::ElderScrolls.city #=> \"Whiterun\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.elder_scrolls.city"
                }
              ]
            },
            {
              "name": "creature",
              "descriptions": [
                {
                  "text": "Produces the name of a creature from the Elder Scrolls universe."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::ElderScrolls.creature #=> \"Frost Troll\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.elder_scrolls.creature"
                }
              ]
            },
            {
              "name": "dragon",
              "descriptions": [
                {
                  "text": "Produces the name of a dragon from the Elder Scrolls universe."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::ElderScrolls.dragon #=> \"Blood Dragon\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.elder_scrolls.dragon"
                }
              ]
            },
            {
              "name": "first_name",
              "descriptions": [
                {
                  "text": "Produces a first name from the Elder Scrolls universe."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::ElderScrolls.first_name #=> \"Balgruuf\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.elder_scrolls.first_name"
                }
              ]
            },
            {
              "name": "jewelry",
              "descriptions": [
                {
                  "text": "Produces a weapon from the Elder Scrolls universe."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::ElderScrolls.jewelry #=> \"Silver Ruby Ring\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.elder_scrolls.jewelry"
                }
              ]
            },
            {
              "name": "last_name",
              "descriptions": [
                {
                  "text": "Produces a last name from the Elder Scrolls universe."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::ElderScrolls.last_name #=> \"The Old\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.elder_scrolls.last_name"
                }
              ]
            },
            {
              "name": "name",
              "descriptions": [
                {
                  "text": "Produces a randomly generated name from the Elder Scrolls universe."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::ElderScrolls.name #=> \"Balgruuf The Old\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.elder_scrolls.first_name"
                }
              ]
            },
            {
              "name": "race",
              "descriptions": [
                {
                  "text": "Produces the name of a race from the Elder Scrolls universe."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::ElderScrolls.race #=> \"Argonian\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.elder_scrolls.race"
                }
              ]
            },
            {
              "name": "region",
              "descriptions": [
                {
                  "text": "Produces the name of a region from the Elder Scrolls universe."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::ElderScrolls.region #=> \"Cyrodiil\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.elder_scrolls.region"
                }
              ]
            },
            {
              "name": "weapon",
              "descriptions": [
                {
                  "text": "Produces a weapon from the Elder Scrolls universe."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::ElderScrolls.weapon #=> \"Elven Bow\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.elder_scrolls.weapon"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Fallout",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces the name of a character from the Fallout games."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Fallout.character #=> \"Liberty Prime\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.fallout.characters"
                }
              ]
            },
            {
              "name": "faction",
              "descriptions": [
                {
                  "text": "Produces the name of a faction from the Fallout games."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Fallout.faction #=> \"Brotherhood of Steel\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.fallout.factions"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces the name of a location from the Fallout games."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Fallout.location #=> \"New Vegas\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.fallout.locations"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from the Fallout games."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Fallout.quote\n#=> \"Democracy is non-negotiable\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.fallout.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "FinalFantasyXIV",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces the name of a character from FFXIV."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::FinalFantasyXIV.character #=> \"Y'shtola Rhul\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.final_fantasy_xiv.characters"
                }
              ]
            },
            {
              "name": "data_center",
              "descriptions": [
                {
                  "text": "Produces a data center from Final Fantasy XIV."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::FinalFantasyXIV.data_center #=> \"Aether\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.final_fantasy_xiv.data_centers"
                }
              ]
            },
            {
              "name": "job",
              "descriptions": [
                {
                  "text": "Produces a job name from Final Fantasy XIV.\n                                <p>Either a battle or non-battle playable job.</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::FinalFantasyXIV.job #=> \"Paladin\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.final_fantasy_xiv.jobs"
                }
              ]
            },
            {
              "name": "race",
              "descriptions": [
                {
                  "text": "Produces the name of a playable race from Final Fantasy XIV."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::FinalFantasyXIV.race #=> \"Miqo'te\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.final_fantasy_xiv.races"
                }
              ]
            },
            {
              "name": "zone",
              "descriptions": [
                {
                  "text": "Produces a geographical zone from Final Fantasy XIV."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::FinalFantasyXIV.zone #=> \"Eastern La Noscea\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.final_fantasy_xiv.zones"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "HalfLife",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces the name of a character from the Half-Life games."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::HalfLife.character #=> \"Gordon Freeman\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.half_life.character"
                }
              ]
            },
            {
              "name": "enemy",
              "descriptions": [
                {
                  "text": "Produces the name of an enemy from the Half-Life games."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::HalfLife.enemy #=> \"Headcrab\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.half_life.enemy"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces the name of a location from the Half-Life games."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::HalfLife.location #=> \"Black Mesa Research Facility\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.half_life.location"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Heroes",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "artifact",
              "descriptions": [
                {
                  "text": "Produces the name of an artifact from Heroes 3."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Heroes.artifact #=> \"Armageddon's Blade\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "heroes.artifacts"
                }
              ]
            },
            {
              "name": "klass",
              "descriptions": [
                {
                  "text": "Produces the name of a class from Heroes 3."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Heroes.klass #=> \"Knight\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "heroes.klasses"
                }
              ]
            },
            {
              "name": "name",
              "descriptions": [
                {
                  "text": "Produces the name of a hero from Heroes 3."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Heroes.name #=> \"Christian\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "heroes.names"
                }
              ]
            },
            {
              "name": "specialty",
              "descriptions": [
                {
                  "text": "Produces the name of a specialty from Heroes 3."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Heroes.specialty #=> \"Ballista\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "heroes.specialties"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "HeroesOfTheStorm",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "battleground",
              "descriptions": [
                {
                  "text": "Produces a battleground from Heroes of the Storm."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::HeroesOfTheStorm.battleground #=> \"Towers of Doom\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "heroes_of_the_storm.battlegrounds"
                }
              ]
            },
            {
              "name": "class",
              "descriptions": [
                {
                  "text": "This method is deprecated.\n                                <p>The implementation will be removed in a near future release. Use ‘HeroesOfTheStorm.class_name` instead.</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "warn '`HeroesOfTheStorm.class` is deprecated. Use `HeroesOfTheStorm.class_name` instead.'\n\n          super"
                }
              ]
            },
            {
              "name": "class_name",
              "descriptions": [
                {
                  "text": "Produces a class name from Heroes of the Storm."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::HeroesOfTheStorm.class_name #=> \"Support\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "heroes_of_the_storm.class_names"
                }
              ]
            },
            {
              "name": "hero",
              "descriptions": [
                {
                  "text": "Produces a hero from Heroes of the Storm."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::HeroesOfTheStorm.hero #=> \"Illidan\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "heroes_of_the_storm.heroes"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Heroes of the Storm."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::HeroesOfTheStorm.quote #=> \"MEAT!!!\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "heroes_of_the_storm.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "LeagueOfLegends",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "champion",
              "descriptions": [
                {
                  "text": "Produces the name of a champion from League of Legends."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::LeagueOfLegends.champion #=> \"Jarvan IV\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.league_of_legends.champion"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces a location from League of Legends."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::LeagueOfLegends.location #=> \"Demacia\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.league_of_legends.location"
                }
              ]
            },
            {
              "name": "masteries",
              "descriptions": [
                {
                  "text": "Produces a mastery from League of Legends."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::LeagueOfLegends.masteries #=> \"Double Edged Sword\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.league_of_legends.masteries"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from League of Legends."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::LeagueOfLegends.quote #=> \"Purge the unjust.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.league_of_legends.quote"
                }
              ]
            },
            {
              "name": "rank",
              "descriptions": [
                {
                  "text": "Produces a rank from League of Legends."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::LeagueOfLegends.rank #=> \"Bronze V\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.league_of_legends.rank"
                }
              ]
            },
            {
              "name": "summoner_spell",
              "descriptions": [
                {
                  "text": "Produces a summoner spell from League of Legends."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::LeagueOfLegends.summoner_spell #=> \"Flash\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.league_of_legends.summoner_spell"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Minecraft",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "achievement",
              "descriptions": [
                {
                  "text": "Produces the name of an achievement from Minecraft."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Minecraft.achievement #=> \"Time to Mine!\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.minecraft.achievement"
                }
              ]
            },
            {
              "name": "biome",
              "descriptions": [
                {
                  "text": "Produces the name of a biome from Minecraft."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Minecraft.biome #=> \"Jungle\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.minecraft.biome"
                }
              ]
            },
            {
              "name": "block",
              "descriptions": [
                {
                  "text": "Produces the name of a block from Minecraft."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Minecraft.block #=> \"Stone\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.minecraft.blocks"
                }
              ]
            },
            {
              "name": "enchantment",
              "descriptions": [
                {
                  "text": "Produces the name of a enchantment from Minecraft."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Minecraft.enchantment #=> \"Fire Protection\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.minecraft.enchantment"
                }
              ]
            },
            {
              "name": "game_mode",
              "descriptions": [
                {
                  "text": "Produces the name of a game mode from Minecraft."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Minecraft.game_mode #=> \"Survival\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.minecraft.game_mode"
                }
              ]
            },
            {
              "name": "item",
              "descriptions": [
                {
                  "text": "Produces the name of an item from Minecraft."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Minecraft.item #=> \"Iron Shovel\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.minecraft.items"
                }
              ]
            },
            {
              "name": "mob",
              "descriptions": [
                {
                  "text": "Produces the name of a mob from Minecraft."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Minecraft.mob #=> \"Sheep\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.minecraft.mobs"
                }
              ]
            },
            {
              "name": "status_effect",
              "descriptions": [
                {
                  "text": "Produces the name of a status effect from Minecraft."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Minecraft.status_effect #=> \"Weakness\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.minecraft.status_effect"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Myst",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "age",
              "descriptions": [
                {
                  "text": "Produces the name of an age from Myst."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Myst.age #=> \"Relto\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.myst.ages"
                }
              ]
            },
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces the name of a character from Myst."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Myst.character #=> \"Gehn\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.myst.characters"
                }
              ]
            },
            {
              "name": "creature",
              "descriptions": [
                {
                  "text": "Produces the name of a creature from Myst."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Myst.creature #=> \"squee\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.myst.creatures"
                }
              ]
            },
            {
              "name": "game",
              "descriptions": [
                {
                  "text": "Produces the name of a game from the Myst series."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Myst.game #=> \"Myst III: Exile\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.myst.games"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Myst."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Myst.quote #=> \"I realized, the moment I fell into the fissure, that the Book would not be destroyed as I had planned.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.myst.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Overwatch",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "hero",
              "descriptions": [
                {
                  "text": "Produces the name of a hero from Overwatch."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Overwatch.hero #=> \"Tracer\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.overwatch.heroes"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces the name of a location from Overwatch."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Overwatch.location #=> \"Numbani\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.overwatch.locations"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Overwatch."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Overwatch.quote #=> \"It's high noon\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.overwatch.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Pokemon",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces a location from Pokemon."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Pokemon.location #=> \"Pallet Town\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.pokemon.locations"
                }
              ]
            },
            {
              "name": "move",
              "descriptions": [
                {
                  "text": "Produces a move from Pokemon."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Pokemon.move #=> \"Thunder Shock\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.pokemon.moves"
                }
              ]
            },
            {
              "name": "name",
              "descriptions": [
                {
                  "text": "Produces the name of a Pokemon."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Pokemon.name #=> \"Pikachu\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.pokemon.names"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "SonicTheHedgehog",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces the name of a character from Sonic the Hedgehog."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::SonicTheHedgehog.character #=> \"Sonic the Hedgehog\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.sonic_the_hedgehog.character"
                }
              ]
            },
            {
              "name": "game",
              "descriptions": [
                {
                  "text": "Produces the name of a game from the Sonic the Hedgehog series."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::SonicTheHedgehog.game #=> \"Waku Waku Sonic Patrol Car\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.sonic_the_hedgehog.game"
                }
              ]
            },
            {
              "name": "zone",
              "descriptions": [
                {
                  "text": "Produces the name of a zone from Sonic the Hedgehog."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::SonicTheHedgehog.zone #=> \"Green Hill Zone\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.sonic_the_hedgehog.zone"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "StreetFighter",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces the name of a playable character from Street Fighter."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::StreetFighter.character #=> \"Ryu\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.street_fighter.characters"
                }
              ]
            },
            {
              "name": "move",
              "descriptions": [
                {
                  "text": "Produces the name of a move from Street Fighter."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::StreetFighter.move #=> \"Shoryuken\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.street_fighter.moves"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Street Fighter."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::StreetFighter.quote #=> \"Go home and be a family man.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.street_fighter.quotes"
                }
              ]
            },
            {
              "name": "stage",
              "descriptions": [
                {
                  "text": "Produces the name of a stage from Street Fighter."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::StreetFighter.stage #=> \"Volcanic Rim\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.street_fighter.stages"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "SuperMario",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces the name of a Super Mario character."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::SuperMario.character #=> \"Luigi\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.super_mario.characters"
                }
              ]
            },
            {
              "name": "game",
              "descriptions": [
                {
                  "text": "Produces the name of a Super Mario game."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::SuperMario.game #=> \"Super Mario Odyssey\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.super_mario.games"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces the name of a Super Mario location."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::SuperMario.location #=> \"Kong City\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.super_mario.locations"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "SuperSmashBros",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "fighter",
              "descriptions": [
                {
                  "text": "Produces the name of a fighter from the Smash Bros games."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::SuperSmashBros.fighter #=> \"Mario\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.super_smash_bros.fighter"
                }
              ]
            },
            {
              "name": "stage",
              "descriptions": [
                {
                  "text": "Produces the name of a stage from the Smash Bros games."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::SuperSmashBros.stage #=> \"Final Destination\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.super_smash_bros.stage"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Tarkov",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "boss",
              "descriptions": [
                {
                  "text": "Produces a random boss from Escape from Tarkov."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Tarkov.boss #=> \"Tagilla\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "tarkov.bosses"
                }
              ]
            },
            {
              "name": "faction",
              "descriptions": [
                {
                  "text": "Produces a random faction from Escape from Tarkov."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Tarkov.faction #=> \"USEC\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "tarkov.factions"
                }
              ]
            },
            {
              "name": "fence_quest",
              "descriptions": [
                {
                  "text": "Produces a random quest from Fence from Escape from Tarkov."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Tarkov.fence_quest #=> \"Compensation for Damage - Wager\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "tarkov.quests.fence"
                }
              ]
            },
            {
              "name": "item",
              "descriptions": [
                {
                  "text": "Produces a random item from Escape from Tarkov."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Tarkov.item #=> \"Diary\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "tarkov.items"
                }
              ]
            },
            {
              "name": "jaeger_quest",
              "descriptions": [
                {
                  "text": "Produces a random quest from Jaeger from Escape from Tarkov."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Tarkov.jaeger_quest #=> \"The Tarkov Shooter - Part 1\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "tarkov.quests.jaeger"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces a random location from Escape from Tarkov."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Tarkov.location #=> \"Customs\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "tarkov.locations"
                }
              ]
            },
            {
              "name": "mechanic_quest",
              "descriptions": [
                {
                  "text": "Produces a random quest from Mechanic from Escape from Tarkov."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Tarkov.mechanic_quest #=> \"Signal - Part 4\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "tarkov.quests.mechanic"
                }
              ]
            },
            {
              "name": "peacekeeper_quest",
              "descriptions": [
                {
                  "text": "Produces a random quest from Peacekeeper from Escape from Tarkov."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Tarkov.peacekeeper_quest #=> \"Overpopulation\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "tarkov.quests.peacekeeper"
                }
              ]
            },
            {
              "name": "prapor_quest",
              "descriptions": [
                {
                  "text": "Produces a random quest from Prapor from Escape from Tarkov."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Tarkov.prapor_quest #=> \"Easy Job - Part 2"
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "tarkov.quests.prapor"
                }
              ]
            },
            {
              "name": "quest",
              "descriptions": [
                {
                  "text": "Produces a random quest from a random trader from Escape from Tarkov."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Tarkov.quest #=> \"The Key to Success\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "tarkov.quests.#{@traders.sample}"
                }
              ]
            },
            {
              "name": "ragman_quest",
              "descriptions": [
                {
                  "text": "Produces a random quest from Ragman from Escape from Tarkov."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Tarkov.ragman_quest #=> \"Hot Delivery\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "tarkov.quests.ragman"
                }
              ]
            },
            {
              "name": "skier_quest",
              "descriptions": [
                {
                  "text": "Produces a random quest from Skier from Escape from Tarkov."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Tarkov.skier_quest #=> \"Safe Corridor\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "tarkov.quests.skier"
                }
              ]
            },
            {
              "name": "therapist_quest",
              "descriptions": [
                {
                  "text": "Produces a random quest from Therapist from Escape from Tarkov."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Tarkov.therapist_quest #=> \"Supply Plans\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "tarkov.quests.therapist"
                }
              ]
            },
            {
              "name": "trader",
              "descriptions": [
                {
                  "text": "Produces a random trader from Escape from Tarkov."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Tarkov.trader #=> \"Prapor\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "tarkov.traders"
                }
              ]
            },
            {
              "name": "weapon",
              "descriptions": [
                {
                  "text": "Produces a random weapon from Escape from Tarkov."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Tarkov.weapon #=> \"AK-74N\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "tarkov.weapons"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Touhou",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces the name of a character from the Touhou games."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Touhou.character #=> \"Sanae Kochiya\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.touhou.characters"
                }
              ]
            },
            {
              "name": "game",
              "descriptions": [
                {
                  "text": "Produces the name of a Touhou game."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Touhou.game #=> \"Mountain of Faith\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.touhou.games"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces the name of a location from the Touhou games."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Touhou.location #=> \"Moriya Shrine\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.touhou.locations"
                }
              ]
            },
            {
              "name": "song",
              "descriptions": [
                {
                  "text": "Produces the name of a song from the Touhou games."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Touhou.song #=> \"Faith Is for the Transient People\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.touhou.songs"
                }
              ]
            },
            {
              "name": "spell_card",
              "descriptions": [
                {
                  "text": "Produces the name of a spell card from the Touhou games."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Touhou.spell_card #=> 'Esoterica \"Gray Thaumaturgy\"'"
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.touhou.spell_cards"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "WarhammerFantasy",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "creature",
              "descriptions": [
                {
                  "text": "Produces a creature from the Warhammer Fantasy setting."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::WarhammerFantasy.creature #=> \"Hydra\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.warhammer_fantasy.creatures"
                }
              ]
            },
            {
              "name": "faction",
              "descriptions": [
                {
                  "text": "Produces a faction from the Warhammer Fantasy setting."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::WarhammerFantasy.faction #=> \"Bretonnia\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.warhammer_fantasy.factions"
                }
              ]
            },
            {
              "name": "hero",
              "descriptions": [
                {
                  "text": "Produces the name of a hero from the Warhammer Fantasy setting."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::WarhammerFantasy.hero #=> \"Sigmar Heldenhammer\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.warhammer_fantasy.heros"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces a location from the Warhammer Fantasy setting."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::WarhammerFantasy.location #=> \"Lustria\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.warhammer_fantasy.locations"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from the Warhammer Fantasy setting."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::WarhammerFantasy.quote #=> \"The softest part of a castle is the belly of the man inside.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.warhammer_fantasy.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Witcher",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "book",
              "descriptions": [
                {
                  "text": "Produces the name of a book from The Witcher."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Witcher.book #=> \"Sword of Destiny\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.witcher.books"
                }
              ]
            },
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces the name of a character from The Witcher."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Witcher.character #=> \"Triss Merigold\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.witcher.characters"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces the name of a location from The Witcher."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Witcher.location #=> \"Novigrad\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.witcher.locations"
                }
              ]
            },
            {
              "name": "monster",
              "descriptions": [
                {
                  "text": "Produces the name of a monster from The Witcher."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Witcher.monster #=> \"Katakan\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.witcher.monsters"
                }
              ]
            },
            {
              "name": "potion",
              "descriptions": [
                {
                  "text": "Produces the name of a potion from The Witcher."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Witcher.potion #=> \"Gadwall\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.witcher.potions"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from The Witcher."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Witcher.quote #=> \"No Lollygagin'!\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.witcher.quotes"
                }
              ]
            },
            {
              "name": "school",
              "descriptions": [
                {
                  "text": "Produces the name of a school from The Witcher."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Witcher.school #=> \"Wolf\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.witcher.schools"
                }
              ]
            },
            {
              "name": "sign",
              "descriptions": [
                {
                  "text": "Produces the name of a sign from The Witcher."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Witcher.sign #=> \"Igni\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.witcher.signs"
                }
              ]
            },
            {
              "name": "witcher",
              "descriptions": [
                {
                  "text": "Produces the name of a witcher from The Witcher."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Witcher.witcher #=> \"Geralt of Rivia\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.witcher.witchers"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "WorldOfWarcraft",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "class_name",
              "descriptions": [
                {
                  "text": "Produces a class name from World of Warcraft."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::WorldOfWarcraft.class_name #=> \"Druid\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.world_of_warcraft.class_names"
                }
              ]
            },
            {
              "name": "hero",
              "descriptions": [
                {
                  "text": "Produces the name of a hero from World of Warcraft."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::WorldOfWarcraft.hero #=> \"Uther the Lightbringer\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.world_of_warcraft.heros"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from World of Warcraft."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::WorldOfWarcraft.quote #=> \"These are dark times indeed.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.world_of_warcraft.quotes"
                }
              ]
            },
            {
              "name": "race",
              "descriptions": [
                {
                  "text": "Produces the name of a race from World of Warcraft."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::WorldOfWarcraft.race #=> \"Druid\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.world_of_warcraft.races"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Zelda",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces the name of a character from the Legend of Zelda games."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Zelda.character #=> \"Link\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.zelda.characters"
                }
              ]
            },
            {
              "name": "game",
              "descriptions": [
                {
                  "text": "Produces the name of a Legend of Zelda game."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Zelda.game #=> \"Breath of the Wild\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.zelda.games"
                }
              ]
            },
            {
              "name": "item",
              "descriptions": [
                {
                  "text": "Produces the name of an item from the Legend of Zelda games."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Zelda.item #=> \"Boomerang\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.zelda.items"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces the name of a character from the Legend of Zelda games."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::Zelda.location #=> \"Hyrule Castle\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "games.zelda.locations"
                }
              ]
            }
          ],
          "classes": []
        }
      ]
    },
    {
      "name": "Gender",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "binary_type",
          "descriptions": [
            {
              "text": "Produces either 'Male' or 'Female'."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Gender.binary_type #=> \"Female\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "gender.binary_types"
            }
          ]
        },
        {
          "name": "short_binary_type",
          "descriptions": [
            {
              "text": "Produces either 'f' or 'm'."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Gender.short_binary_type #=> \"f\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "gender.short_binary_types"
            }
          ]
        },
        {
          "name": "type",
          "descriptions": [
            {
              "text": "Produces the name of a gender identity."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Gender.type #=> \"Non-binary\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "gender.types"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "GreekPhilosophers",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "name",
          "descriptions": [
            {
              "text": "Produces the name of a Greek philosopher."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::GreekPhilosophers.name #=> \"Socrates\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "greek_philosophers.names"
            }
          ]
        },
        {
          "name": "quote",
          "descriptions": [
            {
              "text": "Produces a quote from a Greek philosopher."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::GreekPhilosophers.quote #=> \"Only the educated are free.\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "greek_philosophers.quotes"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "HTML",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "available_methods",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(HTML.public_methods(false) - Base.methods).sort"
            }
          ]
        },
        {
          "name": "code",
          "descriptions": [
            {
              "text": "Produces a random code block formatted in HTML."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::HTML.code #=> \"<code>Eos quasi qui.</code>\""
            }
          ],
          "implementations": [
            {
              "type": "Expression",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "<code>#{Lorem.sentence(word_count: 1)}</code>"
            }
          ]
        },
        {
          "name": "element",
          "descriptions": [
            {
              "text": "Generates HTML content with customizable attributes for any HTML tag."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "tag",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>The HTML tag to generate.</p>\n"
                }
              ]
            },
            {
              "name": "content",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>The Content of the HTML tag.</p>\n"
                }
              ]
            },
            {
              "name": "attributes",
              "type": "Hash",
              "descriptions": [
                {
                  "text": "\n<p>The attributes to include in the tag.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::HTML.element(tag: 'div', content: \"This is a div with XSS attributes.\", attributes: {class: 'xss', onclick: \"alert('XSS')\"}) #=> \"<div class=\\\"xss\\\" onclick=\\\"alert('XSS')\\\">This is a div with XSS attributes.</div>\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(tag: 'div', content: Lorem.sentence(word_count: 3), attributes: { class: Lorem.word, onclick: \"#{Lorem.word}()\" })\n        attribute_string = attributes.map { |key, value| \"#{key}=\\\"#{value}\\\"\" }.join(' ')\n        \"<#{tag} #{attribute_string}>#{content}</#{tag}>\""
            }
          ]
        },
        {
          "name": "emphasis",
          "descriptions": [
            {
              "text": "Produces a random emphasis formatting on a random word in two HTML paragraphs."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::HTML.emphasis #=> \"<em>repellat id impedit</em>\""
            }
          ],
          "implementations": [
            {
              "type": "Expression",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "<em>#{Faker::Lorem.paragraph(sentence_count: 1)}</em>"
            }
          ]
        },
        {
          "name": "generate_table_row",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(tag, cell_count)\n        row = \"<tr>\\n\"\n        cell_count.times do\n          row += \"<#{tag == 'th' ? 'th' : 'td'}>#{Lorem.word}</#{tag == 'th' ? 'th' : 'td'}>\\n\""
            }
          ]
        },
        {
          "name": "heading",
          "descriptions": [
            {
              "text": "Produces a random HTML header format."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::HTML.heading #=> \"<h5>Autem</h5>\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "level = rand(1..6)\n        \"<h#{level}>#{Lorem.word.capitalize}</h#{level}>\""
            }
          ]
        },
        {
          "name": "link",
          "descriptions": [
            {
              "text": "Generates a random <link> tag with the `rel` attribute set to \"stylesheet\" and the `href` attribute set to a random URL."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "rel",
              "type": "String",
              "default": "'stylesheet'",
              "descriptions": [
                {
                  "text": "\n<p>The rel of the link tag.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::HTML.link #=> \"<link rel=\\\"stylesheet\\\" href=\\\"http://fay.io/darryl.barrows.css\\\">\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(rel: 'stylesheet')\n        \"<link rel=\\\"#{rel}\\\" href=\\\"#{Faker::Internet.url}.css\\\">\""
            }
          ]
        },
        {
          "name": "ordered_list",
          "descriptions": [
            {
              "text": "Produces a random ordered list in HTML format, with at least one element."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::HTML.ordered_list #=> \"<ol>\\n<li>Qui reiciendis non consequatur atque.</li>\\n<li>Quo doloremque veritatis tempora aut.</li>\\n<li>Aspernatur.</li>\\n<li>Ea ab.</li>\\n<li>Qui.</li>\\n<li>Sit pariatur nemo eveniet.</li>\\n<li>Molestiae aut.</li>\\n<li>Nihil molestias iure placeat.</li>\\n<li>Dolore autem quisquam.</li>\\n</ol>\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "number = rand(1..10)\n\n        items = []\n        number.times do\n          items << \"<li>#{Faker::Lorem.sentence(word_count: 1)}</li>\""
            }
          ]
        },
        {
          "name": "paragraph",
          "descriptions": [
            {
              "text": "Produces a random HTML paragraph format."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "sentence_count",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>The number of sentences in the paragraph.</p>\n"
                }
              ]
            },
            {
              "name": "supplemental",
              "type": "Boolean",
              "descriptions": [
                {
                  "text": "\n<p>Include supplemental text.</p>\n"
                }
              ]
            },
            {
              "name": "random_sentences_to_add",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>The number of random sentences to add to the paragraph.</p>\n"
                }
              ]
            },
            {
              "name": "exclude_words",
              "type": "Array<String>",
              "default": "nil",
              "descriptions": [
                {
                  "text": "\n<p>Words to exclude from the generated paragraph.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::HTML.paragraph #=> \"<p>Incidunt atque quis</p>\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(sentence_count: 3, supplemental: false, random_sentences_to_add: 0, exclude_words: nil)\n        \"<p>#{Faker::Lorem.paragraph(sentence_count: sentence_count, supplemental: supplemental, random_sentences_to_add: random_sentences_to_add, exclude_words: exclude_words)}</p>\""
            }
          ]
        },
        {
          "name": "random",
          "descriptions": [
            {
              "text": "Produces a random method from the methods above, excluding the methods listed in the arguments."
            }
          ],
          "return_type": "",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "methods",
              "type": "Symbol",
              "descriptions": [
                {
                  "text": "\n<p>Specify which methods to exclude.</p>\n"
                }
              ]
            }
          ],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(exclude: [])\n        method_list = available_methods\n        exclude.each { |ex| method_list.delete_if { |meth| meth == ex.to_sym } }\n        send(method_list[Faker::Config.random.rand(0..method_list.length - 1)])"
            }
          ]
        },
        {
          "name": "sandwich",
          "descriptions": [
            {
              "text": "Generates a random HTML content sandwich, starting with a header, followed by paragraphs, and random elements."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "sentences",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>The number of sentences in each paragraph.</p>\n"
                }
              ]
            },
            {
              "name": "repeat",
              "type": "Integer",
              "default": "1",
              "descriptions": [
                {
                  "text": "\n<p>The number of times to repeat the pattern (header, paragraph, random).</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::HTML.sandwich(sentences: 3, repeat: 2) #=> returns a sandwich of HTML content with 2 repetitions, each having a header, paragraph, and random element"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(sentences: 3, repeat: 1)\n        text_block = []\n        text_block << heading\n        repeat.times do\n          text_block << paragraph(sentence_count: sentences)\n          text_block << random(exclude: %i[script link])"
            }
          ]
        },
        {
          "name": "script",
          "descriptions": [
            {
              "text": "Generates a random <script> tag with the `src` attribute set to a random URL."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::HTML.script #=> \"<script src=\\\"http://gulgowski.name/jordan.weimann.js\\\"></script>\""
            }
          ],
          "implementations": [
            {
              "type": "Expression",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "<script src=\\\"#{Faker::Internet.url}.js\\\"></script>"
            }
          ]
        },
        {
          "name": "table",
          "descriptions": [
            {
              "text": "Produces a random HTML table."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::HTML.table #=> \"<table>\\n<thead>\\n<th>ad</th>\\n<th>similique</th>\\n<th>voluptatem</th>\\n</thead>\\n<tbody>\\n<td>corrupti</td>\\n<td>est</td>\\n<td>rerum</td>\\n<td>molestiae</td>\\n<td>quidem</td>\\n<td>et</td>\\n<td>in</td>\\n<td>tempora</td>\\n<td>at</td>\\n<\\tbody>\\n<tfoot>\\n<td>voluptatem</td>\\n<td>debitis</td>\\n<td>rem</td>\\n</tfoot>\\n</table>\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "header_row = generate_table_row('th', 3)\n        footer_row = generate_table_row('td', 3)\n\n        body_rows = []\n        3.times do\n          row = generate_table_row('td', 3)\n          body_rows << row"
            }
          ]
        },
        {
          "name": "unordered_list",
          "descriptions": [
            {
              "text": "Produces a random unordered list of items between 1 and 10 randomly in HTML format."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::HTML.unordered_list #=> \"<ul>\\n<li>Voluptatum aliquid tempora molestiae facilis non sed.</li>\\n<li>Nostrum omnis iste impedit voluptatum dolor.</li>\\n<li>Esse quidem et facere.</li>\\n</ul>\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "number = rand(1..10)\n\n        items = []\n        number.times do\n          items << \"<li>#{Faker::Lorem.sentence(word_count: 1)}</li>\""
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Hacker",
      "descriptions": [
        {
          "text": "Port of http://shinytoylabs.com/jargon/ Are you having trouble writing tech-savvy dialogue for your latest screenplay? Worry not! Hollywood-grade technical talk is ready to fill out any form where you need to look smart.\n<p>Port of <a href=\"http://shinytoylabs.com/jargon\">shinytoylabs.com/jargon</a>/ Are you having trouble writing tech-savvy dialogue for your latest screenplay? Worry not! Hollywood-grade technical talk is ready to fill out any form where you need to look smart.</p>\n"
        }
      ],
      "methods": [
        {
          "name": "abbreviation",
          "descriptions": [
            {
              "text": "Short technical abbreviations."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Hacker.abbreviation #=> \"RAM\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "hacker.abbreviation"
            }
          ]
        },
        {
          "name": "adjective",
          "descriptions": [
            {
              "text": "Hacker-centric adjectives."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Hacker.adjective #=> \"open-source\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "hacker.adjective"
            }
          ]
        },
        {
          "name": "ingverb",
          "descriptions": [
            {
              "text": "Produces a verb that ends with '-ing'."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Hacker.ingverb #=> \"synthesizing\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "hacker.ingverb"
            }
          ]
        },
        {
          "name": "noun",
          "descriptions": [
            {
              "text": "Only the best hacker-related nouns."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Hacker.noun #=> \"bandwidth\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "hacker.noun"
            }
          ]
        },
        {
          "name": "phrases",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "[\"If we #{verb} the #{noun}, we can get to the #{abbreviation} #{noun} through the #{adjective} #{abbreviation} #{noun}!\",\n         \"We need to #{verb} the #{adjective} #{abbreviation} #{noun}!\",\n         \"Try to #{verb} the #{abbreviation} #{noun}, maybe it will #{verb} the #{adjective} #{noun}!\",\n         \"You can't #{verb} the #{noun} without #{ingverb} the #{adjective} #{abbreviation} #{noun}!\",\n         \"Use the #{adjective} #{abbreviation} #{noun}, then you can #{verb} the #{adjective} #{noun}!\",\n         \"The #{abbreviation} #{noun} is down, #{verb} the #{adjective} #{noun} so we can #{verb} the #{abbreviation} #{noun}!\",\n         \"#{ingverb} the #{noun} won't do anything, we need to #{verb} the #{adjective} #{abbreviation} #{noun}!\".capitalize,\n         \"I'll #{verb} the #{adjective} #{abbreviation} #{noun}, that should #{noun} the #{abbreviation} #{noun}!\"]"
            }
          ]
        },
        {
          "name": "say_something_smart",
          "descriptions": [
            {
              "text": "Produces something smart."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Hacker.say_something_smart\n#=> \"Try to compress the SQL interface, maybe it will program the back-end hard drive!\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "sample(phrases)"
            }
          ]
        },
        {
          "name": "verb",
          "descriptions": [
            {
              "text": "Actions that hackers take."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Hacker.verb #=> \"bypass\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "hacker.verb"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Hipster",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "paragraph",
          "descriptions": [
            {
              "text": "Produces a random hipster paragraph."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "sentence_count",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the number of sentences in the paragraph</p>\n"
                }
              ]
            },
            {
              "name": "supplemental",
              "type": "Boolean",
              "descriptions": [
                {
                  "text": "\n<p>Specifies if the words are supplemental</p>\n"
                }
              ]
            },
            {
              "name": "random_sentences_to_add",
              "type": "Boolean",
              "default": "3",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the number of random sentences to add</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Hipster.paragraph #=> \"Migas fingerstache pbr&b tofu. Polaroid distillery typewriter echo tofu actually. Slow-carb fanny pack pickled direct trade scenester mlkshk plaid. Banjo venmo chambray cold-pressed typewriter. Fap skateboard intelligentsia.\"\nFaker::Hipster.paragraph(sentence_count: 2) #=> \"Yolo tilde farm-to-table hashtag. Lomo kitsch disrupt forage +1.\"\nFaker::Hipster.paragraph(sentence_count: 2, supplemental: true) #=> \"Typewriter iste ut viral kombucha voluptatem. Sint voluptates saepe. Direct trade irony chia excepturi yuccie. Biodiesel esse listicle et quam suscipit.\"\nFaker::Hipster.paragraph(sentence_count: 2, supplemental: false, random_sentences_to_add: 4) #=> \"Selvage vhs chartreuse narwhal vinegar. Authentic vinyl truffaut carry vhs pop-up. Hammock everyday iphone locavore thundercats bitters vegan goth. Fashion axe banh mi shoreditch whatever artisan.\"\nFaker::Hipster.paragraph(sentence_count: 2, supplemental: true, random_sentences_to_add: 4) #=> \"Deep v gluten-free unde waistcoat aperiam migas voluptas dolorum. Aut drinking illo sustainable sapiente. Direct trade fanny pack kale chips ennui semiotics.\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(sentence_count: 3, supplemental: false, random_sentences_to_add: 3)\n        sentences(number: resolve(sentence_count) + rand(random_sentences_to_add.to_i).to_i, supplemental: supplemental).join(' ')"
            }
          ]
        },
        {
          "name": "paragraph_by_chars",
          "descriptions": [
            {
              "text": "Produces a random hipster paragraph by characters."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "characters",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the number of characters in the paragraph</p>\n"
                }
              ]
            },
            {
              "name": "supplemental",
              "type": "Boolean",
              "default": "false",
              "descriptions": [
                {
                  "text": "\n<p>Specifies if the words are supplemental</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Hipster.paragraph_by_chars #=> \"Truffaut stumptown trust fund 8-bit messenger bag portland. Meh kombucha selvage swag biodiesel. Lomo kinfolk jean shorts asymmetrical diy. Wayfarers portland twee stumptown. Wes anderson biodiesel retro 90's pabst. Diy echo 90's mixtape semiotics. Cornho.\"\nFaker::Hipster.paragraph_by_chars(characters: 256, supplemental: false) #=> \"Hella kogi blog narwhal sartorial selfies mustache schlitz. Bespoke normcore kitsch cred hella fixie. Park aesthetic fixie migas twee. Cliche mustache brunch tumblr fixie godard. Drinking pop-up synth hoodie dreamcatcher typewriter. Kitsch biodiesel green.\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(characters: 256, supplemental: false)\n        paragraph = paragraph(sentence_count: 3, supplemental: supplemental)\n\n        paragraph += \" #{paragraph(sentence_count: 3, supplemental: supplemental)}\" while paragraph.length < characters\n\n        \"#{paragraph[0...characters - 1]}.\""
            }
          ]
        },
        {
          "name": "paragraphs",
          "descriptions": [
            {
              "text": "Produces random hipster paragraphs."
            }
          ],
          "return_type": "Array<String>",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "number",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the number of paragraphs</p>\n"
                }
              ]
            },
            {
              "name": "supplemental",
              "type": "Boolean",
              "default": "false",
              "descriptions": [
                {
                  "text": "\n<p>Specifies if the words are supplemental</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Hipster.paragraphs #=> [\"Tilde microdosing blog cliche meggings. Intelligentsia five dollar toast forage yuccie. Master kitsch knausgaard. Try-hard everyday trust fund mumblecore.\", \"Normcore viral pickled. Listicle humblebrag swag tote bag. Taxidermy street hammock neutra butcher cred kale chips. Blog portland humblebrag trust fund irony.\", \"Single-origin coffee fixie cleanse tofu xoxo. Post-ironic tote bag ramps gluten-free locavore mumblecore hammock. Umami loko twee. Ugh kitsch before they sold out.\"]\nFaker::Hipster.paragraphs(number: 1) #=> [\"Skateboard cronut synth +1 fashion axe. Pop-up polaroid skateboard asymmetrical. Ennui fingerstache shoreditch before they sold out. Tattooed pitchfork ramps. Photo booth yr messenger bag raw denim bespoke locavore lomo synth.\"]\nFaker::Hipster.paragraphs(number: 1, supplemental: true) #=> [\"Quae direct trade pbr&b quo taxidermy autem loko. Umami quas ratione migas cardigan sriracha minima. Tenetur perspiciatis pickled sed eum doloribus truffaut. Excepturi dreamcatcher meditation.\"]"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(number: 3, supplemental: false)\n        [].tap do |paragraphs|\n          1.upto(resolve(number)) do\n            paragraphs << paragraph(sentence_count: 3, supplemental: supplemental)"
            }
          ]
        },
        {
          "name": "sentence",
          "descriptions": [
            {
              "text": "Produces a random hipster sentence."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "word_count",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the number of words in the sentence</p>\n"
                }
              ]
            },
            {
              "name": "supplemental",
              "type": "Boolean",
              "descriptions": [
                {
                  "text": "\n<p>Specifies if the words are supplemental</p>\n"
                }
              ]
            },
            {
              "name": "random_words_to_add",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the number of random words to add</p>\n"
                }
              ]
            },
            {
              "name": "open_compounds_allowed",
              "type": "Boolean",
              "default": "true",
              "descriptions": [
                {
                  "text": "\n<p>Specifies if the generated sentence can contain words having additional spaces</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Hipster.sentence #=> \"Park iphone leggings put a bird on it.\"\nFaker::Hipster.sentence(word_count: 3) #=> \"Pour-over swag godard.\"\nFaker::Hipster.sentence(word_count: 3, supplemental: true) #=> \"Beard laboriosam sequi celiac.\"\nFaker::Hipster.sentence(word_count: 3, supplemental: false, random_words_to_add: 4) #=> \"Bitters retro mustache aesthetic biodiesel 8-bit.\"\nFaker::Hipster.sentence(word_count: 3, supplemental: true, random_words_to_add: 4) #=> \"Occaecati deleniti messenger bag meh crucifix autem.\"\nFaker::Hipster.sentence(word_count: 3, supplemental: true, random_words_to_add: 0, open_compounds_allowed: true) #=> \"Kale chips nihil eos.\"\nFaker::Hipster.sentence(word_count: 3, supplemental: true, random_words_to_add: 0, open_compounds_allowed: false) #=> \"Dreamcatcher umami fixie.\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(word_count: 4, supplemental: false, random_words_to_add: 6, open_compounds_allowed: true)\n        \"#{words(number: word_count + rand(random_words_to_add.to_i).to_i, supplemental: supplemental, spaces_allowed: open_compounds_allowed).join(' ').capitalize}.\""
            }
          ]
        },
        {
          "name": "sentences",
          "descriptions": [
            {
              "text": "Produces random hipster sentences."
            }
          ],
          "return_type": "Array<String>",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "number",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the number of sentences returned</p>\n"
                }
              ]
            },
            {
              "name": "supplemental",
              "type": "Boolean",
              "default": "false",
              "descriptions": [
                {
                  "text": "\n<p>Specifies if the words are supplemental</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Hipster.sentences #=> [\"Godard pitchfork vinegar chillwave everyday 90's whatever.\", \"Pour-over artisan distillery street waistcoat.\", \"Salvia yr leggings franzen blue bottle.\"]\nFaker::Hipster.sentences(number: 1) #=> [\"Before they sold out pinterest venmo umami try-hard ugh hoodie artisan.\"]\nFaker::Hipster.sentences(number: 1, supplemental: true) #=> [\"Et sustainable optio aesthetic et.\"]"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(number: 3, supplemental: false)\n        [].tap do |sentences|\n          1.upto(resolve(number)) do\n            sentences << sentence(word_count: 3, supplemental: supplemental)"
            }
          ]
        },
        {
          "name": "word",
          "descriptions": [
            {
              "text": "Produces a random hipster word."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Hipster.word #=> \"irony\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "random_word = sample(translate('faker.hipster.words'))\n        random_word =~ /\\s/ ? word : random_word"
            }
          ]
        },
        {
          "name": "words",
          "descriptions": [
            {
              "text": "Produces a random hipster word."
            }
          ],
          "return_type": "Array<String>",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "number",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the number of words returned</p>\n"
                }
              ]
            },
            {
              "name": "supplemental",
              "type": "Boolean",
              "descriptions": [
                {
                  "text": "\n<p>Specifies if the words are supplemental</p>\n"
                }
              ]
            },
            {
              "name": "spaces_allowed",
              "type": "Boolean",
              "default": "false",
              "descriptions": [
                {
                  "text": "\n<p>Specifies if the words may contain spaces</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Hipster.words #=> [\"pug\", \"pitchfork\", \"chia\"]\nFaker::Hipster.words(number: 4) #=> [\"ugh\", \"cardigan\", \"poutine\", \"stumptown\"]\nFaker::Hipster.words(number: 4, supplemental: true) #=> [\"iste\", \"seitan\", \"normcore\", \"provident\"]\nFaker::Hipster.words(number: 4, supplemental: true, spaces_allowed: true) #=> [\"qui\", \"magni\", \"craft beer\", \"est\"]"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(number: 3, supplemental: false, spaces_allowed: false)\n        resolved_num = resolve(number)\n        word_list = (\n          translate('faker.hipster.words') +\n          (supplemental ? translate('faker.lorem.words') : [])\n        )\n        word_list *= ((resolved_num / word_list.length) + 1)\n\n        return shuffle(word_list)[0, resolved_num] if spaces_allowed\n\n        words = shuffle(word_list)[0, resolved_num]\n        words.each_with_index { |w, i| words[i] = word if w =~ /\\s/ }"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Hobby",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "activity",
          "descriptions": [
            {
              "text": "Retrieves a typical hobby activity."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Hobby.activity #=> \"Cooking\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "hobby.activity"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "House",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "furniture",
          "descriptions": [
            {
              "text": "Produces the name of a piece of furniture."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::House.furniture #=> \"chair\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "house.furniture"
            }
          ]
        },
        {
          "name": "room",
          "descriptions": [
            {
              "text": "Produces the name of a room in a house."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::House.room #=> \"kitchen\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "house.rooms"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "IDNumber",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "_translate",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "id_number.#{key}"
            }
          ]
        },
        {
          "name": "brazilian_citizen_number",
          "descriptions": [
            {
              "text": "Produces a random Brazilian Citizen Number (CPF)."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "formatted",
              "type": "Boolean",
              "default": "false",
              "descriptions": [
                {
                  "text": "\n<p>Specifies if the number is formatted with dividers.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::IDNumber.brazilian_citizen_number #=> \"53540542221\"\nFaker::IDNumber.brazilian_citizen_number(formatted: true) #=> \"535.405.422-21\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(formatted: false)\n        digits = Faker::Number.leading_zero_number(digits: 9) until digits&.match(/(\\d)((?!\\1)\\d)+/)\n        first_digit = brazilian_citizen_number_checksum_digit(digits)\n        second_digit = brazilian_citizen_number_checksum_digit(digits + first_digit)\n        number = [digits, first_digit, second_digit].join\n        formatted ? format('%s.%s.%s-%s', *number.scan(/\\d{2,3}/).flatten) : number"
            }
          ]
        },
        {
          "name": "brazilian_citizen_number_checksum_digit",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(digits)\n        checksum = brazilian_document_checksum(digits)\n        brazilian_document_digit(checksum)"
            }
          ]
        },
        {
          "name": "brazilian_citizen_number_digit",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(remainder)\n        remainder == 10 ? '0' : remainder.to_s"
            }
          ]
        },
        {
          "name": "brazilian_document_checksum",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(digits)\n        digits.chars.each_with_index.inject(0) do |acc, (digit, i)|\n          acc + digit.to_i * (digits.size + 1 - i)\n        end * 10"
            }
          ]
        },
        {
          "name": "brazilian_document_digit",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(checksum, id: false)\n        remainder = checksum % 11\n        id ? brazilian_id_digit(remainder) : brazilian_citizen_number_digit(remainder)"
            }
          ]
        },
        {
          "name": "brazilian_id",
          "descriptions": [
            {
              "text": "Produces a random Brazilian ID Number (RG)."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "formatted",
              "type": "Boolean",
              "default": "false",
              "descriptions": [
                {
                  "text": "\n<p>Specifies if the number is formatted with dividers.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::IDNumber.brazilian_id #=> \"493054029\"\nFaker::IDNumber.brazilian_id(formatted: true) #=> \"49.305.402-9\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(formatted: false)\n        digits = Faker::Number.between(to: BRAZILIAN_ID_FROM, from: BRAZILIAN_ID_TO).to_s\n        check_digit = brazilian_id_checksum_digit(digits)\n        number = [digits, check_digit].join\n        formatted ? format('%s.%s.%s-%s', *number.scan(BRAZILIAN_ID_FORMAT).flatten) : number"
            }
          ]
        },
        {
          "name": "brazilian_id_checksum_digit",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(digits)\n        checksum = brazilian_document_checksum(digits)\n        brazilian_document_digit(checksum, id: true)"
            }
          ]
        },
        {
          "name": "brazilian_id_digit",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(remainder)\n        subtraction = 11 - remainder.to_i\n        digits = { 10 => 'X', 11 => '0' }\n        digits.include?(subtraction) ? digits[subtraction] : subtraction.to_s"
            }
          ]
        },
        {
          "name": "chilean_id",
          "descriptions": [
            {
              "text": "Produces a random Chilean ID (Rut with 8 digits)."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::IDNumber.chilean_id #=> \"15620613-K\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "digits = Faker::Number.number(digits: 8)\n        verification_code = chilean_verification_code(digits)\n\n        \"#{digits}-#{verification_code}\""
            }
          ]
        },
        {
          "name": "chilean_verification_code",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(digits)\n        # First digit is multiplied by 3, second by 2, and so on\n        multiplication_rule = [3, 2, 7, 6, 5, 4, 3, 2]\n        digits_splitted = digits.to_s.chars.map(&:to_i)\n\n        sum = digits_splitted.map.with_index { |digit, index| digit * multiplication_rule[index] }.reduce(:+)\n\n        modulo = sum.modulo(CHILEAN_MODULO)\n        difference = CHILEAN_MODULO - modulo\n\n        case difference\n        when 0..9\n          difference\n        when 10\n          'K'\n        when 11\n          0"
            }
          ]
        },
        {
          "name": "croatian_id",
          "descriptions": [
            {
              "text": "Produces a random Croatian ID number (OIB)."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "international",
              "type": "Boolean",
              "default": "false",
              "descriptions": [
                {
                  "text": "\n<p>Specifies whether to add international prefix.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::IDNumber.croatian_id #=> \"88467617508\"\nFaker::IDNumber.croatian_id(international: true) #=> \"HR88467617508\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(international: false)\n        prefix = international ? 'HR' : ''\n        digits = Faker::Number.number(digits: 10).to_s\n        checksum_digit = croatian_id_checksum_digit(digits)\n\n        \"#{prefix}#{digits}#{checksum_digit}\""
            }
          ]
        },
        {
          "name": "croatian_id_checksum_digit",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(digits)\n        control_sum = 10\n\n        digits.chars.map(&:to_i).each do |digit|\n          control_sum += digit\n          control_sum %= 10\n          control_sum = 10 if control_sum.zero?\n          control_sum *= 2\n          control_sum %= 11"
            }
          ]
        },
        {
          "name": "danish_control_digits",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(birthday)\n        year = birthday.year\n        century = year.to_s.slice(0, 2).to_i\n        year_digits = year.to_s.slice(2, 2).to_i\n        error_message = \"Invalid birthday: #{birthday}. Danish CPR numbers are only distributed to persons born between 1858 and 2057.\"\n\n        case century\n        when 18\n          # If 5, 6, 7 or 8 and the year numbers are greater than or equal to 58, you were born in 18XX.\n          case year_digits\n          when 58..99\n            [5, 6, 7, 8]\n          else\n            raise ArgumentError, error_message"
            }
          ]
        },
        {
          "name": "danish_id_number",
          "descriptions": [
            {
              "text": "Produces a random Danish ID Number (CPR number).\n                            <p>CPR number is 10 digits. Digit 1-6 is the birthdate (format “DDMMYY”). Digit 7-10 is a sequence number. Digit 7 digit is a control digit that determines the century of birth. Digit 10 reveals the gender: # even is female, odd is male.</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "formatted",
              "type": "Boolean",
              "descriptions": [
                {
                  "text": "\n<p>Specifies if the number is formatted with dividers.</p>\n"
                }
              ]
            },
            {
              "name": "birthday",
              "type": "Date",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the birthday for the id number.</p>\n"
                }
              ]
            },
            {
              "name": "gender",
              "type": "Symbol",
              "default": "nil",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the gender for the id number. Must be one :male or :female if present.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::IDNumber.danish_id_number #=> \"0503909980\"\nFaker::IDNumber.danish_id_number(formatted: true) #=> \"050390-9980\"\nFaker::IDNumber.danish_id_number(birthday: Date.new(1990, 3, 5)) #=> \"0503909980\"\nFaker::IDNumber.danish_id_number(gender: :female) #=> \"0503909980\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(formatted: false, birthday: Faker::Date.birthday, gender: nil)\n        valid_control_digits = danish_control_digits(birthday)\n        control_digit = sample(valid_control_digits)\n        digits = (0..9).to_a\n        gender = gender.to_sym if gender.respond_to?(:to_sym)\n        gender_digit = case gender\n                       when nil\n                         sample(digits)\n                       when :male\n                         sample(digits.select(&:odd?))\n                       when :female\n                         sample(digits.select(&:even?))\n                       else\n                         raise ArgumentError, \"Invalid gender #{gender}. Must be one of male, female, or be omitted.\""
            }
          ]
        },
        {
          "name": "french_insee_number",
          "descriptions": [
            {
              "text": "Produces a random French social security number (INSEE number)."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::IDNumber.french_insee_number #=> \"53290236-H\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "num = [\n          [1, 2].sample(random: Faker::Config.random), # gender\n          Faker::Number.between(from: 0, to: 99).to_s.rjust(2, '0'), # year of birth\n          Faker::Number.between(from: 1, to: 12).to_s.rjust(2, '0'), # month of birth\n          Faker::Number.number(digits: 5), # place of birth\n          Faker::Number.number(digits: 3) # order number\n        ].join\n        mod = num.to_i % 97\n        check = (97 - mod).to_s.rjust(2, '0')\n        \"#{num}#{check}\""
            }
          ]
        },
        {
          "name": "invalid",
          "descriptions": [
            {
              "text": "Produces a random invalid US Social Security number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::IDNumber.invalid #=> \"311-72-0000\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "_translate('invalid')"
            }
          ]
        },
        {
          "name": "invalid_south_african_id_number",
          "descriptions": [
            {
              "text": "Produces a random invalid South African ID Number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::IDNumber.invalid_south_african_id_number #=> \"1642972065088\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "invalid_date_of_birth = [\n          Faker::Number.number(digits: 2),\n          Faker::Number.between(from: 13, to: 99),\n          Faker::Number.between(from: 32, to: 99)\n        ].map(&:to_s).join\n\n        id_number = [\n          invalid_date_of_birth,\n          Faker::Number.number(digits: 4),\n          ZA_CITIZENSHIP_DIGITS.sample(random: Faker::Config.random),\n          ZA_RACE_DIGIT\n        ].join\n\n        [id_number, south_african_id_checksum_digit(id_number)].join"
            }
          ]
        },
        {
          "name": "south_african_id_checksum_digit",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(id_number)\n        value_parts = id_number.chars\n        even_digits = value_parts\n                      .select\n                      .with_index { |_, i| (i + 1).even? }\n        odd_digits_without_last_character = value_parts[0...-1]\n                                            .select\n                                            .with_index { |_, i| (i + 1).odd? }\n\n        sum_of_odd_digits = odd_digits_without_last_character.map(&:to_i).reduce(:+)\n        even_digits_times_two = (even_digits.join.to_i * 2).to_s\n        sum_of_even_digits = even_digits_times_two.chars.map(&:to_i).reduce(:+)\n\n        total_sum = sum_of_odd_digits + sum_of_even_digits\n\n        ((10 - (total_sum % 10)) % 10).to_s"
            }
          ]
        },
        {
          "name": "spanish_citizen_number",
          "descriptions": [
            {
              "text": "Produces a random Spanish citizen identifier (DNI)."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::IDNumber.spanish_citizen_number #=> \"53290236-H\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "num = Faker::Number.number(digits: 8)\n        mod = num.to_i % 23\n        check = CHECKS[mod]\n        \"#{num}-#{check}\""
            }
          ]
        },
        {
          "name": "spanish_foreign_citizen_number",
          "descriptions": [
            {
              "text": "Produces a random Spanish foreign born citizen identifier (NIE)."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::IDNumber.spanish_foreign_citizen_number #=> \"Z-1600870-Y\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "code = 'XYZ'\n        digits = Faker::Number.number(digits: 7)\n        prefix = code[rand(code.length)]\n        prefix_val = 'XYZ'.index(prefix).to_s\n        mod = \"#{prefix_val}#{digits}\".to_i % 23\n        check = CHECKS[mod]\n        \"#{prefix}-#{digits}-#{check}\""
            }
          ]
        },
        {
          "name": "ssn_valid",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "generate(:string) do |g|\n          g.computed(name: :first) do\n            range = [1..665, 667..899].sample(random: Faker::Config.random)\n            n = Faker::Base.rand(range)\n            format('%03d', n)"
            }
          ]
        },
        {
          "name": "valid",
          "descriptions": [
            {
              "text": "Produces a random valid US Social Security number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::IDNumber.valid #=> \"552-56-3593\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "_translate('valid')"
            }
          ]
        },
        {
          "name": "valid_south_african_id_number",
          "descriptions": [
            {
              "text": "Produces a random valid South African ID Number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::IDNumber.south_african_id_number #=> \"8105128870184\"\nFaker::IDNumber.valid_south_african_id_number #=> \"8105128870184\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "id_number = [\n          Faker::Date.birthday.strftime('%y%m%d'),\n          Faker::Number.number(digits: 4),\n          ZA_CITIZENSHIP_DIGITS.sample(random: Faker::Config.random),\n          ZA_RACE_DIGIT\n        ].join\n\n        [id_number, south_african_id_checksum_digit(id_number)].join"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "IndustrySegments",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "industry",
          "descriptions": [
            {
              "text": "Produces the name of an industry."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::IndustrySegments.industry #=> \"Basic Materials\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "industry_segments.industry"
            }
          ]
        },
        {
          "name": "sector",
          "descriptions": [
            {
              "text": "Produces the name of a sector of an industry."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::IndustrySegments.sector #=> \"Industrial Metals & Mining\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "industry_segments.sector"
            }
          ]
        },
        {
          "name": "sub_sector",
          "descriptions": [
            {
              "text": "Produces the name of a subsector of an industry."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::IndustrySegments.industry #=> \"Basic Materials\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "industry_segments.sub_sector"
            }
          ]
        },
        {
          "name": "super_sector",
          "descriptions": [
            {
              "text": "Produces the name of a super-sector of an industry."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::IndustrySegments.super_sector #=> \"Basic Resources\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "industry_segments.super_sector"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Internet",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "base64",
          "descriptions": [
            {
              "text": "Produces a random string of alphabetic characters, (no digits).\n                            <p>Produces a random string of alphabetic characters, (no digits)</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "length",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>The length of the string to generate</p>\n"
                }
              ]
            },
            {
              "name": "padding",
              "type": "Boolean",
              "descriptions": [
                {
                  "text": "\n<p>Toggles if a final equal ‘=’ will be added.</p>\n"
                }
              ]
            },
            {
              "name": "urlsafe",
              "type": "Boolean",
              "default": "true",
              "descriptions": [
                {
                  "text": "\n<p>Toggles charset to ‘-’ and ‘_’ instead of ‘+’ and ‘/’.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Internet.base64\n#=> \"r_hbZ2DSD-ZACzZT\""
            },
            {
              "description": "",
              "code": "Faker::Internet.base64(length: 4, padding: true, urlsafe: false)\n#=> \"x1/R=\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(length: 16, padding: false, urlsafe: true)\n        char_range = [\n          Array('0'..'9'),\n          Array('A'..'Z'),\n          Array('a'..'z'),\n          urlsafe ? %w[- _] : %w[+ /]\n        ].flatten\n        s = Array.new(length) { sample(char_range) }.join\n        s += '=' if padding\n        s"
            }
          ]
        },
        {
          "name": "bot_user_agent",
          "descriptions": [
            {
              "text": "Generate Web Crawler's user agents.\n                            <p>Generate Web Crawler’s user agents</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "vendor",
              "type": "String",
              "default": "nil",
              "descriptions": [
                {
                  "text": "\n<p>Name of vendor, supported vendors are googlebot, bingbot, duckduckbot, baiduspider, yandexbot</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Internet.bot_user_agent                        #=> \"Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)\"\nFaker::Internet.bot_user_agent(vendor: 'googlebot')   #=> \"Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko; compatible; Googlebot/2.1; +http://www.google.com/bot.html) Chrome/99.0.4844.84 Safari/537.36\"\nFaker::Internet.bot_user_agent(vendor: 'bingbot')     #=> \"Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko; compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm) Chrome/86.0.4240.68 Safari/537.36 Edg/86.0.622.31\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(vendor: nil)\n        agent_hash = translate('faker.internet.bot_user_agent')\n        agents = vendor.respond_to?(:to_sym) && agent_hash[vendor.to_sym] || agent_hash[sample(agent_hash.keys)]\n        sample(agents)"
            }
          ]
        },
        {
          "name": "construct_email",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(local_part, domain_name)\n        [local_part, domain_name].join('@')"
            }
          ]
        },
        {
          "name": "device_token",
          "descriptions": [
            {
              "text": "Generates random token.\n                            <p>Generates random token</p>\n\n                            <p>@<a href=\"String\">return</a></p>\n                        "
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Internet.device_token  #=> \"749f535671cf6b34d8e794d212d00c703b96274e07161b18b082d0d70ef1052f\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "shuffle(rand(16**64).to_s(16).rjust(64, '0').chars.to_a).join"
            }
          ]
        },
        {
          "name": "domain_name",
          "descriptions": [
            {
              "text": "Returns the domain name.\n                            <p>Returns the domain name</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "subdomain",
              "type": "Bool",
              "descriptions": [
                {
                  "text": "\n<p>If true passed adds a subdomain in response</p>\n"
                }
              ]
            },
            {
              "name": "domain",
              "type": "String",
              "default": "nil",
              "descriptions": [
                {
                  "text": ""
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Internet.domain_name                                                   #=> \"altenwerth-gerhold.example\"\nFaker::Internet.domain_name(subdomain: true)                                  #=> \"metz.mclaughlin-brekke.test\"\nFaker::Internet.domain_name(subdomain: true, domain: 'faker')                 #=> \"foo.faker.test\"\nFaker::Internet.domain_name(domain: 'faker-ruby.org')                         #=> \"faker-ruby.org\"\nFaker::Internet.domain_name(subdomain: true, domain: 'faker-ruby.org')        #=> \"foo.faker-ruby.org\"\nFaker::Internet.domain_name(subdomain: true, domain: 'faker.faker-ruby.org')  #=> \"faker.faker-ruby.org\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(subdomain: false, domain: nil)\n        with_locale(:en) do\n          if domain\n            domain\n              .split('.')\n              .map { |domain_part| Char.prepare(domain_part) }\n              .tap do |domain_elements|\n                if domain_elements.length < 2\n                  domain_elements << domain_suffix(safe: true)"
            }
          ]
        },
        {
          "name": "domain_suffix",
          "descriptions": [
            {
              "text": "Returns the domain suffix e.g.\n                            <p>com, org, co, biz, info etc.</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Internet.domain_suffix              #=> \"com\"\nFaker::Internet.domain_suffix              #=> \"biz\"\nFaker::Internet.domain_suffix(safe: true)  #=> \"example\"\nFaker::Internet.domain_suffix(safe: true)  #=> \"test\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "internet.safe_domain_suffix"
            }
          ]
        },
        {
          "name": "domain_word",
          "descriptions": [
            {
              "text": "Returns the domain word for internet.\n                            <p>Returns the domain word for internet</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Internet.domain_word   #=> \"senger\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "with_locale(:en) { Char.prepare(Company.name.split.first) }"
            }
          ]
        },
        {
          "name": "email",
          "descriptions": [
            {
              "text": "Returns the email address.\n                            <p>Returns the email address</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "name",
              "type": "String",
              "descriptions": [
                {
                  "text": ""
                }
              ]
            },
            {
              "name": "separators",
              "type": "Array<String>",
              "descriptions": [
                {
                  "text": ""
                }
              ]
            },
            {
              "name": "domain",
              "type": "String",
              "default": "nil",
              "descriptions": [
                {
                  "text": ""
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Internet.email                                                           #=> \"renee@zieme.test\"\nFaker::Internet.email(name: 'smith')                                            #=> \"smith@bergnaum.test\"\nFaker::Internet.email(name: 'sam smith', separators: ['-'])                     #=> \"smith-sam@tromp.example\"\nFaker::Internet.email(name: 'sam smith', separators: ['-'], domain: 'test')     #=> \"sam-smith@test.example\"\nFaker::Internet.email(domain: 'gmail.com')                                      #=> \"foo@gmail.com\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(name: nil, separators: nil, domain: nil)\n        local_part = if separators\n                       username(specifier: name, separators: separators)\n                     else\n                       username(specifier: name)"
            }
          ]
        },
        {
          "name": "fix_umlauts",
          "descriptions": [
            {
              "text": "Fixes ä, ö, ü, ß characters in string passed with ae, oe, ue, ss resp."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "string",
              "type": "String",
              "default": "''",
              "descriptions": [
                {
                  "text": ""
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Internet.fix_umlauts                     #=> \"\"\nFaker::Internet.fix_umlauts(string: 'faker')    #=> \"faker\"\nFaker::Internet.fix_umlauts(string: 'faküer')   #=> \"fakueer\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(string: '')\n        Char.fix_umlauts(string)"
            }
          ]
        },
        {
          "name": "ip_v4_address",
          "descriptions": [
            {
              "text": "Returns the IPv4 address.\n                            <p>Returns the IPv4 address</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Internet.ip_v4_address   #=> \"97.117.128.93\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "[rand_in_range(0, 255), rand_in_range(0, 255),\n         rand_in_range(0, 255), rand_in_range(0, 255)].join('.')"
            }
          ]
        },
        {
          "name": "ip_v4_cidr",
          "descriptions": [
            {
              "text": "Returns Ipv4 address with CIDR, range from 1 to 31.\n                            <p>Returns Ipv4 address with CIDR, range from 1 to 31</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Internet.ip_v4_cidr  #=> \"129.162.99.74/16\"\nFaker::Internet.ip_v4_cidr  #=> \"129.162.99.74/24\""
            }
          ],
          "implementations": [
            {
              "type": "Expression",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "#{ip_v4_address}/#{rand(1..31)}"
            }
          ]
        },
        {
          "name": "ip_v6_address",
          "descriptions": [
            {
              "text": "Returns Ipv6 address.\n                            <p>Returns Ipv6 address</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Internet.ip_v6_address   #=> \"7754:76d4:c7aa:7646:ea68:1abb:4055:4343\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(1..8).map { rand(65_536).to_s(16) }.join(':')"
            }
          ]
        },
        {
          "name": "ip_v6_cidr",
          "descriptions": [
            {
              "text": "Returns Ipv6 address with CIDR, range between 1 to 127.\n                            <p>Returns Ipv6 address with CIDR, range between 1 to 127</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Internet.ip_v6_cidr  #=> \"beca:9b99:4bb6:9712:af2f:516f:8507:96e1/99\""
            }
          ],
          "implementations": [
            {
              "type": "Expression",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "#{ip_v6_address}/#{rand(1..127)}"
            }
          ]
        },
        {
          "name": "mac_address",
          "descriptions": [
            {
              "text": "Returns the MAC address.\n                            <p>Returns the MAC address</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Internet.mac_address                   #=> \"74:d0:c9:22:95:12\"\nFaker::Internet.mac_address(prefix: 'a')      #=> \"0a:91:ce:24:89:3b\"\nFaker::Internet.mac_address(prefix: 'aa')     #=> \"aa:38:a0:3e:e8:41\"\nFaker::Internet.mac_address(prefix: 'aa:44')  #=> \"aa:44:30:88:6e:95\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(prefix: '')\n        prefix_digits = prefix.split(':').map { |d| d.to_i(16) }\n        address_digits = Array.new((6 - prefix_digits.size)) { rand(256) }\n        (prefix_digits + address_digits).map { |d| format('%02x', d) }.join(':')"
            }
          ]
        },
        {
          "name": "password",
          "descriptions": [
            {
              "text": "Produces a randomized string of characters suitable for passwords.\n                            <p>Produces a randomized string of characters suitable for passwords</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "min_length",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>The minimum length of the password</p>\n"
                }
              ]
            },
            {
              "name": "max_length",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>The maximum length of the password</p>\n"
                }
              ]
            },
            {
              "name": "mix_case",
              "type": "Boolean",
              "descriptions": [
                {
                  "text": "\n<p>Toggles if uppercased letters are allowed. If true, at least one will be added.</p>\n"
                }
              ]
            },
            {
              "name": "special_characters",
              "type": "Boolean",
              "default": "false",
              "descriptions": [
                {
                  "text": "\n<p>Toggles if special characters are allowed. If true, at least one will be added.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Internet.password #=> \"Vg5mSvY1UeRg7\""
            },
            {
              "description": "",
              "code": "Faker::Internet.password(min_length: 8) #=> \"YfGjIk0hGzDqS0\""
            },
            {
              "description": "",
              "code": "Faker::Internet.password(min_length: 10, max_length: 20) #=> \"EoC9ShWd1hWq4vBgFw\""
            },
            {
              "description": "",
              "code": "Faker::Internet.password(min_length: 10, max_length: 20, mix_case: true) #=> \"3k5qS15aNmG\""
            },
            {
              "description": "",
              "code": "Faker::Internet.password(min_length: 10, max_length: 20, mix_case: true, special_characters: true) #=> \"*%NkOnJsH4\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(min_length: 8, max_length: 16, mix_case: true, special_characters: false)\n        raise ArgumentError, 'min_length and max_length must be greater than or equal to one' if min_length < 1 || max_length < 1\n        raise ArgumentError, 'min_length must be smaller than or equal to max_length' unless min_length <= max_length\n\n        character_types = []\n        required_min_length = 0\n\n        if mix_case\n          character_types << :mix_case\n          required_min_length += 2"
            }
          ]
        },
        {
          "name": "private_ip_v4_address",
          "descriptions": [
            {
              "text": "Returns the private IPv4 address.\n                            <p>Returns the private IPv4 address</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Internet.private_ip_v4_address   #=> \"127.120.80.42\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "sample(PRIVATE_IPV4_ADDRESS_RANGES).map { |range| rand(range) }.join('.')"
            }
          ]
        },
        {
          "name": "private_net_checker",
          "descriptions": [
            {
              "text": "Returns lambda to check if address passed is private or not.\n                            <p>Returns lambda to check if address passed is private or not</p>\n                        "
            }
          ],
          "return_type": "Lambda",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Internet.private_net_checker.call(\"127.120.80.42\")   #=> true\nFaker::Internet.private_net_checker.call(\"148.120.80.42\")   #=> false"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "->(addr) { private_nets_regex.any? { |net| net =~ addr } }"
            }
          ]
        },
        {
          "name": "private_nets_regex",
          "descriptions": [
            {
              "text": "Returns the private network regular expressions.\n                            <p>Returns the private network regular expressions</p>\n                        "
            }
          ],
          "return_type": "Array<String>",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Internet.private_nets_regex  #=> [/^10\\./, /^100\\.(6[4-9]|[7-9]\\d|1[0-1]\\d|12[0-7])\\./, /^127\\./, /^169\\.254\\./, /^172\\.(1[6-9]|2\\d|3[0-1])\\./, /^192\\.0\\.0\\./, /^192\\.168\\./, /^198\\.(1[8-9])\\./]"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "[\n          /^10\\./,                                       # 10.0.0.0    - 10.255.255.255\n          /^100\\.(6[4-9]|[7-9]\\d|1[0-1]\\d|12[0-7])\\./,   # 100.64.0.0  - 100.127.255.255\n          /^127\\./,                                      # 127.0.0.0   - 127.255.255.255\n          /^169\\.254\\./,                                 # 169.254.0.0 - 169.254.255.255\n          /^172\\.(1[6-9]|2\\d|3[0-1])\\./,                 # 172.16.0.0  - 172.31.255.255\n          /^192\\.0\\.0\\./,                                # 192.0.0.0   - 192.0.0.255\n          /^192\\.168\\./,                                 # 192.168.0.0 - 192.168.255.255\n          /^198\\.(1[8-9])\\./                             # 198.18.0.0  - 198.19.255.255\n        ]"
            }
          ]
        },
        {
          "name": "public_ip_v4_address",
          "descriptions": [
            {
              "text": "Returns the public IPv4 address.\n                            <p>Returns the public IPv4 address</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Internet.public_ip_v4_address   #=> \"127.120.80.42\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "addr = nil\n        loop do\n          addr = ip_v4_address\n          break unless reserved_net_checker[addr]"
            }
          ]
        },
        {
          "name": "reserved_net_checker",
          "descriptions": [
            {
              "text": "Returns lambda function to check address passed is reserved or not.\n                            <p>Returns lambda function to check address passed is reserved or not</p>\n                        "
            }
          ],
          "return_type": "Lambda",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Internet.reserved_net_checker.call('192.88.99.255')   #=> true\nFaker::Internet.reserved_net_checker.call('192.88.199.255')  #=> false"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "->(addr) { (private_nets_regex + reserved_nets_regex).any? { |net| net =~ addr } }"
            }
          ]
        },
        {
          "name": "reserved_nets_regex",
          "descriptions": [
            {
              "text": "Returns the reserved network regular expressions.\n                            <p>Returns the reserved network regular expressions</p>\n                        "
            }
          ],
          "return_type": "Array<String>",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Internet.reserved_nets_regex   #=> [/^0\\./, /^192\\.0\\.2\\./, /^192\\.88\\.99\\./, /^198\\.51\\.100\\./, /^203\\.0\\.113\\./, /^(22[4-9]|23\\d)\\./, /^(24\\d|25[0-5])\\./]"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "[\n          /^0\\./,                 # 0.0.0.0      - 0.255.255.255\n          /^192\\.0\\.2\\./,         # 192.0.2.0    - 192.0.2.255\n          /^192\\.88\\.99\\./,       # 192.88.99.0  - 192.88.99.255\n          /^198\\.51\\.100\\./,      # 198.51.100.0 - 198.51.100.255\n          /^203\\.0\\.113\\./,       # 203.0.113.0  - 203.0.113.255\n          /^(22[4-9]|23\\d)\\./,    # 224.0.0.0    - 239.255.255.255\n          /^(24\\d|25[0-5])\\./     # 240.0.0.0    - 255.255.255.254  and  255.255.255.255\n        ]"
            }
          ]
        },
        {
          "name": "sanitize_email_local_part",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(local_part)\n        char_range = [\n          Array('0'..'9'),\n          Array('A'..'Z'),\n          Array('a'..'z'),\n          \"!#$%&'*+-/=?^_`{|}~.\".chars\n        ].flatten\n\n        local_part.chars.map do |char|\n          char_range.include?(char) ? char : '#'\n        end.join"
            }
          ]
        },
        {
          "name": "slug",
          "descriptions": [
            {
              "text": "Returns unique string in URL.\n                            <p>Returns unique string in URL</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "words",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>Comma or period separated words list</p>\n"
                }
              ]
            },
            {
              "name": "glue",
              "type": "String",
              "default": "nil",
              "descriptions": [
                {
                  "text": "\n<p>Separator to add between words passed, default used are ‘-’ or ‘_’</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Internet.slug                                    #=> \"repudiandae-sed\"\nFaker::Internet.slug(words: 'test, faker')              #=> \"test-faker\"\nFaker::Internet.slug(words: 'test. faker')              #=> \"test-faker\"\nFaker::Internet.slug(words: 'test. faker', glue: '$')   #=> \"test$faker\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(words: nil, glue: nil)\n        glue ||= sample(%w[- _])\n        return words.delete(',.').gsub(' ', glue).downcase unless words.nil?\n\n        sample(translate('faker.internet.slug'), 2).join(glue)"
            }
          ]
        },
        {
          "name": "url",
          "descriptions": [
            {
              "text": "Returns URL.\n                            <p>Returns URL</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "host",
              "type": "String",
              "descriptions": [
                {
                  "text": ""
                }
              ]
            },
            {
              "name": "path",
              "type": "String",
              "descriptions": [
                {
                  "text": ""
                }
              ]
            },
            {
              "name": "scheme",
              "type": "String",
              "default": "'http'",
              "descriptions": [
                {
                  "text": ""
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Internet.url                                                           #=> \"http://treutel.test/demarcus\"\nFaker::Internet.url(host: 'faker')                                            #=> \"http://faker/shad\"\nFaker::Internet.url(host: 'faker', path: '/docs')                             #=> \"http://faker/docs\"\nFaker::Internet.url(host: 'faker', path: '/docs', scheme: 'https')            #=> \"https://faker/docs\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(host: domain_name, path: \"/#{username}\", scheme: 'http')\n        \"#{scheme}://#{host}#{path}\""
            }
          ]
        },
        {
          "name": "user",
          "descriptions": [
            {
              "text": "Produces a randomized hash of internet user details.\n                            <p>Produces a randomized hash of internet user details</p>\n                        "
            }
          ],
          "return_type": "hash",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Internet.user #=> { username: 'alexie', email: 'trudie@grant.test' }"
            },
            {
              "description": "",
              "code": "Faker::Internet.user('username', 'email', 'password') #=> { username: 'alexie', email: 'gayle@kohler.test', password: 'DtEf9P8wS31iMyC' }"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(*args)\n        user_hash = {}\n        args = %w[username email] if args.empty?\n        args.each { |arg| user_hash[:\"#{arg}\"] = send(arg) }\n        user_hash"
            }
          ]
        },
        {
          "name": "user_agent",
          "descriptions": [
            {
              "text": "Generates the random browser identifier.\n                            <p>Generates the random browser identifier</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "vendor",
              "type": "String",
              "default": "nil",
              "descriptions": [
                {
                  "text": "\n<p>Name of vendor, supported vendors are aol, chrome, firefox, internet_explorer, netscape, opera, safari</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Internet.user_agent                    #=> \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36\"\nFaker::Internet.user_agent(vendor: 'chrome')  #=> \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36\"\nFaker::Internet.user_agent(vendor: 'safari')  #=> \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 Safari/7046A194A\"\nFaker::Internet.user_agent(vendor: 'faker')   #=> \"Mozilla/5.0 (Windows; U; Win 9x 4.90; SG; rv:1.9.2.4) Gecko/20101104 Netscape/9.1.0285\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(vendor: nil)\n        agent_hash = translate('faker.internet.user_agent')\n        agents = vendor.respond_to?(:to_sym) && agent_hash[vendor.to_sym] || agent_hash[sample(agent_hash.keys)]\n        sample(agents)"
            }
          ]
        },
        {
          "name": "username",
          "descriptions": [
            {
              "text": "Returns the username.\n                            <p>Returns the username</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "specifier",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>When int value passed it returns the username longer than specifier. Max value can be 10^6</p>\n"
                }
              ]
            },
            {
              "name": "separators",
              "type": "Array<String>",
              "descriptions": [
                {
                  "text": ""
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Internet.username(specifier: 10)                     #=> \"lulu.goodwin\"\nFaker::Internet.username(specifier: 5..10)                  #=> \"morris\"\nFaker::Internet.username(specifier: 5..10)                  #=> \"berryberry\"\nFaker::Internet.username(specifier: 20, separators: ['_'])  #=> \"nikki_sawaynnikki_saway\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(specifier: nil, separators: %w[. _])\n        with_locale(:en) do\n          return shuffle(specifier.scan(/[[:word:]]+/)).join(sample(separators)).downcase if specifier.respond_to?(:scan)\n\n          case specifier\n          when Integer\n            # If specifier is Integer and has large value, Argument error exception is raised to overcome memory full error\n            raise ArgumentError, 'Given argument is too large' if specifier > 10**6\n\n            tries = 0 # Don't try forever in case we get something like 1_000_000.\n            result = nil\n            loop do\n              result = username(specifier: nil, separators: separators)\n              tries += 1\n              break unless result.length < specifier && tries < 7"
            }
          ]
        },
        {
          "name": "uuid",
          "descriptions": [
            {
              "text": "Generated universally unique identifier.\n                            <p>Generated universally unique identifier</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Internet.uuid  #=> \"8a6cdd40-6d78-4fdb-912b-190e3057197f\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "# borrowed from: https://github.com/ruby/ruby/blob/d48783bb0236db505fe1205d1d9822309de53a36/lib/securerandom.rb#L250\n        ary = Faker::Config.random.bytes(16).unpack('NnnnnN')\n        ary[2] = (ary[2] & 0x0fff) | 0x4000\n        ary[3] = (ary[3] & 0x3fff) | 0x8000\n        '%08x-%04x-%04x-%04x-%04x%08x' % ary # rubocop:disable Style/FormatString"
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "HTTP",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "status_code",
              "descriptions": [
                {
                  "text": "Produces an HTTP status code.\n                                <p>Produces an HTTP status code</p>\n                            "
                }
              ],
              "return_type": "Integer",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Internet::HTTP.status_code #=> 418"
                },
                {
                  "description": "",
                  "code": "Faker::Internet::HTTP.status_code(group: :information) #=> 102"
                },
                {
                  "description": "",
                  "code": "Faker::Internet::HTTP.status_code(group: :successful) #=> 200"
                },
                {
                  "description": "",
                  "code": "Faker::Internet::HTTP.status_code(group: :redirect) #=> 306"
                },
                {
                  "description": "",
                  "code": "Faker::Internet::HTTP.status_code(group: :client_error) #=> 451"
                },
                {
                  "description": "",
                  "code": "Faker::Internet::HTTP.status_code(group: :server_error) #=> 502"
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "(group: nil)\n          return STATUS_CODES[STATUS_CODES_GROUPS.sample].sample unless group\n\n          raise ArgumentError, 'Invalid HTTP status code group' unless STATUS_CODES_GROUPS.include?(group)\n\n          STATUS_CODES[group].sample"
                }
              ]
            }
          ],
          "classes": []
        }
      ]
    },
    {
      "name": "Invoice",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "amount_between",
          "descriptions": [
            {
              "text": "Produces a random amount between values with 2 decimals.\n                            <p>Produces a random amount between values with 2 decimals</p>\n                        "
            }
          ],
          "return_type": "Integer",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "from",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>Specifies lower limit.</p>\n"
                }
              ]
            },
            {
              "name": "to",
              "type": "Integer",
              "default": "0",
              "descriptions": [
                {
                  "text": "\n<p>Specifies upper limit.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Finance.amount_between #=> 0\nFaker::Finance.amount_between(0, 10) #=> 4.33"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(from: 0, to: 0)\n        Faker::Base.rand_in_range(from, to).round(2)"
            }
          ]
        },
        {
          "name": "calculate_weighted_sum",
          "descriptions": [
            {
              "text": "Calculates weighted sum.\n                            <p>Calculates weighted sum</p>\n\n                            <p>For example with 12345678, [1,2] Ref.num. 1 2 3 4 5 6 7 8 Multipl. 1 2 1 2 1 2 1 2 Total 1+ 4+ 3+ 8+ 5+1+2+ 7+1+6 = 38</p>\n                        "
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(base, weight_factors)\n        base.to_s.reverse.each_char.with_index.map do |digit, index|\n          digit.to_i * weight_factors.at(index % weight_factors.length)\n        end.reduce(:+) # reduce(:+) = sum() but with better ruby version support"
            }
          ]
        },
        {
          "name": "creditor_reference",
          "descriptions": [
            {
              "text": "Produces a random valid reference accoring to the International bank slip reference https://en.wikipedia.org/wiki/Creditor_Reference.\n                            <p>Produces a random valid reference accoring to the International bank slip reference <a href=\"https://en.wikipedia.org/wiki/Creditor_Reference\">en.wikipedia.org/wiki/Creditor_Reference</a></p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "ref",
              "type": "String",
              "default": "''",
              "descriptions": [
                {
                  "text": "\n<p>Specifies reference base.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Invoice.creditor_reference #=> \"RF34118592570724925498\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(ref: '')\n        ref = reference if ref.empty?\n\n        \"RF#{iban_checksum('RF', ref)}#{ref}\""
            }
          ]
        },
        {
          "name": "iban_checksum",
          "descriptions": [
            {
              "text": "Calculates the mandatory checksum in 3rd and 4th characters in IBAN format source: https://en.wikipedia.org/wiki/International_Bank_Account_Number#Validating_the_IBAN.\n                            <p>Calculates the mandatory checksum in 3rd and 4th characters in IBAN format source: <a href=\"https://en.wikipedia.org/wiki/International_Bank_Account_Number#Validating_the_IBAN\">en.wikipedia.org/wiki/International_Bank_Account_Number#Validating_the_IBAN</a></p>\n                        "
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(country_code, account)\n        # Converts letters to numbers according the iban rules, A=10..Z=35\n        account_to_number = \"#{account}#{country_code}00\".upcase.chars.map do |d|\n          d =~ /[A-Z]/ ? (d.ord - 55).to_s : d\n        end.join.to_i\n\n        # This is answer to (iban_to_num + checksum) % 97 == 1\n        checksum = (1 - account_to_number) % 97\n\n        # Use leftpad to make the size always to 2\n        checksum.to_s.rjust(2, '0')"
            }
          ]
        },
        {
          "name": "kidmod10",
          "descriptions": [
            {
              "text": "Norsk Modulus 10 - KIDMOD10.\n                            <p>Norsk Modulus 10 - KIDMOD10</p>\n                        "
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(base)\n        weighted_sum = calculate_weighted_sum(base, [1, 2])\n        mod10_remainder(weighted_sum)"
            }
          ]
        },
        {
          "name": "method_731",
          "descriptions": [
            {
              "text": "731 Method Source: https://wiki.xmldation.com/support/fk/finnish_reference_number.\n                            <p>731 Method Source: <a href=\"https://wiki.xmldation.com/support/fk/finnish_reference_number\">wiki.xmldation.com/support/fk/finnish_reference_number</a></p>\n                        "
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(base)\n        weighted_sum = calculate_weighted_sum(base, [7, 3, 1])\n        mod10_remainder(weighted_sum)"
            }
          ]
        },
        {
          "name": "mod10_remainder",
          "descriptions": [
            {
              "text": "MOD-10 - remainder.\n                            <p>MOD-10 - remainder</p>\n                        "
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(number)\n        -number % 10"
            }
          ]
        },
        {
          "name": "reference",
          "descriptions": [
            {
              "text": "Produces a random valid reference."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "ref",
              "type": "String",
              "default": "''",
              "descriptions": [
                {
                  "text": "\n<p>Specifies reference base.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Invoice.reference #=> \"45656646957845\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "data": "        pattern = fetch('invoice.reference.pattern')\r\n\r\n        ref = Base.regexify(/#{pattern}/) if ref.empty?\r\n\r\n        # If reference contains reserved '#' characters we need to calculate check_digits as well\r\n        check_digit_match = ref.match(/#+/)\r\n        if check_digit_match\r\n          # Get the method for selected language\r\n          check_digit_method = fetch('invoice.reference.check_digit_method')\r\n\r\n          # Calculate the check digit with matching method name\r\n          # Trim all '#' from the reference before calculating that\r\n          check_digit = send(check_digit_method, ref.tr('#', ''))\r\n\r\n          # Make sure that our check digit is as long as all of the '###' we found\r\n          check_digit = check_digit.to_s.rjust(check_digit_match[0].length, '0')\r\n\r\n          # Replace all of the\r\n          ref = ref.sub(check_digit_match[0], check_digit)\r\n        end\r\n\r\n        ref"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "JapaneseMedia",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [],
      "classes": [
        {
          "name": "Conan",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Conan."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::Conan.character #=> \"Conan Edogawa\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "conan.characters"
                }
              ]
            },
            {
              "name": "gadget",
              "descriptions": [
                {
                  "text": "Produces a gadget from Conan."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::Conan.gadget #=> \"Voice-Changing Bowtie\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "conan.gadgets"
                }
              ]
            },
            {
              "name": "vehicle",
              "descriptions": [
                {
                  "text": "Produces a vehicle from Conan."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::Conan.vehicle #=> \"Agasa's Volkswagen Beetle\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "conan.vehicles"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "CowboyBebop",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Cowboy Bebop."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::CowboyBebop.character #=> \"Spike Spiegel\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "cowboy_bebop.character"
                }
              ]
            },
            {
              "name": "episode",
              "descriptions": [
                {
                  "text": "Produces an episode from Cowboy Bebop."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::CowboyBebop.episode #=> \"Honky Tonk Women\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "cowboy_bebop.episode"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Cowboy Bebop."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::CowboyBebop.quote #=> \"Bang!!!\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "cowboy_bebop.quote"
                }
              ]
            },
            {
              "name": "song",
              "descriptions": [
                {
                  "text": "Produces a song title from Cowboy Bebop."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::CowboyBebop.songs #=> \"Live in Baghdad\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "cowboy_bebop.song"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Doraemon",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Doraemon."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::Doraemon.character #=> \"Nobita\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "doraemon.characters"
                }
              ]
            },
            {
              "name": "gadget",
              "descriptions": [
                {
                  "text": "Produces a gadget from Doraemon."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::Doraemon.gadget #=> \"Anywhere Door\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "doraemon.gadgets"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces a location from Doraemon."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::Doraemon.location #=> \"Tokyo\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "doraemon.locations"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "DragonBall",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces the name of a character from Dragon Ball."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::DragonBall.character #=> \"Goku\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "dragon_ball.characters"
                }
              ]
            },
            {
              "name": "planet",
              "descriptions": [
                {
                  "text": "Produces the name of a planet from Dragon Ball."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::DragonBall.planet #=> \"Namek\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "dragon_ball.planets"
                }
              ]
            },
            {
              "name": "race",
              "descriptions": [
                {
                  "text": "Produces the name of a race from Dragon Ball."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Games::DragonBall.race #=> \"Saiyan\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "dragon_ball.races"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "FmaBrotherhood",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from FmaBrotherhood."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::FmaBrotherhood.character #=> \"Edward Elric\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "fma_brotherhood.characters"
                }
              ]
            },
            {
              "name": "city",
              "descriptions": [
                {
                  "text": "Produces a cities from FmaBrotherhood."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::FmaBrotherhood.city #=> \"Central City\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "fma_brotherhood.cities"
                }
              ]
            },
            {
              "name": "country",
              "descriptions": [
                {
                  "text": "Produces a country from FmaBrotherhood."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::FmaBrotherhood.country #=> \"Xing\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "fma_brotherhood.countries"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "KamenRider",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "collectible_device",
              "descriptions": [
                {
                  "text": "Produces the name of a collectible device from a Kamen Rider series."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::KamenRider.collectible_device #=> \"Vistamp\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "(*eras)\n          from_eras(*eras, field: :collectible_devices) { |e| e.delete(:showa) }"
                }
              ]
            },
            {
              "name": "eras",
              "descriptions": [
                {
                  "text": ""
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "@eras ||= ERAS"
                }
              ]
            },
            {
              "name": "eras=",
              "descriptions": [
                {
                  "text": ""
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "(new_eras)\n          selected_eras = ERAS & new_eras\n          @eras = selected_eras.empty? ? ERAS : selected_eras"
                }
              ]
            },
            {
              "name": "from_eras",
              "descriptions": [
                {
                  "text": ""
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "kamen_rider.#{era}.#{field}"
                }
              ]
            },
            {
              "name": "kamen_rider",
              "descriptions": [
                {
                  "text": "Produces the name of a Kamen Rider from a series in the given era."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::KamenRider.kamen_rider #=> \"Kamen Rider Revice\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "(*eras)\n          from_eras(*eras, field: :kamen_riders)"
                }
              ]
            },
            {
              "name": "series",
              "descriptions": [
                {
                  "text": "Produces the name of a Kamen Rider series."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::KamenRider.series #=> \"Kamen Rider Revice\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "(*eras)\n          from_eras(*eras, field: :series)"
                }
              ]
            },
            {
              "name": "transformation_device",
              "descriptions": [
                {
                  "text": "Produces the name of a transformation device used by a Kamen Rider from the given eras.\n                                <p>Produces the name of a transformation device used by a Kamen Rider from the given eras.</p>\n\n                                <p>“Revice Driver”</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "\n<p>Faker::JapaneseMedia::KamenRider.transformation_device #=&gt;</p>\n",
                  "code": ""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "(*eras)\n          from_eras(*eras, field: :transformation_devices)"
                }
              ]
            },
            {
              "name": "user",
              "descriptions": [
                {
                  "text": "Produces the name of a main user of Kamen Rider."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::KamenRider.user #=> \"Ikki Igarashi\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "(*eras)\n          from_eras(*eras, field: :users)"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Naruto",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Naruto."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::Naruto.character #=> \"Naruto Uzumaki\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "naruto.characters"
                }
              ]
            },
            {
              "name": "demon",
              "descriptions": [
                {
                  "text": "Produces a demon from Naruto."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::Naruto.demon #=> \"Nine-Tails (Kurama)\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "naruto.demons"
                }
              ]
            },
            {
              "name": "eye",
              "descriptions": [
                {
                  "text": "Produces a eye from Naruto."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::Naruto.eye #=> \"Konohagakure (Byakugan)\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "naruto.eyes"
                }
              ]
            },
            {
              "name": "village",
              "descriptions": [
                {
                  "text": "Produces a village from Naruto."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::Naruto.village #=> \"Konohagakure (Leaf Village)\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "naruto.villages"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "OnePiece",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "akuma_no_mi",
              "descriptions": [
                {
                  "text": "Produces an akuma no mi from One Piece."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::OnePiece.akuma_no_mi #=> \"Gomu Gomu no Mi\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "one_piece.akuma_no_mi"
                }
              ]
            },
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from One Piece."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::OnePiece.character #=> \"Monkey D. Luffy\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "one_piece.characters"
                }
              ]
            },
            {
              "name": "island",
              "descriptions": [
                {
                  "text": "Produces an island from One Piece."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::OnePiece.island #=> \"Laftel\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "one_piece.islands"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces a location from One Piece."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::OnePiece.location #=> \"Foosha Village\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "one_piece.locations"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from One Piece."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::OnePiece.quote #=> \"ONE PIECE IS REAL!\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "one_piece.quotes"
                }
              ]
            },
            {
              "name": "sea",
              "descriptions": [
                {
                  "text": "Produces a sea from One Piece."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::OnePiece.sea #=> \"East Blue\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "one_piece.seas"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "StudioGhibli",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from the Studio Ghibli."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::StudioGhibli.character #=> \"Chihiro\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "studio_ghibli.characters"
                }
              ]
            },
            {
              "name": "movie",
              "descriptions": [
                {
                  "text": "Produces a movie from Studio Ghibli."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::StudioGhibli.movie #=> \"Kiki's Delivery Service\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "studio_ghibli.movies"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Studio Ghibli's movies."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::StudioGhibli.quote #=> \"One thing you can always count on is that hearts change.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "studio_ghibli.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "SwordArtOnline",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "game_name",
              "descriptions": [
                {
                  "text": "Produces the in-game name of a character from Sword Art Online."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::SwordArtOnline.game_name #=> \"Silica\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "sword_art_online.game_name"
                }
              ]
            },
            {
              "name": "item",
              "descriptions": [
                {
                  "text": "Produces the name of an item from Sword Art Online."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::SwordArtOnline.item #=> \"Blackwyrm Coat\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "sword_art_online.item"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces the name of a location from Sword Art Online."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::SwordArtOnline.location #=> \"Ruby Palace\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "sword_art_online.location"
                }
              ]
            },
            {
              "name": "real_name",
              "descriptions": [
                {
                  "text": "Produces the real name of a character from Sword Art Online."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::JapaneseMedia::SwordArtOnline.real_name #=> \"Kirigaya Kazuto\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "sword_art_online.real_name"
                }
              ]
            }
          ],
          "classes": []
        }
      ]
    },
    {
      "name": "Job",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "field",
          "descriptions": [
            {
              "text": "Produces a random job field."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Job.field #=> \"Banking\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "job.field"
            }
          ]
        },
        {
          "name": "key_skill",
          "descriptions": [
            {
              "text": "Produces a random job skill."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Job.key_skill #=> \"Leadership\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "job.key_skills"
            }
          ]
        },
        {
          "name": "position",
          "descriptions": [
            {
              "text": "Produces a random job position."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Job.position #=> \"Strategist\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "job.position"
            }
          ]
        },
        {
          "name": "title",
          "descriptions": [
            {
              "text": "Produces a random job title."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Job.title #=> \"Construction Manager\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "job.title"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Json",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "add_depth_to_json",
          "descriptions": [
            {
              "text": "Produces a random nested JSON formatted string that can take JSON as an additional argument."
            }
          ],
          "return_type": "Hash{String => String}",
          "return_desc": "",
          "arguments": [
            {
              "name": "json",
              "type": "Hash{String => String}",
              "descriptions": [
                {
                  "text": "\n<p>Specifies a Json.shallow_json and uses its keys as keys of the nested JSON.</p>\n"
                }
              ]
            },
            {
              "name": "width",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the number of nested key-value pairs.</p>\n"
                }
              ]
            },
            {
              "name": "options",
              "type": "Hash",
              "descriptions": [
                {
                  "text": "\n<p>Specifies a Faker gem class to use for nested keys and for values, respectably. options_hash = {key: Class.method, value: Class.method}</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "json = Faker::Json.shallow_json(width: 3, options: { key: 'Name.first_name', value: 'Name.last_name' })\nputs json # =>\n{\"Alisha\":\"Olson\",\"Everardo\":\"DuBuque\",\"Bridgette\":\"Turner\"}\n\njson2 = Faker::Json.add_depth_to_json(json: json, width: 2, options: { key: 'Name.first_name', value: 'Name.last_name' })\nputs json2 # =>\n{\"Alisha\":{\"Daisy\":\"Trantow\",\"Oda\":\"Haag\"},\n\"Everardo\":{\"Javier\":\"Marvin\",\"Eliseo\":\"Schuppe\"},\n\"Bridgette\":{\"Jorge\":\"Kertzmann\",\"Lelah\":\"MacGyver\"}}\n\njson3 = Faker::Json.add_depth_to_json(json: json2, width: 4, options: { key: 'Name.first_name', value: 'Name.last_name' })\nputs json3 # =>\n{\"Alisha\":\n{\"Daisy\":\n{\"Bulah\":\"Wunsch\",\"Cristian\":\"Champlin\",\"Lester\":\"Bartoletti\",\"Greg\":\"Jacobson\"},\n\"Oda\":\n{\"Salvatore\":\"Kuhlman\",\"Aubree\":\"Okuneva\",\"Larry\":\"Schmitt\",\"Velva\":\"Gibson\"}},\n\"Everardo\":\n{\"Javier\":\n{\"Eduardo\":\"Orn\",\"Laila\":\"Kub\",\"Thad\":\"Legros\",\"Dion\":\"Wilderman\"},\n\"Eliseo\":\n{\"Olin\":\"Hilpert\",\"Marisa\":\"Greenfelder\",\"Karlee\":\"Schmitt\",\"Judd\":\"Larkin\"}},\n\"Bridgette\":\n{\"Jorge\":\n{\"Eloy\":\"Pfeffer\",\"Kody\":\"Hansen\",\"Paxton\":\"Lubowitz\",\"Abe\":\"Lesch\"},\n\"Lelah\":\n{\"Rick\":\"Wiza\",\"Bonita\":\"Bayer\",\"Gardner\":\"Auer\",\"Felicity\":\"Abbott\"}}}"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(json: shallow_json, width: 3, options: { key: 'Name.first_name', value: 'Name.first_name' })\n        options[:key] = \"Faker::#{options[:key]}\"\n        options[:value] = \"Faker::#{options[:value]}\"\n\n        hash = JSON.parse(json)\n        hash.each_key do |key|\n          add_hash_to_bottom(hash, [key], width, options)"
            }
          ]
        },
        {
          "name": "add_hash",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(key_array, hash, width, options)\n        string_to_eval = 'hash'\n        key_array.length.times do |index|\n          string_to_eval << \"['#{key_array[index]}']\""
            }
          ]
        },
        {
          "name": "add_hash_to_bottom",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(hash, key_array, width, options)\n        key_string = build_keys_from_array(key_array)\n        if eval(\"hash#{key_string}\").is_a?(::Hash)\n          eval(\"hash#{key_string}\").each_key do |key|\n            key_array << key\n            add_hash_to_bottom(hash, key_array, width, options)"
            }
          ]
        },
        {
          "name": "build_keys_from_array",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(key_array)\n        key_string = ''\n        key_array.each do |value|\n          key_string << \"['#{value}']\""
            }
          ]
        },
        {
          "name": "build_shallow_hash",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(width, options)\n        key = options[:key]\n        value = options[:value]\n\n        hash = {}\n        width.times do\n          hash[eval(key)] = eval(value)"
            }
          ]
        },
        {
          "name": "shallow_json",
          "descriptions": [
            {
              "text": "Produces a random simple JSON formatted string."
            }
          ],
          "return_type": "Hash{String => String}",
          "return_desc": "",
          "arguments": [
            {
              "name": "width",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the number of key-value pairs.</p>\n"
                }
              ]
            },
            {
              "name": "options",
              "type": "Hash",
              "descriptions": [
                {
                  "text": "\n<p>Specifies a Faker gem class to use for keys and for values, respectably. options_hash = {key: Class.method, value: Class.method}</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Json.shallow_json(width: 3, options: { key: 'RockBand.name', value: 'Seinfeld.quote' }) # =>\n{\"Parliament Funkadelic\":\"They're real, and they're spectacular.\",\n\"Fleetwood Mac\":\"I'm not a lesbian. I hate men, but I'm not a lesbian.\",\n\"The Roots\":\"It became very clear to me sitting out there today that every decision\nI've made in my entire life has been wrong. My life is the complete opposite of everything\nI want it to be. Every instinct I have, in every aspect of life, be it something to wear,\nsomething to eat - it's all been wrong.\"}"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(width: 3, options: { key: 'Name.first_name', value: 'Name.first_name' })\n        options[:key] = \"Faker::#{options[:key]}\"\n        options[:value] = \"Faker::#{options[:value]}\"\n\n        hash = build_shallow_hash(width, options)\n        JSON.generate(hash)"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Kpop",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "boy_bands",
          "descriptions": [
            {
              "text": "Produces the name of a K-Pop boy band."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Kpop.boy_bands #=> \"Exo\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "kpop.boy_bands"
            }
          ]
        },
        {
          "name": "girl_groups",
          "descriptions": [
            {
              "text": "Produces the name of a K-Pop girl group."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Kpop.girl_groups #=> \"2NE1\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "kpop.girl_groups"
            }
          ]
        },
        {
          "name": "i_groups",
          "descriptions": [
            {
              "text": "Produces the name of a 1990's 'OG' K-Pop group."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Kpop.i_groups #=> \"Seo Taiji and Boys\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "kpop.i_groups"
            }
          ]
        },
        {
          "name": "ii_groups",
          "descriptions": [
            {
              "text": "Produces the name of a 2000's K-Pop group."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Kpop.ii_groups #=> \"Girls' Generation\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "kpop.ii_groups"
            }
          ]
        },
        {
          "name": "iii_groups",
          "descriptions": [
            {
              "text": "Produces the name of a 2010's K-Pop group."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Kpop.iii_groups #=> \"Trouble Maker\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "kpop.iii_groups"
            }
          ]
        },
        {
          "name": "solo",
          "descriptions": [
            {
              "text": "Produces the name of a solo K-Pop artist."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Kpop.solo #=> \"T.O.P\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "kpop.solo"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Lorem",
      "descriptions": [
        {
          "text": "Based on Perl's Text::Lorem.\n<p>Based on Perl’s Text::Lorem</p>\n"
        }
      ],
      "methods": [
        {
          "name": "character",
          "descriptions": [
            {
              "text": "Generates single character.\n                            <p>Generates single character</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Lorem.character    #=> \"e\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "sample(Types::CHARACTERS)"
            }
          ]
        },
        {
          "name": "characters",
          "descriptions": [
            {
              "text": "Produces a random string of alphanumeric characters.\n                            <p>Produces a random string of alphanumeric characters</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "number",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>The number of characters to generate</p>\n"
                }
              ]
            },
            {
              "name": "min_alpha",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>The minimum number of alphabetic to add to the string</p>\n"
                }
              ]
            },
            {
              "name": "min_numeric",
              "type": "Integer",
              "default": "0",
              "descriptions": [
                {
                  "text": "\n<p>The minimum number of numbers to add to the string</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Lorem.characters #=> \"uw1ep04lhs0c4d931n1jmrspprf5w...\"\nFaker::Lorem.characters(number: 10) #=> \"ang9cbhoa8\"\nFaker::Lorem.characters(number: 10, min_alpha: 4) #=> \"ang9cbhoa8\"\nFaker::Lorem.characters(number: 10, min_alpha: 4, min_numeric: 1) #=> \"ang9cbhoa8\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(number: 255, min_alpha: 0, min_numeric: 0)\n        Alphanumeric.alphanumeric(number: number, min_alpha: min_alpha, min_numeric: min_numeric)"
            }
          ]
        },
        {
          "name": "locale_period",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "translate('faker.lorem.punctuation.period') || '.'"
            }
          ]
        },
        {
          "name": "locale_question_mark",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "translate('faker.lorem.punctuation.question_mark') || '?'"
            }
          ]
        },
        {
          "name": "locale_space",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "translate('faker.lorem.punctuation.space') || ' '"
            }
          ]
        },
        {
          "name": "multibyte",
          "descriptions": [
            {
              "text": "Generates the emoji.\n                            <p>Generates the emoji</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Lorem.multibyte  #=> \"\uD83D\uDE00\"\nFaker::Lorem.multibyte  #=> \"❤\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "sample(translate('faker.lorem.multibyte')).pack('C*').force_encoding('utf-8')"
            }
          ]
        },
        {
          "name": "paragraph",
          "descriptions": [
            {
              "text": "Generates three sentence paragraph.\n                            <p>Generates three sentence paragraph</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "sentence_count",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>Number of sentences in the paragraph</p>\n"
                }
              ]
            },
            {
              "name": "supplemental",
              "type": "Boolean",
              "descriptions": [
                {
                  "text": ""
                }
              ]
            },
            {
              "name": "random_sentences_to_add",
              "type": "Integer",
              "descriptions": [
                {
                  "text": ""
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Lorem.paragraph\n#=> \"Impedit et est. Aliquid deleniti necessitatibus. Et aspernatur minima.\"\nFaker::Lorem.paragraph(sentence_count: 2)\n#=> \"Rerum fugit vitae. Et atque autem.\"\nFaker::Lorem.paragraph(sentence_count: 2, supplemental: true)\n#=> \"Terreo coerceo utor. Vester sunt cogito.\"\nFaker::Lorem.paragraph(sentence_count: 2, supplemental: true, random_sentences_to_add: 2)\n#=> \"Texo tantillus tamisium. Tribuo amissio tamisium. Facere aut canis.\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(sentence_count: 3, supplemental: false, random_sentences_to_add: 0, exclude_words: nil)\n        sentences(number: resolve(sentence_count) + rand(random_sentences_to_add.to_i), supplemental: supplemental, exclude_words: exclude_words).join(locale_space)"
            }
          ]
        },
        {
          "name": "paragraph_by_chars",
          "descriptions": [
            {
              "text": "Generates paragraph with 256 characters.\n                            <p>Generates paragraph with 256 characters</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "number",
              "type": "Integer",
              "descriptions": [
                {
                  "text": ""
                }
              ]
            },
            {
              "name": "supplemental",
              "type": "Boolean",
              "default": "false",
              "descriptions": [
                {
                  "text": ""
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Lorem.paragraph_by_chars\nFaker::Lorem.paragraph_by_chars(number: 20)                       #=> \"Sit modi alias. Imp.\"\nFaker::Lorem.paragraph_by_chars(number: 20, supplemental: true)   #=> \"Certus aveho admove.\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(number: 256, supplemental: false)\n        paragraph = paragraph(sentence_count: 3, supplemental: supplemental)\n\n        paragraph += \" #{paragraph(sentence_count: 3, supplemental: supplemental)}\" while paragraph.length < number\n\n        \"#{paragraph[0...number - 1]}.\""
            }
          ]
        },
        {
          "name": "paragraphs",
          "descriptions": [
            {
              "text": "Generates three paragraphs.\n                            <p>Generates three paragraphs</p>\n                        "
            }
          ],
          "return_type": "Array<String>",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "number",
              "type": "Integer",
              "descriptions": [
                {
                  "text": ""
                }
              ]
            },
            {
              "name": "supplemental",
              "type": "Boolean",
              "descriptions": [
                {
                  "text": ""
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Lorem.paragraphs\nFaker::Lorem.paragraphs(number:2)\nFaker::Lorem.paragraphs(number:2, supplemental: true)"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(number: 3, supplemental: false, exclude_words: nil)\n        1.upto(resolve(number)).collect { paragraph(sentence_count: 3, supplemental: supplemental, exclude_words: exclude_words) }"
            }
          ]
        },
        {
          "name": "question",
          "descriptions": [
            {
              "text": "Returns the question with 4 words.\n                            <p>Returns the question with 4 words</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "word_count",
              "type": "Integer",
              "descriptions": [
                {
                  "text": ""
                }
              ]
            },
            {
              "name": "supplemental",
              "type": "Boolean",
              "descriptions": [
                {
                  "text": ""
                }
              ]
            },
            {
              "name": "random_words_to_add",
              "type": "Integer",
              "descriptions": [
                {
                  "text": ""
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Lorem.question                                                               #=> \"Natus deleniti sequi laudantium?\"\nFaker::Lorem.question(word_count: 2)                                                #=> \"Quo ut?\"\nFaker::Lorem.question(word_count: 2, supplemental: true)                            #=> \"Terga consequatur?\"\nFaker::Lorem.question(word_count: 2, supplemental: true, random_words_to_add: 2)    #=> \"Depulso uter ut?\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(word_count: 4, supplemental: false, random_words_to_add: 0, exclude_words: nil)\n        words(number: word_count + rand(random_words_to_add), supplemental: supplemental, exclude_words: exclude_words).join(' ').capitalize + locale_question_mark"
            }
          ]
        },
        {
          "name": "questions",
          "descriptions": [
            {
              "text": "Generates array of three questions.\n                            <p>Generates array of three questions</p>\n                        "
            }
          ],
          "return_type": "Array<String>",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "number",
              "type": "Integer",
              "descriptions": [
                {
                  "text": ""
                }
              ]
            },
            {
              "name": "supplemental",
              "type": "Boolean",
              "descriptions": [
                {
                  "text": ""
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Lorem.questions                                  #=> [\"Amet culpa enim?\", \"Voluptatem deleniti numquam?\", \"Veniam non cum?\"]\nFaker::Lorem.questions(number: 2)                       #=> [\"Minus occaecati nobis?\", \"Veniam et alias?\"]\nFaker::Lorem.questions(number: 2, supplemental: true)   #=> [\"Acceptus subito cetera?\", \"Aro sulum cubicularis?\"]"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(number: 3, supplemental: false, exclude_words: nil)\n        1.upto(resolve(number)).collect { question(word_count: 3, supplemental: supplemental, exclude_words: exclude_words) }"
            }
          ]
        },
        {
          "name": "sentence",
          "descriptions": [
            {
              "text": "Generates sentence.\n                            <p>Generates sentence</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "word_count",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>How many words should be there in a sentence, default to 4</p>\n"
                }
              ]
            },
            {
              "name": "supplemental",
              "type": "Boolean",
              "descriptions": [
                {
                  "text": "\n<p>Add supplemental words, default to false</p>\n"
                }
              ]
            },
            {
              "name": "random_words_to_add",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>Add any random words, default to 0</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Lorem.sentence                                                             #=> \"Magnam qui aut quidem.\"\nFaker::Lorem.sentence(word_count: 5)                                              #=> \"Voluptas rerum aut aliquam velit.\"\nFaker::Lorem.sentence(word_count: 5, supplemental: true)                          #=> \"Aut viscus curtus votum iusto.\"\nFaker::Lorem.sentence(word_count: 5, supplemental: true, random_words_to_add:2)   #=> \"Crinis quo cruentus velit animi vomer.\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(word_count: 4, supplemental: false, random_words_to_add: 0, exclude_words: nil)\n        words(number: word_count + rand(random_words_to_add.to_i), supplemental: supplemental, exclude_words: exclude_words).join(locale_space).capitalize + locale_period"
            }
          ]
        },
        {
          "name": "sentences",
          "descriptions": [
            {
              "text": "Generates three sentences.\n                            <p>Generates three sentences</p>\n                        "
            }
          ],
          "return_type": "Array<String>",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "number",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>How many sentences to be generated, default to 3</p>\n"
                }
              ]
            },
            {
              "name": "supplemental",
              "type": "Boolean",
              "descriptions": [
                {
                  "text": "\n<p>Should add supplemental words, defaults to false</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Lorem.sentences                                  #=> [\"Possimus non tenetur.\", \"Nulla non excepturi.\", \"Quisquam rerum facilis.\"]\nFaker::Lorem.sentences(number: 2)                       #=> [\"Nulla est natus.\", \"Perferendis autem cum.\"]\nFaker::Lorem.sentences(number: 2, supplemental: true)   #=> [\"Cito cena ad.\", \"Solvo animus allatus.\"]"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(number: 3, supplemental: false, exclude_words: nil)\n        1.upto(resolve(number)).collect { sentence(word_count: 3, supplemental: supplemental, exclude_words: exclude_words) }"
            }
          ]
        },
        {
          "name": "word",
          "descriptions": [
            {
              "text": "Returs the random word.\n                            <p>Returs the random word</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Lorem.word   #=> \"soluto\"\nFaker::Lorem.word(exclude_words: 'error') #=> \"nisi\"\nFaker::Lorem.word(exclude_words: 'id, error') #=> \"et\"\nFaker::Lorem.word(exclude_words: ['id', 'error']) #=> \"consequatur\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(exclude_words: nil)\n        words(number: 1, exclude_words: exclude_words).first"
            }
          ]
        },
        {
          "name": "words",
          "descriptions": [
            {
              "text": "Generates random 3 words.\n                            <p>Generates random 3 words</p>\n                        "
            }
          ],
          "return_type": "Array<String>",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "number",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>Number of words to be generated</p>\n"
                }
              ]
            },
            {
              "name": "supplemental",
              "type": "Boolean",
              "descriptions": [
                {
                  "text": "\n<p>Whether to attach supplemental words at the end, default is false</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Lorem.words                                    #=> [\"hic\", \"quia\", \"nihil\"]\nFaker::Lorem.words(number: 4)                         #=> [\"est\", \"temporibus\", \"et\", \"quaerat\"]\nFaker::Lorem.words(number: 4, supplemental: true)    #=> [\"nisi\", \"sit\", \"allatus\", \"consequatur\"]\nFaker::Lorem.words(number: 4, supplemental: true, exclude_words: 'sit') #=> [\"nisi\", \"allatus\", \"consequatur\", \"aut\"]"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(number: 3, supplemental: false, exclude_words: nil)\n        resolved_num = resolve(number)\n        word_list = (\n          translate('faker.lorem.words') +\n          (supplemental ? translate('faker.lorem.supplemental') : [])\n        )\n        if exclude_words\n          exclude_words = exclude_words.split(', ') if exclude_words.instance_of?(::String)\n          word_list -= exclude_words"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "LoremFlickr",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "build_url",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(size, format, search_terms, match_all)\n        raise ArgumentError, 'Size should be specified in format 300x300' unless size =~ /^[0-9]+x[0-9]+$/\n\n        url_parts = ['https://loremflickr.com']\n        url_parts << format\n        url_parts += size.split('x')\n        url_parts << search_terms.compact.join(',') if search_terms.any?\n        url_parts << 'all' if match_all\n        url_parts.compact.join('/')"
            }
          ]
        },
        {
          "name": "colorized_image",
          "descriptions": [
            {
              "text": "Produces a random colorized image URL from loremflickr.com."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "size",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the size of image to generate.</p>\n"
                }
              ]
            },
            {
              "name": "color",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the color of image to generate.</p>\n"
                }
              ]
            },
            {
              "name": "search_terms",
              "type": "Array<String>",
              "descriptions": [
                {
                  "text": "\n<p>Adds search terms to the image URL.</p>\n"
                }
              ]
            },
            {
              "name": "match_all",
              "type": "Boolean",
              "default": "false",
              "descriptions": [
                {
                  "text": "\n<p>Add “all” as part of the URL.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::LoremFlickr.image #=> \"https://loremflickr.com/red/300/300/all\"\nFaker::LoremFlickr.image(size: \"50x60\", color: 'blue') #=> \"https://loremflickr.com/blue/50/60/all\"\nFaker::LoremFlickr.image(size: \"50x60\", color: 'blue', search_terms: ['sports']) #=> \"https://loremflickr.com/blue/50/60/sports\"\nFaker::LoremFlickr.image(size: \"50x60\", color: 'blue', search_terms: ['sports', 'fitness']) #=> \"https://loremflickr.com/blue/50/60/sports,fitness\"\nFaker::LoremFlickr.image(size: \"50x60\", color: 'blue', search_terms: ['sports', 'fitness'], match_all: true) #=> \"https://loremflickr.com/blue/50/60/sports,fitness/all\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(size: '300x300', color: 'red', search_terms: ['all'], match_all: false)\n        raise ArgumentError, 'Search terms must be specified for colorized images' unless search_terms.any?\n        raise ArgumentError, \"Supported colorizations are #{SUPPORTED_COLORIZATIONS.join(', ')}\" unless SUPPORTED_COLORIZATIONS.include?(color)\n\n        build_url(size, color, search_terms, match_all)"
            }
          ]
        },
        {
          "name": "grayscale_image",
          "descriptions": [
            {
              "text": "Produces a random grayscale image URL from loremflickr.com."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "size",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the size of image to generate.</p>\n"
                }
              ]
            },
            {
              "name": "search_terms",
              "type": "Array<String>",
              "descriptions": [
                {
                  "text": "\n<p>Adds search terms to the image URL.</p>\n"
                }
              ]
            },
            {
              "name": "match_all",
              "type": "Boolean",
              "default": "false",
              "descriptions": [
                {
                  "text": "\n<p>Add “all” as part of the URL.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::LoremFlickr.grayscale_image #=> \"https://loremflickr.com/g/300/300/all\"\nFaker::LoremFlickr.grayscale_image(size: \"50x60\") #=> \"https://loremflickr.com/g/50/60/all\"\nFaker::LoremFlickr.grayscale_image(size: \"50x60\", search_terms: ['sports']) #=> \"https://loremflickr.com/g/50/60/sports\"\nFaker::LoremFlickr.grayscale_image(size: \"50x60\", search_terms: ['sports', 'fitness']) #=> \"https://loremflickr.com/50/60/g/sports,fitness\"\nFaker::LoremFlickr.grayscale_image(size: \"50x60\", search_terms: ['sports', 'fitness'], match_all: true) #=> \"https://loremflickr.com/g/50/60/sports,fitness/all\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(size: '300x300', search_terms: ['all'], match_all: false)\n        raise ArgumentError, 'Search terms must be specified for grayscale images' unless search_terms.any?\n\n        build_url(size, 'g', search_terms, match_all)"
            }
          ]
        },
        {
          "name": "image",
          "descriptions": [
            {
              "text": "Produces a random image URL from loremflickr.com."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "size",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the size of image to generate.</p>\n"
                }
              ]
            },
            {
              "name": "search_terms",
              "type": "Array<String>",
              "descriptions": [
                {
                  "text": "\n<p>Adds search terms to the image URL.</p>\n"
                }
              ]
            },
            {
              "name": "match_all",
              "type": "Boolean",
              "default": "false",
              "descriptions": [
                {
                  "text": "\n<p>Add “all” as part of the URL.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::LoremFlickr.image #=> \"https://loremflickr.com/300/300\"\nFaker::LoremFlickr.image(size: \"50x60\") #=> \"https://loremflickr.com/50/60\"\nFaker::LoremFlickr.image(size: \"50x60\", search_terms: ['sports']) #=> \"https://loremflickr.com/50/60/sports\"\nFaker::LoremFlickr.image(size: \"50x60\", search_terms: ['sports', 'fitness']) #=> \"https://loremflickr.com/50/60/sports,fitness\"\nFaker::LoremFlickr.image(size: \"50x60\", search_terms: ['sports', 'fitness'], match_all: true) #=> \"https://loremflickr.com/50/60/sports,fitness/all\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(size: '300x300', search_terms: [], match_all: false)\n        build_url(size, nil, search_terms, match_all)"
            }
          ]
        },
        {
          "name": "pixelated_image",
          "descriptions": [
            {
              "text": "Produces a random pixelated image URL from loremflickr.com."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "size",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the size of image to generate.</p>\n"
                }
              ]
            },
            {
              "name": "search_terms",
              "type": "Array<String>",
              "descriptions": [
                {
                  "text": "\n<p>Adds search terms to the image URL.</p>\n"
                }
              ]
            },
            {
              "name": "match_all",
              "type": "Boolean",
              "default": "false",
              "descriptions": [
                {
                  "text": "\n<p>Add “all” as part of the URL.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::LoremFlickr.pixelated_image #=> \"https://loremflickr.com/p/300/300/all\"\nFaker::LoremFlickr.pixelated_image(size: \"50x60\") #=> \"https://loremflickr.com/p/50/60/all\"\nFaker::LoremFlickr.pixelated_image(size: \"50x60\", search_terms: ['sports']) #=> \"https://loremflickr.com/p/50/60/sports\"\nFaker::LoremFlickr.pixelated_image(size: \"50x60\", search_terms: ['sports', 'fitness']) #=> \"https://loremflickr.com/p/50/60/sports,fitness\"\nFaker::LoremFlickr.pixelated_image(size: \"50x60\", search_terms: ['sports', 'fitness'], match_all: true) #=> \"https://loremflickr.com/p/50/60/sports,fitness/all\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(size: '300x300', search_terms: ['all'], match_all: false)\n        raise ArgumentError, 'Search terms must be specified for pixelated images' unless search_terms.any?\n\n        build_url(size, 'p', search_terms, match_all)"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Markdown",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "available_methods",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(Markdown.public_methods(false) - Base.methods).sort"
            }
          ]
        },
        {
          "name": "block_code",
          "descriptions": [
            {
              "text": "Produces a random code block formatted in Ruby."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Markdown.block_code #=> \"```ruby\\nEos quasi qui.\\n```\""
            }
          ],
          "implementations": [
            {
              "type": "Expression",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "```ruby\\n#{Lorem.sentence(word_count: 1)}\\n```"
            }
          ]
        },
        {
          "name": "emphasis",
          "descriptions": [
            {
              "text": "Produces a random emphasis formatting on a random word in two sentences."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Markdown.emphasis #=> \"_Incidunt atque quis repellat id impedit.  Quas numquam quod incidunt dicta non. Blanditiis delectus laudantium atque reiciendis qui._\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "markdown.emphasis"
            }
          ]
        },
        {
          "name": "headers",
          "descriptions": [
            {
              "text": "Produces a random header format."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Markdown.headers #=> \"##### Autem\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "markdown.headers"
            }
          ]
        },
        {
          "name": "inline_code",
          "descriptions": [
            {
              "text": "Produces a random inline code snippet between two sentences."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Markdown.inline_code #=> \"Aut eos quis suscipit. `Dignissimos voluptatem expedita qui.` Quo doloremque veritatis tempora aut.\""
            }
          ],
          "implementations": [
            {
              "type": "Expression",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "`#{Faker::Lorem.sentence(word_count: 1)}`"
            }
          ]
        },
        {
          "name": "ordered_list",
          "descriptions": [
            {
              "text": "Produces a random ordered list of items between 1 and 10 randomly."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Markdown.ordered_list #=> \"1. Qui reiciendis non consequatur atque.\\n2. Quo doloremque veritatis tempora aut.\\n3. Aspernatur.\\n4. Ea ab.\\n5. Qui.\\n6. Sit pariatur nemo eveniet.\\n7. Molestiae aut.\\n8. Nihil molestias iure placeat.\\n9. Dolore autem quisquam.\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "number = rand(1..10)\n\n        result = []\n        number.times do |i|\n          result << \"#{i}. #{Faker::Lorem.sentence(word_count: 1)} \\n\""
            }
          ]
        },
        {
          "name": "random",
          "descriptions": [
            {
              "text": "Produces a random method from the methods above, excluding the methods listed in the arguments."
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [
            {
              "name": "methods",
              "type": "Symbol",
              "descriptions": [
                {
                  "text": "\n<p>Specify which methods to exclude.</p>\n"
                }
              ]
            }
          ],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(*args)\n        method_list = available_methods\n        args&.each { |ex| method_list.delete_if { |meth| meth == ex.to_sym } }\n        send(method_list[Faker::Config.random.rand(0..method_list.length - 1)])"
            }
          ]
        },
        {
          "name": "sandwich",
          "descriptions": [
            {
              "text": "Produces a simulated blog-esque text-heavy block in markdown.\n                            <p>Produces a simulated blog-esque text-heavy block in markdown</p>\n\n                            <p>Keyword arguments: sentences, repeat</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "sentences",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>Specifies how many sentences make a text block.</p>\n"
                }
              ]
            },
            {
              "name": "repeat",
              "type": "Integer",
              "default": "1",
              "descriptions": [
                {
                  "text": "\n<p>Specifies how many times the text block repeats.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Markdown.sandwich #=> returns newline separated content of 1 header, 1 default lorem paragraph, and 1 random markdown element\nFaker::Markdown.sandwich(sentences: 5) #=> returns newline separated content of 1 header, 1 5-sentence lorem paragraph, and 1 random markdown element\nFaker::Markdown.sandwich(sentences: 6, repeat: 3) #=> returns newline separated content of 1 header, and then 3 sections consisting of, here, 1 6-sentence lorem paragraph and 1 random markdown element. The random markdown element is chosen at random in each iteration of the paragraph-markdown pairing."
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(sentences: 3, repeat: 1)\n        text_block = []\n        text_block << headers\n        repeat.times do\n          text_block << Faker::Lorem.paragraph(sentence_count: sentences)\n          text_block << random"
            }
          ]
        },
        {
          "name": "table",
          "descriptions": [
            {
              "text": "Produces a random 3x4 table with a row of headings, a row of hyphens and two rows of data.\n                            <p>Produces a random 3x4 table with a row of headings, a row of hyphens and two rows of data</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Markdown.table #=> \"ad | similique | voluptatem\\ncorrupti | est | rerum\\nmolestiae | quidem | et\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "table = []\n        3.times do\n          table << \"#{Lorem.word} | #{Lorem.word} | #{Lorem.word}\""
            }
          ]
        },
        {
          "name": "unordered_list",
          "descriptions": [
            {
              "text": "Produces a random unordered list of items between 1 and 10 randomly."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Markdown.unordered_list #=> \"* Voluptatum aliquid tempora molestiae facilis non sed.\\n* Nostrum omnis iste impedit voluptatum dolor.\\n* Esse quidem et facere.\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "number = rand(1..10)\n\n        result = []\n        number.times do |_i|\n          result << \"* #{Faker::Lorem.sentence(word_count: 1)} \\n\""
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Marketing",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "buzzwords",
          "descriptions": [
            {
              "text": "Produces a few marketing buzzwords."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Marketing.buzzwords #=> \"rubber meets the road\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "marketing.buzzwords"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Measurement",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "check_for_plural",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(text, number)\n        if number && number != 1\n          make_plural(text)\n        else\n          text"
            }
          ]
        },
        {
          "name": "define_measurement_locale",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "measurement.#{locale}"
            }
          ]
        },
        {
          "name": "ensure_valid_amount",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(amount)\n        raise ArgumentError, 'invalid amount' unless amount == NONE || amount == ALL || amount.is_a?(Integer) || amount.is_a?(Float)"
            }
          ]
        },
        {
          "name": "height",
          "descriptions": [
            {
              "text": "Produces a random height measurement."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "amount",
              "type": "Integer",
              "default": "rand(10)",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the random height value.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Measurement.height #=> \"6 inches\"\nFaker::Measurement.height(amount: 1.4) #=> \"1.4 inches\"\nFaker::Measurement.height(amount: \"none\") #=> \"inch\"\nFaker::Measurement.height(amount: \"all\") #=> \"inches\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(amount: rand(10))\n        define_measurement_locale(amount, 'height')"
            }
          ]
        },
        {
          "name": "length",
          "descriptions": [
            {
              "text": "Produces a random length measurement."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "amount",
              "type": "Integer",
              "default": "rand(10)",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the random length value.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Measurement.length #=> \"1 yard\"\nFaker::Measurement.length(amount: 1.4) #=> \"1.4 yards\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(amount: rand(10))\n        define_measurement_locale(amount, 'length')"
            }
          ]
        },
        {
          "name": "make_plural",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(text)\n        case text\n        when 'foot'\n          'feet'\n        when 'inch'\n          'inches'\n        when 'fluid ounce'\n          'fluid ounces'\n        when 'metric ton'\n          'metric tons'\n        else\n          \"#{text}s\""
            }
          ]
        },
        {
          "name": "metric_height",
          "descriptions": [
            {
              "text": "Produces a random metric height measurement."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "amount",
              "type": "Integer",
              "default": "rand(10)",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the random height value.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Measurement.metric_height #=> \"2 meters\"\nFaker::Measurement.metric_height(amount: 1.4) #=> \"1.4 meters\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(amount: rand(10))\n        define_measurement_locale(amount, 'metric_height')"
            }
          ]
        },
        {
          "name": "metric_length",
          "descriptions": [
            {
              "text": "Produces a random metric length measurement."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "amount",
              "type": "Integer",
              "default": "rand(10)",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the random length value.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Measurement.metric_length #=> \"0 decimeters\"\nFaker::Measurement.metric_length(amount: 1.4) #=> \"1.4 decimeters\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(amount: rand(10))\n        define_measurement_locale(amount, 'metric_length')"
            }
          ]
        },
        {
          "name": "metric_volume",
          "descriptions": [
            {
              "text": "Produces a random metric volume measurement."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "amount",
              "type": "Integer",
              "default": "rand(10)",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the random volume value.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Measurement.metric_volume #=> \"1 liter\"\nFaker::Measurement.metric_volume(amount: 1.4) #=> \"1.4 liters\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(amount: rand(10))\n        define_measurement_locale(amount, 'metric_volume')"
            }
          ]
        },
        {
          "name": "metric_weight",
          "descriptions": [
            {
              "text": "Produces a random metric weight measurement."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "amount",
              "type": "Integer",
              "default": "rand(10)",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the random weight value.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Measurement.metric_weight #=> \"8 grams\"\nFaker::Measurement.metric_weight(amount: 1.4) #=> \"1.4 grams\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(amount: rand(10))\n        define_measurement_locale(amount, 'metric_weight')"
            }
          ]
        },
        {
          "name": "volume",
          "descriptions": [
            {
              "text": "Produces a random volume measurement."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "amount",
              "type": "Integer",
              "default": "rand(10)",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the random volume value.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Measurement.volume #=> \"10 cups\"\nFaker::Measurement.volume(amount: 1.4) #=> \"1.4 cups\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(amount: rand(10))\n        define_measurement_locale(amount, 'volume')"
            }
          ]
        },
        {
          "name": "weight",
          "descriptions": [
            {
              "text": "Produces a random weight measurement."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "amount",
              "type": "Integer",
              "default": "rand(10)",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the random weight value.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Measurement.weight #=> \"3 pounds\"\nFaker::Measurement.weight(amount: 1.4) #=> \"1.4 pounds\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(amount: rand(10))\n        define_measurement_locale(amount, 'weight')"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Military",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "air_force_rank",
          "descriptions": [
            {
              "text": "Produces a rank in the U.S.\n                            <p>Air Force.</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Military.air_force_rank #=> \"Captain\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "military.air_force_rank"
            }
          ]
        },
        {
          "name": "army_rank",
          "descriptions": [
            {
              "text": "Produces a rank in the U.S.\n                            <p>Army.</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Military.army_rank #=> \"Staff Sergeant\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "military.army_rank"
            }
          ]
        },
        {
          "name": "coast_guard_rank",
          "descriptions": [
            {
              "text": "Produces a rank in the U.S.\n                            <p>Coast Guard</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Military.coast_guard_rank #=> \"Master Chief Petty Officer of the Coast Guard\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "military.coast_guard_rank"
            }
          ]
        },
        {
          "name": "dod_paygrade",
          "descriptions": [
            {
              "text": "Produces a U.S.\n                            <p>Department of Defense Paygrade.</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Military.dod_paygrade #=> \"E-6\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "military.dod_paygrade"
            }
          ]
        },
        {
          "name": "marines_rank",
          "descriptions": [
            {
              "text": "Produces a rank in the U.S.\n                            <p>Marines.</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Military.marines_rank #=> \"Gunnery Sergeant\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "military.marines_rank"
            }
          ]
        },
        {
          "name": "navy_rank",
          "descriptions": [
            {
              "text": "Produces a rank in the U.S.\n                            <p>Navy.</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Military.navy_rank #=> \"Seaman\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "military.navy_rank"
            }
          ]
        },
        {
          "name": "space_force_rank",
          "descriptions": [
            {
              "text": "Produces a rank in the U.S.\n                            <p>Space Force.</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Military.space_force_rank #=> \"Senior Enlisted Advisor of the Space Force\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "military.space_force_rank"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Mountain",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "name",
          "descriptions": [
            {
              "text": "Produces a name of a mountain.\n                            <p>Produces a name of a mountain</p>\n\n                            <pre><code>@faker.version next\n                            </code></pre>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Mountain.name #=> \"Mount Everest\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "mountain.name"
            }
          ]
        },
        {
          "name": "range",
          "descriptions": [
            {
              "text": "Produces a name of a range.\n                            <p>Produces a name of a range</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Mountain.range #=> \"Dhaulagiri Himalaya\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "mountain.range"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Movie",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "quote",
          "descriptions": [
            {
              "text": "Produces a quote from a movie."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Movie.quote #=> \"Bumble bee tuna\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "movie.quote"
            }
          ]
        },
        {
          "name": "title",
          "descriptions": [
            {
              "text": "Produces a title from a movie."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Movie.title #=> \"The Lord of the Rings: The Two Towers\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "movie.title"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Movies",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [],
      "classes": [
        {
          "name": "Avatar",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Avatar."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::Avatar.character #=> \"Jake Sully\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "avatar.characters"
                }
              ]
            },
            {
              "name": "date",
              "descriptions": [
                {
                  "text": "Produces a date from Avatar."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::Avatar.date #=> \"December 15, 2022\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "avatar.dates"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Avatar."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::Avatar.quote\n#=> \"If it ain't raining, we ain't training.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "avatar.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "BackToTheFuture",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Back to the Future."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::BackToTheFuture.character #=> \"Marty McFly\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "back_to_the_future.characters"
                }
              ]
            },
            {
              "name": "date",
              "descriptions": [
                {
                  "text": "Produces a date from Back to the Future."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::BackToTheFuture.date #=> \"November 5, 1955\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "back_to_the_future.dates"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Back to the Future."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::BackToTheFuture.quote\n#=> \"Roads? Where we're going, we don't need roads.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "back_to_the_future.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Departed",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "actor",
              "descriptions": [
                {
                  "text": "Produces an actor from The Departed."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::Departed.actor #=> \"Matt Damon\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "departed.actors"
                }
              ]
            },
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from The Departed."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::Departed.character #=> \"Frank Costello\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "departed.characters"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from The Departed."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::Departed.quote\n#=> \"I'm the guy who does his job. You must be the other guy\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "departed.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Ghostbusters",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "actor",
              "descriptions": [
                {
                  "text": "Produces an actor from Ghostbusters."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::Ghostbusters.actor #=> \"Bill Murray\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "ghostbusters.actors"
                }
              ]
            },
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Ghostbusters."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::Ghostbusters.character #=> \"Dr. Egon Spengler\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "ghostbusters.characters"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Ghostbusters."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::Ghostbusters.quote\n#=> \"I tried to think of the most harmless thing. Something I loved from my childhood. Something that could never ever possibly destroy us. Mr. Stay Puft!\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "ghostbusters.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Hackers",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a real character name from Hackers."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::Hackers.character #=> \"Dade Murphy\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "hackers.characters"
                }
              ]
            },
            {
              "name": "handle",
              "descriptions": [
                {
                  "text": "Produces a character hacker \"handle\" from Hackers."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::Hackers.handle #=> \"Zero Cool\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "hackers.handles"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Hackers."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::Hackers.quote #=> \"Hack the Planet!\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "hackers.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "HarryPotter",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "book",
              "descriptions": [
                {
                  "text": "Produces a book from Harry Potter."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::HarryPotter.book #=> \"Harry Potter and the Chamber of Secrets\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "harry_potter.books"
                }
              ]
            },
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Harry Potter."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::HarryPotter.character #=> \"Harry Potter\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "harry_potter.characters"
                }
              ]
            },
            {
              "name": "house",
              "descriptions": [
                {
                  "text": "Produces a house from Harry Potter."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::HarryPotter.house #=> \"Gryffindor\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "harry_potter.houses"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces a location from Harry Potter."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::HarryPotter.location #=> \"Hogwarts\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "harry_potter.locations"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Harry Potter."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::HarryPotter.quote #=> \"I solemnly swear that I am up to good.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "harry_potter.quotes"
                }
              ]
            },
            {
              "name": "spell",
              "descriptions": [
                {
                  "text": "Produces a spell from Harry Potter."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::HarryPotter.spell #=> \"Reparo\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "harry_potter.spells"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "HitchhikersGuideToTheGalaxy",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from The Hitchhiker's Guide to the Galaxy."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::HitchhikersGuideToTheGalaxy.character #=> \"Marvin\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "hitchhikers_guide_to_the_galaxy.characters"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces a location from The Hitchhiker's Guide to the Galaxy."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::HitchhikersGuideToTheGalaxy.location\n#=> \"Arthur Dent's house\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "hitchhikers_guide_to_the_galaxy.locations"
                }
              ]
            },
            {
              "name": "marvin_quote",
              "descriptions": [
                {
                  "text": "Produces a Marvin quote from The Hitchhiker's Guide to the Galaxy."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::HitchhikersGuideToTheGalaxy.marvin_quote\n#=> \"Life? Don't talk to me about life.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "hitchhikers_guide_to_the_galaxy.marvin_quote"
                }
              ]
            },
            {
              "name": "planet",
              "descriptions": [
                {
                  "text": "Produces a planet from The Hitchhiker's Guide to the Galaxy."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::HitchhikersGuideToTheGalaxy.planet\n#=> \"Magrathea\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "hitchhikers_guide_to_the_galaxy.planets"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from The Hitchhiker's Guide to the Galaxy."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::HitchhikersGuideToTheGalaxy.quote\n#=> \"In the beginning, the Universe was created. This has made a lot of people very angry and been widely regarded as a bad move.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "hitchhikers_guide_to_the_galaxy.quotes"
                }
              ]
            },
            {
              "name": "specie",
              "descriptions": [
                {
                  "text": "Produces a species from The Hitchhiker's Guide to the Galaxy."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::HitchhikersGuideToTheGalaxy.specie\n#=> \"Perfectly Normal Beast\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "hitchhikers_guide_to_the_galaxy.species"
                }
              ]
            },
            {
              "name": "starship",
              "descriptions": [
                {
                  "text": "Produces a starship from The Hitchhiker's Guide to the Galaxy."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::HitchhikersGuideToTheGalaxy.starship\n#=> \"Vogon Constructor Fleet\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "hitchhikers_guide_to_the_galaxy.starships"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Hobbit",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces the name of a character from The Hobbit."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::Hobbit.character #=> \"Gandalf the Grey\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "tolkien.hobbit.character"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces the name of a location from The Hobbit."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::Hobbit.location #=> \"The Shire\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "tolkien.hobbit.location"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from The Hobbit."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::Hobbit.quote\n#=> \"Never laugh at live dragons, Bilbo you fool!\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "tolkien.hobbit.quote"
                }
              ]
            },
            {
              "name": "thorins_company",
              "descriptions": [
                {
                  "text": "Produces the name of one of the 13 dwarves from the Company, or Gandalf or Bilbo."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::Hobbit.thorins_company #=> \"Thorin Oakenshield\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "tolkien.hobbit.thorins_company"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "HowToTrainYourDragon",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from How To Train Your Dragon."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::HowToTrainYourDragon.character #=> \"Hiccup\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "how_to_train_your_dragon.characters"
                }
              ]
            },
            {
              "name": "dragon",
              "descriptions": [
                {
                  "text": "Produces a dragon from How To Train Your Dragon."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::HowToTrainYourDragon.dragons #=> \"Toothless\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "how_to_train_your_dragon.dragons"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces a location from How To Train Your Dragon."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::HowToTrainYourDragon.location #=> \"Berk\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "how_to_train_your_dragon.locations"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Lebowski",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "actor",
              "descriptions": [
                {
                  "text": "Produces an actor from The Big Lebowski."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::Lebowski.actor #=> \"John Goodman\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "lebowski.actors"
                }
              ]
            },
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from The Big Lebowski."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::Lebowski.character #=> \"Jackie Treehorn\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "lebowski.characters"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from The Big Lebowski."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::Lebowski.quote #=> \"Forget it, Donny, you're out of your element!\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "lebowski.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "LordOfTheRings",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Lord of the Rings."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::LordOfTheRings.character #=> \"Legolas\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "tolkien.lord_of_the_rings.characters"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces a location from Lord of the Rings."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::LordOfTheRings.location #=> \"Helm's Deep\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "tolkien.lord_of_the_rings.locations"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Lord of the Rings."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::LordOfTheRings.quote\n#=> \"I wish the Ring had never come to me. I wish none of this had happened.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "tolkien.lord_of_the_rings.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "PrincessBride",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from The Princess Bride."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::PrincessBride.character #=> \"Dread Pirate Roberts\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "princess_bride.characters"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from The Princess Bride."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::PrincessBride.quote\n#=> \"Hello. My name is Inigo Montoya. You killed my father. Prepare to die!\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "princess_bride.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "StarWars",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "call_number",
              "descriptions": [
                {
                  "text": "Produces a call number from Star Wars."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::StarWars.call_number #=> \"Leader\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "sample(call_numbers)"
                }
              ]
            },
            {
              "name": "call_numbers",
              "descriptions": [
                {
                  "text": "Generates numbers array.\n                                <p>Generates numbers array</p>\n                            "
                }
              ],
              "return_type": "Array<String>",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::StarWars.call_numbers  #=> [\"Leader\", \"#\"]"
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "data": "star_wars.call_numbers"
                }
              ]
            },
            {
              "name": "call_sign",
              "descriptions": [
                {
                  "text": "Produces a call sign from Star Wars."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::StarWars.call_sign #=> \"Grey 5\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "star_wars.call_sign"
                }
              ]
            },
            {
              "name": "call_squadron",
              "descriptions": [
                {
                  "text": "Produces a call squadron from Star Wars."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::StarWars.call_squadron #=> \"Green\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "sample(call_squadrons)"
                }
              ]
            },
            {
              "name": "call_squadrons",
              "descriptions": [
                {
                  "text": "Returns squadrons array.\n                                <p>Returns squadrons array</p>\n                            "
                }
              ],
              "return_type": "Array<String>",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::StarWars.call_squadrons  #=> [\"Rogue\", \"Red\", \"Gray\", \"Green\", \"Blue\", \"Gold\", \"Black\", \"Yellow\", \"Phoenix\"]"
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "data": "star_wars.call_squadrons"
                }
              ]
            },
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Star Wars."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::StarWars.character #=> \"Anakin Skywalker\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "sample(characters)"
                }
              ]
            },
            {
              "name": "characters",
              "descriptions": [
                {
                  "text": "Returns all character names in movie.\n                                <p>Returns all character names in movie</p>\n                            "
                }
              ],
              "return_type": "Array<String>",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::StarWars.characters"
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "data": "star_wars.characters"
                }
              ]
            },
            {
              "name": "droid",
              "descriptions": [
                {
                  "text": "Produces a droid from Star Wars."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::StarWars.droid #=> \"C-3PO\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "sample(droids)"
                }
              ]
            },
            {
              "name": "droids",
              "descriptions": [
                {
                  "text": "Returns droid list.\n                                <p>Returns droid list</p>\n                            "
                }
              ],
              "return_type": "Array<String>",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::StarWars.droids"
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "data": "star_wars.droids"
                }
              ]
            },
            {
              "name": "planet",
              "descriptions": [
                {
                  "text": "Produces a planet from Star Wars."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::StarWars.planet #=> \"Tatooine\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "sample(planets)"
                }
              ]
            },
            {
              "name": "planets",
              "descriptions": [
                {
                  "text": "Lists out all planet names.\n                                <p>Lists out all planet names</p>\n                            "
                }
              ],
              "return_type": "Array<String>",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::StarWars.planets"
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "data": "star_wars.planets"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Star Wars."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [
                {
                  "name": "character",
                  "type": "String",
                  "default": "nil",
                  "descriptions": [
                    {
                      "text": "\n<p>The name of a character to derive a quote from.</p>\n"
                    }
                  ]
                }
              ],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::StarWars.quote #=> \"Aren't you a little short for a Stormtrooper?\""
                },
                {
                  "description": "",
                  "code": "Faker::Movies::StarWars.quote(character: \"leia_organa\")\n#=> \"Aren't you a little short for a Stormtrooper?\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "(character: nil)\n          quoted_characters = translate('faker.star_wars.quotes')\n\n          if character.nil?\n            character = sample(quoted_characters.keys).to_s\n          else\n            character = character.to_s.downcase\n\n            # check alternate spellings, nicknames, titles of characters\n            translate('faker.star_wars.alternate_character_spellings').each do |k, v|\n              character = k.to_s if v.include?(character)"
                }
              ]
            },
            {
              "name": "specie",
              "descriptions": [
                {
                  "text": "Produces a species from Star Wars."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::StarWars.specie #=> \"Gungan\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "sample(species)"
                }
              ]
            },
            {
              "name": "species",
              "descriptions": [
                {
                  "text": "Returns name of all species.\n                                <p>Returns name of all species</p>\n                            "
                }
              ],
              "return_type": "Array<String>",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::StarWars.species"
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "data": "star_wars.species"
                }
              ]
            },
            {
              "name": "vehicle",
              "descriptions": [
                {
                  "text": "Produces a vehicle from Star Wars."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::StarWars.vehicle #=> \"Sandcrawler\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "sample(vehicles)"
                }
              ]
            },
            {
              "name": "vehicles",
              "descriptions": [
                {
                  "text": "Lists out all vehicles.\n                                <p>Lists out all vehicles</p>\n                            "
                }
              ],
              "return_type": "Array<String>",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::StarWars.vehicles"
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "data": "star_wars.vehicles"
                }
              ]
            },
            {
              "name": "wookiee_sentence",
              "descriptions": [
                {
                  "text": "Produces a wookiee sentence from Star Wars."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::StarWars.wookiee_sentence #=> \"Yrroonn ru ooma roo ahuma ur roooarrgh hnn-rowr.\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "sentence = sample(wookiee_words).capitalize\n\n          rand(0..10).times { sentence += \" #{sample(wookiee_words)}\" }\n\n          sentence + sample(['.', '?', '!'])"
                }
              ]
            },
            {
              "name": "wookiee_words",
              "descriptions": [
                {
                  "text": "All wookiee words.\n                                <p>All wookiee words</p>\n                            "
                }
              ],
              "return_type": "Array<String>",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::StarWars.wookiee_words"
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "data": "star_wars.wookiee_words"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "TheRoom",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "actor",
              "descriptions": [
                {
                  "text": "Produces an actor from The Room (2003)."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::Room.actor #=> \"Tommy Wiseau\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "the_room.actors"
                }
              ]
            },
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from The Room (2003)."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::Room.character #=> \"Johnny\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "the_room.characters"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces a location from The Room (2003)."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::Room.location #=> \"Johnny's Apartment\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "the_room.locations"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from The Room (2003)."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::Room.quote\n#=> \"You're lying, I never hit you. You are tearing me apart, Lisa!\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "the_room.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Tron",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Tron."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::Tron.character #=> \"Bit\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "sample(characters)"
                }
              ]
            },
            {
              "name": "game",
              "descriptions": [
                {
                  "text": "Produces a game from Tron."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::Tron.game #=> \"Space Paranoids\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "sample(games)"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces a location from Tron."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::Tron.location #=> \"Flynn's Arcade\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "sample(locations)"
                }
              ]
            },
            {
              "name": "program",
              "descriptions": [
                {
                  "text": "Produces a program from Tron."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::Tron.program #=> \"Clu\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "sample(programs)"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Tron."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [
                {
                  "name": "character",
                  "type": "String",
                  "default": "nil",
                  "descriptions": [
                    {
                      "text": "\n<p>The name of a character to derive a quote from.</p>\n"
                    }
                  ]
                }
              ],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::Tron.quote #=> \"Greetings, Programs!\""
                },
                {
                  "description": "",
                  "code": "Faker::Movies::Tron.quote(character: \"mcp\")\n#=> \"End of Line.\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "(character: nil)\n          quoted_characters = translate('faker.tron.quotes')\n\n          if character.nil?\n            character = sample(quoted_characters.keys).to_s\n          else\n            character = character.to_s.downcase\n\n            # check alternate spellings, nicknames, titles of characters\n            translate('faker.tron.alternate_character_spellings').each do |k, v|\n              character = k.to_s if v.include?(character)"
                }
              ]
            },
            {
              "name": "tagline",
              "descriptions": [
                {
                  "text": "Produces a tagline from Tron."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::Tron.tagline #=> \"The Electronic Gladiator\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "sample(taglines)"
                }
              ]
            },
            {
              "name": "user",
              "descriptions": [
                {
                  "text": "Produces a user from Tron."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::Tron.user #=> \"Light Cycle\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "sample(users)"
                }
              ]
            },
            {
              "name": "vehicle",
              "descriptions": [
                {
                  "text": "Produces a vehicle from Tron."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::Tron.vehicle #=> \"Light Cycle\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "sample(vehicles)"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "VForVendetta",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from V For Vendetta."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::VForVendetta.character #=> \"V\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "v_for_vendetta.characters"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from V For Vendetta."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::VForVendetta.quote\n#=> \"People should not be afraid of their governments. Governments should be afraid of their people.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "v_for_vendetta.quotes"
                }
              ]
            },
            {
              "name": "speech",
              "descriptions": [
                {
                  "text": "Produces a speech from V For Vendetta."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Movies::VForVendetta.speech\n#=> \"Remember, remember, the Fifth of November, the Gunpowder Treason and Plot. I know of no reason why the Gunpowder Treason should ever be forgot...\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "v_for_vendetta.speeches"
                }
              ]
            }
          ],
          "classes": []
        }
      ]
    },
    {
      "name": "Music",
      "descriptions": [
        {
          "text": "A generator of titles of operas by various composers.\n<p>A generator of titles of operas by various composers</p>\n"
        }
      ],
      "methods": [
        {
          "name": "album",
          "descriptions": [
            {
              "text": "Produces the name of an album."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Music.album #=> \"Sgt. Pepper's Lonely Hearts Club\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "music.albums"
            }
          ]
        },
        {
          "name": "band",
          "descriptions": [
            {
              "text": "Produces the name of a band."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Music.band #=> \"The Beatles\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "music.bands"
            }
          ]
        },
        {
          "name": "chord",
          "descriptions": [
            {
              "text": "Produces the name of a chord, using letter notation."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Music.chord #=> \"Adim7\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "key + sample(chord_types)"
            }
          ]
        },
        {
          "name": "chord_types",
          "descriptions": [
            {
              "text": "Produces an array of types of chords."
            }
          ],
          "return_type": "Array<String><String>",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "CHORD_TYPES"
            }
          ]
        },
        {
          "name": "genre",
          "descriptions": [
            {
              "text": "Produces the name of a musical genre."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Music.genre #=> \"Rock\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "music.genres"
            }
          ]
        },
        {
          "name": "instrument",
          "descriptions": [
            {
              "text": "Produces the name of an instrument."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Music.instrument #=> \"Acoustic Guitar\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "music.instruments"
            }
          ]
        },
        {
          "name": "key",
          "descriptions": [
            {
              "text": "Produces the name of a key/note, using letter notation."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Music.key #=> \"A#\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "sample(keys) + sample(key_variants)"
            }
          ]
        },
        {
          "name": "key_types",
          "descriptions": [
            {
              "text": "Produces an array of key types (with \"major\" denoted as an empty string)."
            }
          ],
          "return_type": "Array<String>",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Music.key_types #=> ['', 'm']"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "KEY_TYPES"
            }
          ]
        },
        {
          "name": "key_variants",
          "descriptions": [
            {
              "text": "Produces an array of accidentals (with \"natural\" denoted as an empty string)."
            }
          ],
          "return_type": "Array<String>",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "ACCIDENTAL_SIGNS"
            }
          ]
        },
        {
          "name": "keys",
          "descriptions": [
            {
              "text": "Produces an array of the letter names of musical notes, without accidentals."
            }
          ],
          "return_type": "Array<String>",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "NOTE_LETTERS"
            }
          ]
        },
        {
          "name": "mambo_no_5",
          "descriptions": [
            {
              "text": "Produces a name from Lou Bega's Mambo #5.\n                            <p>Produces a name from Lou Bega’s Mambo #5</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Music.mambo #=> \"Monica\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "music.mambo_no_5"
            }
          ]
        }
      ],
      "classes": [
        {
          "name": "GratefulDead",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "player",
              "descriptions": [
                {
                  "text": "Produces the name of a member of The Grateful Dead."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::GratefulDead.player #=> \"Jerry Garcia\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "grateful_dead.players"
                }
              ]
            },
            {
              "name": "song",
              "descriptions": [
                {
                  "text": "Produces the name of a song by The Grateful Dead."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::GratefulDead.song #=> \"Cassidy\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "grateful_dead.songs"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Hiphop",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "artist",
              "descriptions": [
                {
                  "text": "Produces the name of a Hip Hop Artist.\n                                <p>Produces the name of a Hip Hop Artist</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Hiphop.artist #=> \"Lil Wayne\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "music.hiphop.artist"
                }
              ]
            },
            {
              "name": "groups",
              "descriptions": [
                {
                  "text": "Produces the name of a Hip Hop Group.\n                                <p>Produces the name of a Hip Hop Group</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Hiphop.groups #=> \"OVO\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "music.hiphop.groups"
                }
              ]
            },
            {
              "name": "subgenres",
              "descriptions": [
                {
                  "text": "Produces the name of a Hip Hop Subgenre.\n                                <p>Produces the name of a Hip Hop Subgenre</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Hiphop.subgeneres #=> \"Alternative\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "music.hiphop.subgenres"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Opera",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "beethoven",
              "descriptions": [
                {
                  "text": "Produces the title of an opera by Ludwig van Beethoven."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Opera.beethoven #=> \"Fidelio\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "opera.german.by_ludwig_van_beethoven"
                }
              ]
            },
            {
              "name": "bellini",
              "descriptions": [
                {
                  "text": "Produces the title of an opera by Vincenzo Bellini."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Opera.bellini #=> \"Norma\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "opera.italian.by_vincenzo_bellini"
                }
              ]
            },
            {
              "name": "berg",
              "descriptions": [
                {
                  "text": "Produces the title of an opera by Alban Berg."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Opera.berg #=> \"Wozzeck\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "opera.german.by_alban_berg"
                }
              ]
            },
            {
              "name": "berlioz",
              "descriptions": [
                {
                  "text": "Produces the title of an opera by Hector Berlioz."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Opera.berlioz #=> \"Les Troyens\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "opera.french.by_hector_berlioz"
                }
              ]
            },
            {
              "name": "bizet",
              "descriptions": [
                {
                  "text": "Produces the title of an opera by Georges Bizet."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Opera.bizet #=> \"Carmen\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "opera.french.by_georges_bizet"
                }
              ]
            },
            {
              "name": "donizetti",
              "descriptions": [
                {
                  "text": "Produces the title of an opera by Gaetano Donizetti."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Opera.donizetti #=> \"Lucia di Lammermoor\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "opera.italian.by_gaetano_donizetti"
                }
              ]
            },
            {
              "name": "gluck",
              "descriptions": [
                {
                  "text": "Produces the title of an opera by Christoph Willibald Gluck."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Opera.gluck #=> \"Orfeo ed Euridice\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "opera.italian.by_christoph_willibald_gluck"
                }
              ]
            },
            {
              "name": "gluck_french",
              "descriptions": [
                {
                  "text": "Produces the title of a French opera by Christoph Willibald Gluck."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Opera.gluck_fr #=> \"Orphee et Euridice\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "opera.french.by_christoph_willibald_gluck"
                }
              ]
            },
            {
              "name": "gluck_italian",
              "descriptions": [
                {
                  "text": "Produces the title of an Italian opera by Christoph Willibald Gluck."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Opera.gluck_it #=> \"Orfeo ed Euridice\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "opera.italian.by_christoph_willibald_gluck"
                }
              ]
            },
            {
              "name": "gounod",
              "descriptions": [
                {
                  "text": "Produces the title of an opera by Charles Gounod."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Opera.gounod #=> \"Faust\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "opera.french.by_charles_gounod"
                }
              ]
            },
            {
              "name": "mozart",
              "descriptions": [
                {
                  "text": "Produces the title of an opera by Wolfgang Amadeus Mozart."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Opera.mozart #=> \"Die Zauberfloete\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "opera.italian.by_wolfgang_amadeus_mozart"
                }
              ]
            },
            {
              "name": "mozart_german",
              "descriptions": [
                {
                  "text": "Produces the title of a German opera by Wolfgang Amadeus Mozart."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Opera.mozart_ger #=> \"Die Zauberfloete\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "opera.german.by_wolfgang_amadeus_mozart"
                }
              ]
            },
            {
              "name": "mozart_italian",
              "descriptions": [
                {
                  "text": "Produces the title of an Italian opera by Wolfgang Amadeus Mozart."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Opera.mozart_it #=> \"Cosi fan tutte\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "opera.italian.by_wolfgang_amadeus_mozart"
                }
              ]
            },
            {
              "name": "ravel",
              "descriptions": [
                {
                  "text": "Produces the title of an opera by Maurice Ravel."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Opera.ravel #=> \"L'enfant et les sortileges\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "opera.french.by_maurice_ravel"
                }
              ]
            },
            {
              "name": "rossini",
              "descriptions": [
                {
                  "text": "Produces the title of an opera by Gioacchino Rossini."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Opera.rossini #=> \"Il Barbiere di Siviglia\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "opera.italian.by_gioacchino_rossini"
                }
              ]
            },
            {
              "name": "saint_saens",
              "descriptions": [
                {
                  "text": "Produces the title of an opera by Camille Saint-Saens."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Opera.saint_saens #=> \"Samson and Delilah\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "opera.french.by_camille_saint_saens"
                }
              ]
            },
            {
              "name": "schubert",
              "descriptions": [
                {
                  "text": "Produces the title of an opera by Franz Schubert."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Opera.schubert #=> \"Alfonso und Estrella\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "opera.german.by_franz_schubert"
                }
              ]
            },
            {
              "name": "schumann",
              "descriptions": [
                {
                  "text": "Produces the title of an opera by Robert Schumann."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Opera.schumann #=> \"Genoveva\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "opera.german.by_robert_schumann"
                }
              ]
            },
            {
              "name": "strauss",
              "descriptions": [
                {
                  "text": "Produces the title of an opera by Richard Strauss."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Opera.strauss #=> \"Elektra\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "opera.german.by_richard_strauss"
                }
              ]
            },
            {
              "name": "verdi",
              "descriptions": [
                {
                  "text": "Produces the title of an opera by Giuseppe Verdi."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Opera.verdi #=> \"Il Trovatore\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "opera.italian.by_giuseppe_verdi"
                }
              ]
            },
            {
              "name": "wagner",
              "descriptions": [
                {
                  "text": "Produces the title of an opera by Richard Wagner."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Opera.wagner #=> \"Tristan und Isolde\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "opera.german.by_richard_wagner"
                }
              ]
            },
            {
              "name": "weber",
              "descriptions": [
                {
                  "text": "Produces the title of an opera by Carl Maria von Weber."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Opera.weber #=> \"Der Freischuetz\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "opera.german.by_carl_maria_von_weber"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "PearlJam",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "album",
              "descriptions": [
                {
                  "text": "Produces the name of an album by Pearl Jam."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::PearlJam.album #=> \"Ten\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "pearl_jam.albums"
                }
              ]
            },
            {
              "name": "musician",
              "descriptions": [
                {
                  "text": "Produces the name of a member of Pearl Jam (current and former).\n                                <p>Produces the name of a member of Pearl Jam (current and former)</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::PearlJam.musician #=> \"Eddie Vedder\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "pearl_jam.musicians"
                }
              ]
            },
            {
              "name": "song",
              "descriptions": [
                {
                  "text": "Produces the name of a song by Pearl Jam."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::PearlJam.song #=> \"Even Flow\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "pearl_jam.songs"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Phish",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "album",
              "descriptions": [
                {
                  "text": "Produces the name of a album by Phish."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Phish.album #=> \"Fuego\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "phish.albums"
                }
              ]
            },
            {
              "name": "musician",
              "descriptions": [
                {
                  "text": "Produces the name of a musician in Phish."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Phish.musician #=> \"Trey Anastasio\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "phish.musicians"
                }
              ]
            },
            {
              "name": "song",
              "descriptions": [
                {
                  "text": "Produces the name of a song by Phish."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Phish.song #=> \"Tweezer\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "phish.songs"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Prince",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "album",
              "descriptions": [
                {
                  "text": "Produces a random Prince album."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Prince.album #=> \"The Gold Experience\"\nFaker::Music::Prince.album #=> \"Purple Rain\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "prince.album"
                }
              ]
            },
            {
              "name": "band",
              "descriptions": [
                {
                  "text": "Produces a random Prince-associated band."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Prince.band #=> \"The New Power Generation\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "prince.band"
                }
              ]
            },
            {
              "name": "lyric",
              "descriptions": [
                {
                  "text": "Produces a random Prince song lyric."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Prince.lyric #=> \"Dearly beloved, we are gathered here today to get through this thing called life.\"\nFaker::Music::Prince.lyric #=> \"You were so hard to find, the beautiful ones, they hurt you every time.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "prince.lyric"
                }
              ]
            },
            {
              "name": "song",
              "descriptions": [
                {
                  "text": "Produces a random Prince song."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Prince.song #=> \"Raspberry Beret\"\nFaker::Music::Prince.song #=> \"Starfish And Coffee\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "prince.song"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "RockBand",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "name",
              "descriptions": [
                {
                  "text": "Produces the name of a rock band."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::RockBand.name #=> \"Led Zeppelin\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "rock_band.name"
                }
              ]
            },
            {
              "name": "song",
              "descriptions": [
                {
                  "text": "Produces a rock song."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::RockBand.song #=> \"Dani California\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "rock_band.song"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Rush",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "album",
              "descriptions": [
                {
                  "text": "Produces the name of an album by Rush.\n                                <p>Produces the name of an album by Rush</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Rush.album #=> \"Hold Your Fire\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "rush.albums"
                }
              ]
            },
            {
              "name": "player",
              "descriptions": [
                {
                  "text": "Produces the name of a member of Rush.\n                                <p>Produces the name of a member of Rush</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::Rush.player #=> \"Geddy Lee\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "rush.players"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "SmashingPumpkins",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "album",
              "descriptions": [
                {
                  "text": "Produces the name of an album by the Smashing Pumpkins."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::SmashingPumpkins.album #=> \"Siamese Dream\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "smashing_pumpkins.albums"
                }
              ]
            },
            {
              "name": "lyric",
              "descriptions": [
                {
                  "text": "Produces a random Smashing Pumpkins song lyric."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::SmashingPumpkins.lyric #=> \"Despite all my rage, I am still just a rat in a cage\"\nFaker::Music::SmashingPumpkins.lyric #=> \"Breathin' underwater, and livin' under glass\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "smashing_pumpkins.lyric"
                }
              ]
            },
            {
              "name": "musician",
              "descriptions": [
                {
                  "text": "Produces the name of a member of the Smashing Pumpkins (current and former).\n                                <p>Produces the name of a member of the Smashing Pumpkins (current and former)</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::SmashingPumpkins.musician #=> \"Billy Corgan\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "smashing_pumpkins.musicians"
                }
              ]
            },
            {
              "name": "song",
              "descriptions": [
                {
                  "text": "Produces the name of a song by the Smashing Pumpkins."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::SmashingPumpkins.song #=> \"Stand Inside My Love\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "smashing_pumpkins.songs"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "UmphreysMcgee",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "song",
              "descriptions": [
                {
                  "text": "Produces the name of a song by Umphrey's McGee."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Music::UmphreysMcgee.song #=> \"Dump City\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "umphreys_mcgee.song"
                }
              ]
            }
          ],
          "classes": []
        }
      ]
    },
    {
      "name": "Name",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "female_first_name",
          "descriptions": [
            {
              "text": "Produces a random female first name."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Name.female_first_name #=> \"Natasha\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "name.female_first_name"
            }
          ]
        },
        {
          "name": "first_name",
          "descriptions": [
            {
              "text": "Produces a random first name."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Name.first_name #=> \"Kaci\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "name.first_name"
            }
          ]
        },
        {
          "name": "initials",
          "descriptions": [
            {
              "text": "Produces random initials."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "number",
              "type": "Integer",
              "default": "3",
              "descriptions": [
                {
                  "text": "<p>Number of digits that the generated initials should have.</p>"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Name.initials            #=> \"NJM\"\nFaker::Name.initials(number: 2) #=> \"NM\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(number: 3)\n\t\t\t\t(0...number).map { rand(65..90).chr }.join"
            }
          ]
        },
        {
          "name": "last_name",
          "descriptions": [
            {
              "text": "Produces a random last name."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Name.last_name #=> \"Ernser\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "name.last_name"
            }
          ]
        },
        {
          "name": "male_first_name",
          "descriptions": [
            {
              "text": "Produces a random male first name."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Name.male_first_name #=> \"Edward\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "name.male_first_name"
            }
          ]
        },
        {
          "name": "name",
          "descriptions": [
            {
              "text": "Produces a random name."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Name.name #=> \"Tyshawn Johns Sr.\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "name.name"
            }
          ]
        },
        {
          "name": "name_with_middle",
          "descriptions": [
            {
              "text": "Produces a random name with middle name."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Name.name_with_middle #=> \"Aditya Elton Douglas\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "name.name_with_middle"
            }
          ]
        },
        {
          "name": "neutral_first_name",
          "descriptions": [
            {
              "text": "Produces a random gender neutral first name."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Name.neutral_first_name #=> \"Casey\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "name.neutral_first_name"
            }
          ]
        },
        {
          "name": "prefix",
          "descriptions": [
            {
              "text": "Produces a random name prefix."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Name.prefix #=> \"Mr.\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "name.prefix"
            }
          ]
        },
        {
          "name": "suffix",
          "descriptions": [
            {
              "text": "Produces a random name suffix."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Name.suffix #=> \"IV\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "name.suffix"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Nation",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "capital_city",
          "descriptions": [
            {
              "text": "Produces a random capital city."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Nation.capital_city #=> \"Kathmandu\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "nation.capital_city"
            }
          ]
        },
        {
          "name": "flag",
          "descriptions": [
            {
              "text": "Produces a random national flag emoji."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Nation.flag #=> \"\uD83C\uDDEB\uD83C\uDDEE\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "sample(translate('faker.nation.flag')).pack('C*').force_encoding('utf-8')"
            }
          ]
        },
        {
          "name": "language",
          "descriptions": [
            {
              "text": "Produces a random national language."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Nation.language #=> \"Nepali\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "nation.language"
            }
          ]
        },
        {
          "name": "national_sport",
          "descriptions": [
            {
              "text": "Produces a random national sport."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Nation.national_sport #=> \"dandi biyo\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "team.sport"
            }
          ]
        },
        {
          "name": "nationality",
          "descriptions": [
            {
              "text": "Produces a random nationality."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Nation.nationality #=> \"Nepalese\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "nation.nationality"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "NationalHealthService",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "british_number",
          "descriptions": [
            {
              "text": "Produces a random British NHS number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::NationalHealthService.british_number #=> \"403 958 5577\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "base_number = rand(400_000_001...499_999_999)\n        # If the check digit is equivalent to 10, the number is invalid.\n        # See https://en.wikipedia.org/wiki/NHS_number\n        base_number -= 1 if check_digit(number: base_number) == 10\n        \"#{base_number}#{check_digit(number: base_number)}\".to_s\n                                                           .chars\n                                                           .insert(3, ' ')\n                                                           .insert(7, ' ')\n                                                           .join"
            }
          ]
        },
        {
          "name": "check_digit",
          "descriptions": [
            {
              "text": "Produces a random British NHS number's check digit."
            }
          ],
          "return_type": "Integer",
          "return_desc": "",
          "arguments": [
            {
              "name": "number",
              "type": "Integer",
              "default": "0",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the NHS number the check digit belongs to.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::NationalHealthService.check_digit(number: 400_012_114) #=> 6"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(number: 0)\n        sum = 0\n        number.to_s.chars.each_with_index do |digit, idx|\n          position = idx + 1\n          sum += (digit.to_i * (11 - position))"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "NatoPhoneticAlphabet",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "code_word",
          "descriptions": [
            {
              "text": "Produces a code word from the NATO phonetic alphabet."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::NatoPhoneticAlphabet.code_word #=> \"Hotel\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "nato_phonetic_alphabet.code_word"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Number",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "between",
          "descriptions": [
            {
              "text": "Produces a number between two provided values.\n                            <p>Boundaries are inclusive.</p>\n                        "
            }
          ],
          "return_type": "Numeric",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "from",
              "type": "Numeric",
              "descriptions": [
                {
                  "text": "\n<p>The lowest number to include.</p>\n"
                }
              ]
            },
            {
              "name": "to",
              "type": "Numeric",
              "default": "5000.00",
              "descriptions": [
                {
                  "text": "\n<p>The highest number to include.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Number.between(from: 1, to: 10) #=> 7\nFaker::Number.between(from: 0.0, to: 1.0) #=> 0.7844640543957383"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(from: 1.00, to: 5000.00)\n        Faker::Base.rand_in_range(from, to)"
            }
          ]
        },
        {
          "name": "binary",
          "descriptions": [
            {
              "text": "Produces a number in binary format."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "digits",
              "type": "Integer",
              "default": "4",
              "descriptions": [
                {
                  "text": "\n<p>Number of digits to generate the binary as string</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Number.binary(digits: 4) #=> \"1001\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(digits: 4)\n        bin = ''\n        digits.times { bin += rand(2).to_s(2) }\n        bin"
            }
          ]
        },
        {
          "name": "decimal",
          "descriptions": [
            {
              "text": "Produces a float."
            }
          ],
          "return_type": "Float",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "l_digits",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>Number of digits that the generated decimal should have to the left of the decimal point.</p>\n"
                }
              ]
            },
            {
              "name": "r_digits",
              "type": "Integer",
              "default": "2",
              "descriptions": [
                {
                  "text": "\n<p>Number of digits that the generated decimal should have to the right of the decimal point.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Number.decimal(l_digits: 2) #=> 11.88\nFaker::Number.decimal(l_digits: 3, r_digits: 3) #=> 181.843"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(l_digits: 5, r_digits: 2)\n        l_d = number(digits: l_digits)\n\n        # Ensure the last digit is not zero\n        # so it does not get truncated on converting to float\n        r_d = generate(r_digits - 1).join + non_zero_digit.to_s\n\n        \"#{l_d}.#{r_d}\".to_f"
            }
          ]
        },
        {
          "name": "decimal_part",
          "descriptions": [
            {
              "text": "Produce a number with a number of digits, preserves leading zeroes."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "digits",
              "type": "Integer",
              "default": "10",
              "descriptions": [
                {
                  "text": "\n<p>Number of digits that the generated number should have.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Number.decimal_part(digits: 2) #=> \"09\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(digits: 10)\n        num = ''\n        if digits > 1\n          num = non_zero_digit\n          digits -= 1"
            }
          ]
        },
        {
          "name": "digit",
          "descriptions": [
            {
              "text": "Produces a single-digit integer."
            }
          ],
          "return_type": "Integer",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Number.digit #=> 1"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "rand(10)"
            }
          ]
        },
        {
          "name": "generate",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(count)\n        return [] if count.zero?\n\n        Array.new(count) { digit }"
            }
          ]
        },
        {
          "name": "greater_than_zero",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(number)\n        should_be(number, :>)"
            }
          ]
        },
        {
          "name": "hexadecimal",
          "descriptions": [
            {
              "text": "Produces a number in hexadecimal format."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "digits",
              "type": "Integer",
              "default": "6",
              "descriptions": [
                {
                  "text": "\n<p>Number of digits in the he</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Number.hexadecimal(digits: 3) #=> \"e74\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(digits: 6)\n        hex = ''\n        digits.times { hex += rand(15).to_s(16) }\n        hex"
            }
          ]
        },
        {
          "name": "leading_zero_number",
          "descriptions": [
            {
              "text": "Produce a random number with a leading zero."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "digits",
              "type": "Integer",
              "default": "10",
              "descriptions": [
                {
                  "text": "\n<p>Number of digits that the generated number should have.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Number.leading_zero_number(digits: 10) #=> \"0669336915\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(digits: 10)\n        \"0#{(2..digits).collect { digit }.join}\""
            }
          ]
        },
        {
          "name": "less_than_zero",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(number)\n        should_be(number, :<)"
            }
          ]
        },
        {
          "name": "negative",
          "descriptions": [
            {
              "text": "Produces a negative float."
            }
          ],
          "return_type": "Float",
          "return_desc": "",
          "arguments": [
            {
              "name": "from",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>The lower boundary.</p>\n"
                }
              ]
            },
            {
              "name": "to",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>The higher boundary.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Number.negative #=> -4480.042585669558"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(from: -5000.00, to: -1.00)\n        random_number = between(from: from, to: to)\n\n        less_than_zero(random_number)"
            }
          ]
        },
        {
          "name": "non_zero_digit",
          "descriptions": [
            {
              "text": "Produces a non-zero single-digit integer."
            }
          ],
          "return_type": "Integer",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Number.non_zero_digit #=> 8"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "rand(1..9)"
            }
          ]
        },
        {
          "name": "normal",
          "descriptions": [
            {
              "text": "Produces a float given a mean and standard deviation."
            }
          ],
          "return_type": "Float",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "mean",
              "type": "Integer",
              "descriptions": [
                {
                  "text": ""
                }
              ]
            },
            {
              "name": "standard_deviation",
              "type": "Numeric",
              "default": "1",
              "descriptions": [
                {
                  "text": ""
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Number.normal(mean: 50, standard_deviation: 3.5) #=> 47.14669604069156"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(mean: 1, standard_deviation: 1)\n        theta = 2 * Math::PI * rand\n        rho = Math.sqrt(-2 * Math.log(1 - rand))\n        scale = standard_deviation * rho\n        mean + scale * Math.cos(theta)"
            }
          ]
        },
        {
          "name": "number",
          "descriptions": [
            {
              "text": "Produce a random number."
            }
          ],
          "return_type": "Integer",
          "return_desc": "",
          "arguments": [
            {
              "name": "digits",
              "type": "Integer",
              "default": "10",
              "descriptions": [
                {
                  "text": "\n<p>Number of digits that the generated number should have.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Number.number(digits: 10) #=> 1968353479"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(digits: 10)\n        return if digits < 1\n        return rand(0..9).round if digits == 1\n\n        # Ensure the first digit is not zero\n        ([non_zero_digit] + generate(digits - 1)).join.to_i"
            }
          ]
        },
        {
          "name": "positive",
          "descriptions": [
            {
              "text": "Produces a positive float."
            }
          ],
          "return_type": "Float",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "from",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>The lower boundary.</p>\n"
                }
              ]
            },
            {
              "name": "to",
              "type": "Integer",
              "default": "5000.00",
              "descriptions": [
                {
                  "text": "\n<p>The higher boundary.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Number.positive #=> 235.59238499107653"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(from: 1.00, to: 5000.00)\n        random_number = between(from: from, to: to)\n\n        greater_than_zero(random_number)"
            }
          ]
        },
        {
          "name": "should_be",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(number, method_to_compare)\n        if number.send(method_to_compare, 0)\n          number\n        else\n          number * -1"
            }
          ]
        },
        {
          "name": "within",
          "descriptions": [
            {
              "text": "Produces a number within two provided values.\n                            <p>Boundaries are inclusive or exclusive depending on the range passed.</p>\n                        "
            }
          ],
          "return_type": "Numeric",
          "return_desc": "",
          "arguments": [
            {
              "name": "range",
              "type": "Range",
              "default": "1.00..5000.00",
              "descriptions": [
                {
                  "text": "\n<p>The range from which to generate a number.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Number.within(range: 1..10) #=> 7\nFaker::Number.within(range: 0.0..1.0) #=> 0.7844640543957383"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(range: 1.00..5000.00)\n        between(from: range.min, to: range.max)"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Omniauth",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "apple",
          "descriptions": [
            {
              "text": "Generate a mock Omniauth response from Apple."
            }
          ],
          "return_type": "Hash",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "name",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>A specific name to return in the response.</p>\n"
                }
              ]
            },
            {
              "name": "email",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>A specific email to return in the response.</p>\n"
                }
              ]
            },
            {
              "name": "uid",
              "type": "String",
              "default": "nil",
              "descriptions": [
                {
                  "text": "\n<p>A specific UID to return in the response.</p>\n"
                }
              ]
            }
          ],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(name: nil, email: nil, uid: nil)\n        uid ||= \"#{Number.number(digits: 6)}.#{Number.hexadecimal(digits: 32)}.#{Number.number(digits: 4)}\"\n        auth = Omniauth.new(name: name, email: email)\n        {\n          provider: 'apple',\n          uid: uid,\n          info: {\n            sub: uid,\n            email: auth.email,\n            first_name: auth.first_name,\n            last_name: auth.last_name\n          },\n          credentials: {\n            token: Crypto.md5,\n            refresh_token: Crypto.md5,\n            expires_at: Time.forward.to_i,\n            expires: true\n          },\n          extra: {\n            raw_info: {\n              iss: 'https://appleid.apple.com',\n              aud: 'CLIENT_ID',\n              exp: Time.forward.to_i,\n              iat: Time.forward.to_i,\n              sub: uid,\n              at_hash: Crypto.md5,\n              auth_time: Time.forward.to_i,\n              email: auth.email,\n              email_verified: true\n            }\n          }\n        }"
            }
          ]
        },
        {
          "name": "auth0",
          "descriptions": [
            {
              "text": "Generate a mock Omniauth response from Auth0."
            }
          ],
          "return_type": "Hash",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "name",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>A specific name to return in the response.</p>\n"
                }
              ]
            },
            {
              "name": "email",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>A specific email to return in the response.</p>\n"
                }
              ]
            },
            {
              "name": "uid",
              "type": "String",
              "default": "nil",
              "descriptions": [
                {
                  "text": "\n<p>A specific UID to return in the response.</p>\n"
                }
              ]
            }
          ],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(name: nil, email: nil, uid: nil)\n        uid ||= \"auth0|#{Number.hexadecimal(digits: 24)}\"\n        auth = Omniauth.new(name: name, email: email)\n        {\n          provider: 'auth0',\n          uid: uid,\n          info: {\n            name: uid,\n            nickname: auth.name,\n            email: auth.email,\n            image: image\n          },\n          credentials: {\n            expires_at: Time.forward.to_i,\n            expires: true,\n            token_type: 'Bearer',\n            id_token: Crypto.sha256,\n            token: Crypto.md5,\n            refresh_token: Crypto.md5\n          },\n          extra: {\n            raw_info: {\n              email: auth.email,\n              email_verified: true,\n              iss: 'https://auth0.com/',\n              sub: uid,\n              aud: 'Auth012345',\n              iat: Time.forward.to_i,\n              exp: Time.forward.to_i\n            }\n          }\n        }"
            }
          ]
        },
        {
          "name": "city_state",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "type": "Expression",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "#{Address.city}, #{Address.state}"
            }
          ]
        },
        {
          "name": "facebook",
          "descriptions": [
            {
              "text": "Generate a mock Omniauth response from Facebook."
            }
          ],
          "return_type": "Hash",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "name",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>A specific name to return in the response.</p>\n"
                }
              ]
            },
            {
              "name": "email",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>A specific email to return in the response.</p>\n"
                }
              ]
            },
            {
              "name": "username",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>A specific username to return in the response.</p>\n"
                }
              ]
            },
            {
              "name": "uid",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>A specific UID to return in the response.</p>\n"
                }
              ]
            }
          ],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(name: nil, email: nil, username: nil, uid: Number.number(digits: 7).to_s)\n        auth = Omniauth.new(name: name, email: email)\n        username ||= \"#{auth.first_name.downcase[0]}#{auth.last_name.downcase}\"\n        {\n          provider: 'facebook',\n          uid: uid,\n          info: {\n            email: auth.email,\n            name: auth.name,\n            first_name: auth.first_name,\n            last_name: auth.last_name,\n            image: image,\n            verified: random_boolean\n          },\n          credentials: {\n            token: Crypto.md5,\n            expires_at: Time.forward.to_i,\n            expires: true\n          },\n          extra: {\n            raw_info: {\n              id: uid,\n              name: auth.name,\n              first_name: auth.first_name,\n              last_name: auth.last_name,\n              link: \"http://www.facebook.com/#{username}\",\n              username: username,\n              location: {\n                id: Number.number(digits: 9).to_s,\n                name: city_state\n              },\n              gender: gender,\n              email: auth.email,\n              timezone: timezone,\n              locale: 'en_US',\n              verified: random_boolean,\n              updated_time: Time.backward.iso8601\n            }\n          }\n        }"
            }
          ]
        },
        {
          "name": "gender",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "shuffle(%w[male female]).pop"
            }
          ]
        },
        {
          "name": "github",
          "descriptions": [
            {
              "text": "Generate a mock Omniauth response from Github."
            }
          ],
          "return_type": "Hash",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "name",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>A specific name to return in the response.</p>\n"
                }
              ]
            },
            {
              "name": "email",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>A specific email to return in the response.</p>\n"
                }
              ]
            },
            {
              "name": "uid",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>A specific UID to return in the response.</p>\n"
                }
              ]
            }
          ],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(name: nil, email: nil, uid: Number.number(digits: 8).to_s)\n        auth = Omniauth.new(name: name, email: email)\n        login = auth.name.downcase.tr(' ', '-')\n        html_url = \"https://github.com/#{login}\"\n        api_url = \"https://api.github.com/users/#{login}\"\n        {\n          provider: 'github',\n          uid: uid,\n          info: {\n            nickname: login,\n            email: auth.email,\n            name: auth.name,\n            image: image,\n            urls: {\n              GitHub: html_url\n            }\n          },\n          credentials: {\n            token: Crypto.md5,\n            expires: false\n          },\n          extra: {\n            raw_info: {\n              login: login,\n              id: uid,\n              avatar_url: image,\n              gravatar_id: '',\n              url: api_url,\n              html_url: html_url,\n              followers_url: \"#{api_url}/followers\",\n              following_url: \"#{api_url}/following{/other_user}\",\n              gists_url: \"#{api_url}/gists{/gist_id}\",\n              starred_url: \"#{api_url}/starred{/owner}{/repo}\",\n              subscriptions_url: \"#{api_url}/subscriptions\",\n              organizations_url: \"#{api_url}/orgs\",\n              repos_url: \"#{api_url}/repos\",\n              events_url: \"#{api_url}/events{/privacy}\",\n              received_events_url: \"#{api_url}/received_events\",\n              type: 'User',\n              site_admin: random_boolean,\n              name: auth.name,\n              company: nil,\n              blog: nil,\n              location: city_state,\n              email: auth.email,\n              hireable: nil,\n              bio: nil,\n              public_repos: random_number_from_range(1..1000),\n              public_gists: random_number_from_range(1..1000),\n              followers: random_number_from_range(1..1000),\n              following: random_number_from_range(1..1000),\n              created_at: Time.backward(days: 36_400).iso8601,\n              updated_at: Time.backward(days: 2).iso8601\n            }\n          }\n        }"
            }
          ]
        },
        {
          "name": "google",
          "descriptions": [
            {
              "text": "Generate a mock Omniauth response from Google."
            }
          ],
          "return_type": "Hash",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "name",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>A specific name to return in the response.</p>\n"
                }
              ]
            },
            {
              "name": "email",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>A specific email to return in the response.</p>\n"
                }
              ]
            },
            {
              "name": "uid",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>A specific UID to return in the response.</p>\n"
                }
              ]
            }
          ],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(name: nil, email: nil, uid: Number.number(digits: 9).to_s)\n        auth = Omniauth.new(name: name, email: email)\n        {\n          provider: 'google_oauth2',\n          uid: uid,\n          info: {\n            name: auth.name,\n            first_name: auth.first_name,\n            last_name: auth.last_name,\n            email: auth.email,\n            image: image\n          },\n          credentials: {\n            token: Crypto.md5,\n            refresh_token: Crypto.md5,\n            expires_at: Time.forward.to_i,\n            expires: true\n          },\n          extra: {\n            raw_info: {\n              sub: uid,\n              email: auth.email,\n              email_verified: random_boolean.to_s,\n              name: auth.name,\n              given_name: auth.first_name,\n              family_name: auth.last_name,\n              profile: \"https://plus.google.com/#{uid}\",\n              picture: image,\n              gender: gender,\n              birthday: Date.backward(days: 36_400).strftime('%Y-%m-%d'),\n              locale: 'en',\n              hd: \"#{Company.name.downcase}.com\"\n            },\n            id_info: {\n              iss: 'accounts.google.com',\n              at_hash: Crypto.md5,\n              email_verified: true,\n              sub: Number.number(digits: 28).to_s,\n              azp: 'APP_ID',\n              email: auth.email,\n              aud: 'APP_ID',\n              iat: Time.forward.to_i,\n              exp: Time.forward.to_i,\n              openid_id: \"https://www.google.com/accounts/o8/id?id=#{uid}\"\n            }\n          }\n        }"
            }
          ]
        },
        {
          "name": "image",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "Placeholdit.image"
            }
          ]
        },
        {
          "name": "linkedin",
          "descriptions": [
            {
              "text": "Generate a mock Omniauth response from LinkedIn."
            }
          ],
          "return_type": "Hash",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "name",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>A specific name to return in the response.</p>\n"
                }
              ]
            },
            {
              "name": "email",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>A specific email to return in the response.</p>\n"
                }
              ]
            },
            {
              "name": "uid",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>A specific UID to return in the response.</p>\n"
                }
              ]
            }
          ],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(name: nil, email: nil, uid: Number.number(digits: 6).to_s)\n        auth = Omniauth.new(name: name, email: email)\n        first_name = auth.first_name.downcase\n        last_name = auth.last_name.downcase\n        location = city_state\n        description = Lorem.sentence\n        token = Crypto.md5\n        secret = Crypto.md5\n        industry = Commerce.department\n        url = \"http://www.linkedin.com/in/#{first_name}#{last_name}\"\n        {\n          provider: 'linkedin',\n          uid: uid,\n          info: {\n            name: auth.name,\n            email: auth.email,\n            nickname: auth.name,\n            first_name: auth.first_name,\n            last_name: auth.last_name,\n            location: location,\n            description: description,\n            image: image,\n            phone: PhoneNumber.phone_number,\n            headline: description,\n            industry: industry,\n            urls: {\n              public_profile: url\n            }\n          },\n          credentials: {\n            token: token,\n            secret: secret\n          },\n          extra: {\n            access_token: {\n              token: token,\n              secret: secret,\n              consumer: nil,\n              params: {\n                oauth_token: token,\n                oauth_token_secret: secret,\n                oauth_expires_in: Time.forward.to_i,\n                oauth_authorization_expires_in: Time.forward.to_i\n              },\n              response: nil\n            },\n            raw_info: {\n              firstName: auth.first_name,\n              headline: description,\n              id: uid,\n              industry: industry,\n              lastName: auth.last_name,\n              location: {\n                country: { code: Address.country_code.downcase },\n                name: city_state.split(', ').first\n              },\n              pictureUrl: image,\n              publicProfileUrl: url\n            }\n          }\n        }"
            }
          ]
        },
        {
          "name": "random_boolean",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "shuffle([true, false]).pop"
            }
          ]
        },
        {
          "name": "random_number_from_range",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(range)\n        shuffle(range.to_a).pop"
            }
          ]
        },
        {
          "name": "timezone",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "shuffle((-12..12).to_a).pop"
            }
          ]
        },
        {
          "name": "twitter",
          "descriptions": [
            {
              "text": "Generate a mock Omniauth response from Twitter."
            }
          ],
          "return_type": "Hash",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "name",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>A specific name to return in the response.</p>\n"
                }
              ]
            },
            {
              "name": "nickname",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>A specific nickname to return in the response.</p>\n"
                }
              ]
            },
            {
              "name": "uid",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>A specific UID to return in the response.</p>\n"
                }
              ]
            }
          ],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(name: nil, nickname: nil, uid: Number.number(digits: 6).to_s)\n        auth = Omniauth.new(name: name)\n        nickname ||= auth.name.downcase.delete(' ')\n        location = city_state\n        description = Lorem.sentence\n        {\n          provider: 'twitter',\n          uid: uid,\n          info: {\n            nickname: nickname,\n            name: auth.name,\n            location: location,\n            image: image,\n            description: description,\n            urls: {\n              Website: nil,\n              Twitter: \"https://twitter.com/#{nickname}\"\n            }\n          },\n          credentials: {\n            token: Crypto.md5,\n            secret: Crypto.md5\n          },\n          extra: {\n            access_token: '',\n            raw_info: {\n              name: auth.name,\n              listed_count: random_number_from_range(1..10),\n              profile_sidebar_border_color: Color.hex_color,\n              url: nil,\n              lang: 'en',\n              statuses_count: random_number_from_range(1..1000),\n              profile_image_url: image,\n              profile_background_image_url_https: image,\n              location: location,\n              time_zone: Address.city,\n              follow_request_sent: random_boolean,\n              id: uid,\n              profile_background_tile: random_boolean,\n              profile_sidebar_fill_color: Color.hex_color,\n              followers_count: random_number_from_range(1..10_000),\n              default_profile_image: random_boolean,\n              screen_name: '',\n              following: random_boolean,\n              utc_offset: timezone,\n              verified: random_boolean,\n              favourites_count: random_number_from_range(1..10),\n              profile_background_color: Color.hex_color,\n              is_translator: random_boolean,\n              friends_count: random_number_from_range(1..10_000),\n              notifications: random_boolean,\n              geo_enabled: random_boolean,\n              profile_background_image_url: image,\n              protected: random_boolean,\n              description: description,\n              profile_link_color: Color.hex_color,\n              created_at: Time.backward.strftime('%a %b %d %H:%M:%S %z %Y'),\n              id_str: uid,\n              profile_image_url_https: image,\n              default_profile: random_boolean,\n              profile_use_background_image: random_boolean,\n              entities: {\n                description: {\n                  urls: []\n                }\n              },\n              profile_text_color: Color.hex_color,\n              contributors_enabled: random_boolean\n            }\n          }\n        }"
            }
          ]
        },
        {
          "name": "email",
          "descriptions": [
            {
              "text": "Returns the value of attribute email."
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "type": "Resolve"
            }
          ]
        },
        {
          "name": "first_name",
          "descriptions": [
            {
              "text": "Returns the value of attribute first_name."
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "type": "Resolve"
            }
          ]
        },
        {
          "name": "initialize",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "Omniauth",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(name: nil, email: nil)\n      super()\n\n      @name = name || \"#{Name.first_name} #{Name.last_name}\"\n      @email = email || Internet.email(name: self.name)\n      @first_name, @last_name = self.name.split"
            }
          ]
        },
        {
          "name": "last_name",
          "descriptions": [
            {
              "text": "Returns the value of attribute last_name."
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "type": "Resolve"
            }
          ]
        },
        {
          "name": "name",
          "descriptions": [
            {
              "text": "Returns the value of attribute name."
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "type": "Resolve"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "PhoneNumber",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "area_code",
          "descriptions": [
            {
              "text": "Produces a random area code."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::PhoneNumber.area_code #=> \"201\"\nFaker::PhoneNumber.area_code #=> \"613\"\nFaker::PhoneNumber.area_code #=> \"321\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "phone_number.area_code"
            }
          ]
        },
        {
          "name": "cell_phone",
          "descriptions": [
            {
              "text": "Produces a random cell phone number in a random format without the country code and it can have different dividers."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::PhoneNumber.cell_phone #=> \"(836) 115-8995\"\nFaker::PhoneNumber.cell_phone #=> \"382-597-5739\"\nFaker::PhoneNumber.cell_phone #=> \"316.828.1822\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "cell_phone.formats"
            }
          ]
        },
        {
          "name": "cell_phone_in_e164",
          "descriptions": [
            {
              "text": "Produces a random phone number in e164 format, i.e., without any dividers."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::PhoneNumber.cell_phone_in_e164 #=> \"+542024834991\"\nFaker::PhoneNumber.cell_phone_in_e164 #=> \"+8522846847703\"\nFaker::PhoneNumber.cell_phone_in_e164 #=> \"+649477546575\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "cell_phone_with_country_code.delete('^+0-9')"
            }
          ]
        },
        {
          "name": "cell_phone_with_country_code",
          "descriptions": [
            {
              "text": "Produces a random cell phone number with country code."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::PhoneNumber.cell_phone_with_country_code #=> \"+852 (190) 987-9034\"\nFaker::PhoneNumber.cell_phone_with_country_code #=> \"+64 (820) 583-6474\"\nFaker::PhoneNumber.cell_phone_with_country_code #=> \"+1 591.871.7985\""
            }
          ],
          "implementations": [
            {
              "type": "Expression",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "#{country_code} #{cell_phone}"
            }
          ]
        },
        {
          "name": "country_code",
          "descriptions": [
            {
              "text": "Produces a random country code."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::PhoneNumber.country_code #=> \"+20\"\nFaker::PhoneNumber.country_code #=> \"+39\"\nFaker::PhoneNumber.country_code #=> \"+852\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "phone_number.country_code"
            }
          ]
        },
        {
          "name": "exchange_code",
          "descriptions": [
            {
              "text": "Produces a random exchange code."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::PhoneNumber.exchange_code #=> \"208\"\nFaker::PhoneNumber.exchange_code #=> \"415\"\nFaker::PhoneNumber.exchange_code #=> \"652\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "phone_number.exchange_code"
            }
          ]
        },
        {
          "name": "phone_number",
          "descriptions": [
            {
              "text": "Produces a phone number in a random format without the country code and it can have different dividers."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::PhoneNumber.phone_number #=> \"(504) 113-1705\"\nFaker::PhoneNumber.phone_number #=> \"662.291.7201\"\nFaker::PhoneNumber.phone_number #=> \"9415283713\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "phone_number.formats"
            }
          ]
        },
        {
          "name": "phone_number_with_country_code",
          "descriptions": [
            {
              "text": "Produces a random phone number with country code."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::PhoneNumber.phone_number_with_country_code #=> \"+55 466-746-6882\"\nFaker::PhoneNumber.phone_number_with_country_code #=> \"+81 3718219558\"\nFaker::PhoneNumber.phone_number_with_country_code #=> \"+49 140 957 9846\""
            }
          ],
          "implementations": [
            {
              "type": "Expression",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "#{country_code} #{phone_number}"
            }
          ]
        },
        {
          "name": "subscriber_number",
          "descriptions": [
            {
              "text": "Produces a random extension / subscriber number.\n                            <p>Can be used for both extensions and last four digits of phone number.</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "length",
              "type": "Integer",
              "default": "4",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the length of the return value. Defaults to 4.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::PhoneNumber.subscriber_number #=> \"3873\"\nFaker::PhoneNumber.subscriber_number(length: 2) #=> \"39\"\nFaker::PhoneNumber.extension #=> \"3764\"\nFaker::PhoneNumber.extension(length: 2) => \"37\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(length: 4)\n        if !length.is_a?(Integer) || length > 10\n          raise ArgumentError, 'length must be an Integer and be lesser than 10'"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Placeholdit",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "generate_color",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "format('%06x', (rand * 0xffffff))"
            }
          ]
        },
        {
          "name": "image",
          "descriptions": [
            {
              "text": "Produces a random placeholder image from https://via.placeholder.com.\n                            <pre><code>Faker::Placeholdit.image #=&gt; &quot;https://via.placeholder.com/300x300.png&quot;\n                            Faker::Placeholdit.image(size: &#39;50x50&#39;) #=&gt; &quot;https://via.placeholder.com/50x50.png&quot;\n                            Faker::Placeholdit.image(size: &#39;50x50&#39;, format: &#39;jpg&#39;) #=&gt; &quot;https://via.placeholder.com/50x50.jpg&quot;\n                            Faker::Placeholdit.image(size: &#39;50x50&#39;, format: &#39;gif&#39;, background_color: &#39;ffffff&#39;) #=&gt; &quot;https://via.placeholder.com/50x50.gif/ffffff&quot;\n                            Faker::Placeholdit.image(size: &#39;50x50&#39;, format: &#39;jpeg&#39;, background_color: :random) #=&gt; &quot;https://via.placeholder.com/50x50.jpeg/39eba7&quot;\n                            Faker::Placeholdit.image(size: &#39;50x50&#39;, format: &#39;jpeg&#39;, background_color: &#39;ffffff&#39;, text_color: &#39;000&#39;) #=&gt; &quot;https://via.placeholder.com/50x50.jpeg/ffffff/000&quot;\n                            Faker::Placeholdit.image(size: &#39;50x50&#39;, format: &#39;jpg&#39;, background_color: &#39;ffffff&#39;, text_color: &#39;000&#39;, text: &#39;Some Custom Text&#39;) #=&gt; &quot;https://via.placeholder.com/50x50.jpg/ffffff/000?text=Some Custom Text&quot;\n                            </code></pre>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "size",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the image’s size, dimensions separated by ‘x’.</p>\n"
                }
              ]
            },
            {
              "name": "format",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the image’s extension.</p>\n"
                }
              ]
            },
            {
              "name": "background_color",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the background color, either in hexadecimal format (without #) or as :random.</p>\n"
                }
              ]
            },
            {
              "name": "text_color",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the text color, either in hexadecimal format (without #) or as :random.</p>\n"
                }
              ]
            },
            {
              "name": "text",
              "type": "String",
              "default": "nil",
              "descriptions": [
                {
                  "text": "\n<p>Specifies a custom text to be used.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "# Keyword arguments: size, format, background_color, text_color, text"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(size: '300x300', format: 'png', background_color: nil, text_color: nil, text: nil)\n        background_color = generate_color if background_color == :random\n        text_color = generate_color if text_color == :random\n\n        raise ArgumentError, 'Size should be specified in format 300x300' unless size =~ /^[0-9]+x[0-9]+$/\n        raise ArgumentError, \"Supported formats are #{SUPPORTED_FORMATS.join(', ')}\" unless SUPPORTED_FORMATS.include?(format)\n        raise ArgumentError, \"background_color must be a hex value without '#'\" unless background_color.nil? || background_color =~ /((?:^\\h{3}$)|(?:^\\h{6}$)){1}(?!.*\\H)/\n        raise ArgumentError, \"text_color must be a hex value without '#'\" unless text_color.nil? || text_color =~ /((?:^\\h{3}$)|(?:^\\h{6}$)){1}(?!.*\\H)/\n\n        image_url = \"https://via.placeholder.com/#{size}.#{format}\"\n        image_url += \"/#{background_color}\" if background_color\n        image_url += \"/#{text_color}\" if text_color\n        image_url += \"?text=#{text}\" if text\n        image_url"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "ProgrammingLanguage",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "creator",
          "descriptions": [
            {
              "text": "Produces the name of a programming language's creator."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::ProgrammingLanguage.creator #=> \"Yukihiro Matsumoto\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "programming_language.creator"
            }
          ]
        },
        {
          "name": "name",
          "descriptions": [
            {
              "text": "Produces the name of a programming language."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::ProgrammingLanguage.name #=> \"Ruby\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "programming_language.name"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Quote",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "famous_last_words",
          "descriptions": [
            {
              "text": "Produces a famous last words quote."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Quote.famous_last_words #=> \"My vocabulary did this to me. Your love will let you go on...\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "quote.famous_last_words"
            }
          ]
        },
        {
          "name": "fortune_cookie",
          "descriptions": [
            {
              "text": "Produces a quote from a fortune cookie."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Quote.fortune_cookie #=> \"This cookie senses that you are superstitious; it is an inclination that is bad for your mental health.\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "quote.fortune_cookie"
            }
          ]
        },
        {
          "name": "jack_handey",
          "descriptions": [
            {
              "text": "Produces a quote from Deep Thoughts by Jack Handey."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Quote.jack_handey # => \"I hope life isn't a big joke, because I don't get it.\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "quote.jack_handey"
            }
          ]
        },
        {
          "name": "matz",
          "descriptions": [
            {
              "text": "Produces a quote from Matz."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Quote.matz #=> \"You want to enjoy life, don't you? If you get your job done quickly and your job is fun, that's good isn't it? That's the purpose of life, partly. Your life is better.\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "quote.matz"
            }
          ]
        },
        {
          "name": "mitch_hedberg",
          "descriptions": [
            {
              "text": "Produces a quote from comedian Mitch Hedberg."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Quote.mitch_hedberg # => \"I like Kit-Kats, unless I'm with four or more people.\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "quote.mitch_hedberg"
            }
          ]
        },
        {
          "name": "most_interesting_man_in_the_world",
          "descriptions": [
            {
              "text": "Produces a quote about the most interesting man in the world."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Quote.most_interesting_man_in_the_world #=> \"He can speak Russian... in French\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "quote.most_interesting_man_in_the_world"
            }
          ]
        },
        {
          "name": "robin",
          "descriptions": [
            {
              "text": "Produces a Robin quote."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Quote.robin #=> \"Holy Razors Edge\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "quote.robin"
            }
          ]
        },
        {
          "name": "singular_siegler",
          "descriptions": [
            {
              "text": "Produces a singular siegler quote."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Quote.singular_siegler #=> \"Texas!\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "quote.singular_siegler"
            }
          ]
        },
        {
          "name": "yoda",
          "descriptions": [
            {
              "text": "Produces a quote from Yoda."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Quote.yoda #=> \"Use your feelings, Obi-Wan, and find him you will.\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "quote.yoda"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Quotes",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [],
      "classes": [
        {
          "name": "Chiquito",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "expression",
              "descriptions": [
                {
                  "text": "Produces an Expression from Chiquito.\n                                <p>Produces an Expression from Chiquito</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Quotes::Chiquito.expression # => \"Ereh un torpedo!\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "sample(expressions)"
                }
              ]
            },
            {
              "name": "expressions",
              "descriptions": [
                {
                  "text": ""
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "chiquito.expressions"
                }
              ]
            },
            {
              "name": "joke",
              "descriptions": [
                {
                  "text": "Produces a joke from Chiquito.\n                                <p>Produces a joke from Chiquito</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Quotes::Chiquito.joke # => \"- Papar papar llevame al circo!\n- Noorl! El que quiera verte que venga a la casa\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "sample(jokes)"
                }
              ]
            },
            {
              "name": "jokes",
              "descriptions": [
                {
                  "text": ""
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "chiquito.jokes"
                }
              ]
            },
            {
              "name": "sentence",
              "descriptions": [
                {
                  "text": "Produces a sentence from Chiquito.\n                                <p>Produces a sentence from Chiquito</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Quotes::Chiquito.sentence # => \"Te llamo trigo por no llamarte Rodrigo\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "sample(sentences)"
                }
              ]
            },
            {
              "name": "sentences",
              "descriptions": [
                {
                  "text": ""
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "chiquito.sentences"
                }
              ]
            },
            {
              "name": "term",
              "descriptions": [
                {
                  "text": "Produces a concept from Chiquito.\n                                <p>Produces a concept from Chiquito</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Quotes::Chiquito.term # => \"Fistro\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "sample(terms)"
                }
              ]
            },
            {
              "name": "terms",
              "descriptions": [
                {
                  "text": ""
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "chiquito.terms"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Rajnikanth",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "joke",
              "descriptions": [
                {
                  "text": "Produces a Rajnikanth.\n                                <p>Original list of jokes: <a href=\"http://www.rajinikanthjokes.com\">www.rajinikanthjokes.com</a>/</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Rajnikanth.joke\n#=> \"Rajinikanth is so fast that he always comes yesterday.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "rajnikanth.joke"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Shakespeare",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "as_you_like_it",
              "descriptions": [
                {
                  "text": "Generates quote from 'As you like it!'.\n                                <p>Generates quote from ‘As you like it!’</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Quotes::Shakespeare.as_you_like_it   #=> \"How bitter a thing it is to look into happiness through another man's eyes!\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "shakespeare.as_you_like_it"
                }
              ]
            },
            {
              "name": "as_you_like_it_quote",
              "descriptions": [
                {
                  "text": "Produces a Shakespeare quote from As You Like It."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Quotes::Shakespeare.as_you_like_it_quote # => \"Can one desire too much of a good thing?.\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "sample(as_you_like_it)"
                }
              ]
            },
            {
              "name": "hamlet",
              "descriptions": [
                {
                  "text": "Generates quote from Hamlet.\n                                <p>Generates quote from Hamlet</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Quotes::Shakespeare.hamlet   #=> \"A little more than kin, and less than kind.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "shakespeare.hamlet"
                }
              ]
            },
            {
              "name": "hamlet_quote",
              "descriptions": [
                {
                  "text": "Produces a Shakespeare quote from Hamlet."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Quotes::Shakespeare.hamlet_quote # => \"To be, or not to be: that is the question.\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "sample(hamlet)"
                }
              ]
            },
            {
              "name": "king_richard_iii",
              "descriptions": [
                {
                  "text": "Returns quote from 'King Rechard III'.\n                                <p>Returns quote from ‘King Rechard III’</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Quotes::Shakespeare  #=> \"The king's name is a tower of strength.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "shakespeare.king_richard_iii"
                }
              ]
            },
            {
              "name": "king_richard_iii_quote",
              "descriptions": [
                {
                  "text": "Produces a Shakespeare quote from King Richard III."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Quotes::Shakespeare.king_richard_iii_quote # => \"Now is the winter of our discontent.\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "sample(king_richard_iii)"
                }
              ]
            },
            {
              "name": "romeo_and_juliet",
              "descriptions": [
                {
                  "text": "Quote from 'Romeo and Juliet'.\n                                <p>Quote from ‘Romeo and Juliet’</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Quotes::Shakespeare.romeo_and_juliet  #=> \"Wisely and slow; they stumble that run fast.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "shakespeare.romeo_and_juliet"
                }
              ]
            },
            {
              "name": "romeo_and_juliet_quote",
              "descriptions": [
                {
                  "text": "Produces a Shakespeare quote from Romeo And Juliet."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Quotes::Shakespeare.romeo_and_juliet_quote # => \"O Romeo, Romeo! wherefore art thou Romeo?.\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "sample(romeo_and_juliet)"
                }
              ]
            }
          ],
          "classes": []
        }
      ]
    },
    {
      "name": "Relationship",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "familial",
          "descriptions": [
            {
              "text": "Produces a random family relationship."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Relationship.familial #=> \"Grandfather\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(connection: nil)\n        familial_connections = translate('faker.relationship.familial').keys\n\n        if connection.nil?\n          connection = sample(familial_connections).to_s\n        else\n          connection = connection.to_s.downcase\n\n          unless familial_connections.include?(connection.to_sym)\n            raise ArgumentError,\n                  \"Familial connections can be left blank or #{familial_connections.join(', ')}\""
            }
          ]
        },
        {
          "name": "in_law",
          "descriptions": [
            {
              "text": "Produces a random in-law relationship."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Relationship.in_law #=> \"Brother-in-law\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "relationship.in_law"
            }
          ]
        },
        {
          "name": "parent",
          "descriptions": [
            {
              "text": "Produces a random parent relationship."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Relationship.parent #=> \"Father\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "relationship.parent"
            }
          ]
        },
        {
          "name": "sibling",
          "descriptions": [
            {
              "text": "Produces a random sibling relationship."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Relationship.sibling #=> \"Sister\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "relationship.sibling"
            }
          ]
        },
        {
          "name": "spouse",
          "descriptions": [
            {
              "text": "Produces a random spouse relationship."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Relationship.spouse #=> \"Husband\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "relationship.spouse"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Restaurant",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "description",
          "descriptions": [
            {
              "text": "Produces a description of a restaurant."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Restaurant.description\n#=> \"We are committed to using the finest ingredients in our recipes. No food leaves our kitchen that we ourselves would not eat.\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "restaurant.description"
            }
          ]
        },
        {
          "name": "name",
          "descriptions": [
            {
              "text": "Produces the name of a restaurant."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Restaurant.name #=> \"Curry King\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "restaurant.name"
            }
          ]
        },
        {
          "name": "review",
          "descriptions": [
            {
              "text": "Produces a review for a restaurant."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Restaurant.review\n#=> \"Brand new. Great design. Odd to hear pop music in a Mexican establishment. Music is a bit loud. It should be background.\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "restaurant.review"
            }
          ]
        },
        {
          "name": "type",
          "descriptions": [
            {
              "text": "Produces a type of restaurant."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Restaurant.type #=> \"Comfort Food\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "restaurant.type"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Science",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "element",
          "descriptions": [
            {
              "text": "Produces the name of a element."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Science.element #=> \"Carbon\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "science.element"
            }
          ]
        },
        {
          "name": "element_state",
          "descriptions": [
            {
              "text": "Produces the state of an element."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Science.element_state #=> \"Liquid\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "science.element_state"
            }
          ]
        },
        {
          "name": "element_subcategory",
          "descriptions": [
            {
              "text": "Produces the subcategory of an element."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Science.element_subcategory #=> \"Reactive nonmetal\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "science.element_subcategory"
            }
          ]
        },
        {
          "name": "element_symbol",
          "descriptions": [
            {
              "text": "Produces the symbol of an element."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Science.element_symbol #=> \"Pb\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "science.element_symbol"
            }
          ]
        },
        {
          "name": "modifier",
          "descriptions": [
            {
              "text": "Produces a scientifically sounding word.\n                            <p>Produces a scientifically sounding word</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Science.modifier #=> \"Quantum\"\nFaker::Science.modifier #=> \"Superconductive\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "science.modifier"
            }
          ]
        },
        {
          "name": "science",
          "descriptions": [
            {
              "text": "Produces a name of a science You can optionally filter by specifying one or more of the following: `:empirical, :formal, :natural, :social, :basic, :applied`.\n                            <p>Produces a name of a science You can optionally filter by specifying one or more of the following: ‘:empirical, :formal, :natural, :social, :basic, :applied`</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "branches",
              "type": "Array<Symbol>",
              "descriptions": [
                {
                  "text": ""
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Science.science #=> \"Space science\"\nFaker::Science.science(:natural, :applied) #=> \"Engineering\"\nFaker::Science.science(:formal, :applied) #=> \"Computer Science\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(*branches)\n        selected = BRANCHES.values.flatten.uniq\n        branches.each do |branch|\n          selected &= BRANCHES[branch] if BRANCHES.key? branch"
            }
          ]
        },
        {
          "name": "scientist",
          "descriptions": [
            {
              "text": "Produces the name of a scientist."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Science.scientist #=> \"Isaac Newton\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "science.scientist"
            }
          ]
        },
        {
          "name": "tool",
          "descriptions": [
            {
              "text": "Produces the name of a scientific tool.\n                            <p>By default it uses a science word modifier to generate more diverse data, which can be disabled.</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "simple",
              "type": "Boolean",
              "default": "false",
              "descriptions": [
                {
                  "text": "\n<p>Whether to generate simple realistic tool names, (no Q-word).</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Science.tool #=> \"Superconductive Microcentrifuge\"\nFaker::Science.tool #=> \"Portable Cryostat\"\nFaker::Science.tool #=> \"Quantum Spectrophotometer\"\nFaker::Science.tool(simple: true) #=> \"Microcentrifuge\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "science.tool"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Show",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "adult_musical",
          "descriptions": [
            {
              "text": "Produces the name of a musical for an older audience.\n                            <p>Produces the name of a musical for an older audience</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Alphanumeric.alpha\n#=> \"West Side Story\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "show.adult_musical"
            }
          ]
        },
        {
          "name": "kids_musical",
          "descriptions": [
            {
              "text": "Produces the name of a musical for a younger audience.\n                            <p>Produces the name of a musical for a younger audience</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Alphanumeric.alpha\n#=> \"Into the Woods JR.\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "show.kids_musical"
            }
          ]
        },
        {
          "name": "play",
          "descriptions": [
            {
              "text": "Produces the name of a play.\n                            <p>Produces the name of a play</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Alphanumeric.alpha\n#=> \"Death of a Salesman\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "show.play"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "SlackEmoji",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "activity",
          "descriptions": [
            {
              "text": "Produces a random slack emoji from activity category."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::SlackEmoji.activity #=> \":soccer:\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "slack_emoji.activity"
            }
          ]
        },
        {
          "name": "celebration",
          "descriptions": [
            {
              "text": "Produces a random slack emoji from celebration category."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::SlackEmoji.celebration #=> \":tada:\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "slack_emoji.celebration"
            }
          ]
        },
        {
          "name": "custom",
          "descriptions": [
            {
              "text": "Produces a random slack emoji from custom category."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::SlackEmoji.custom #=> \":slack:\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "slack_emoji.custom"
            }
          ]
        },
        {
          "name": "emoji",
          "descriptions": [
            {
              "text": "Produces a random slack emoji from any category."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::SlackEmoji.emoji #=> \":pizza:\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "slack_emoji.emoji"
            }
          ]
        },
        {
          "name": "food_and_drink",
          "descriptions": [
            {
              "text": "Produces a random slack emoji from food and drink category."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::SlackEmoji.food_and_drink #=> \":beers:\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "slack_emoji.food_and_drink"
            }
          ]
        },
        {
          "name": "nature",
          "descriptions": [
            {
              "text": "Produces a random slack emoji from nature category."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::SlackEmoji.nature #=> \":mount_fuji:\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "slack_emoji.nature"
            }
          ]
        },
        {
          "name": "objects_and_symbols",
          "descriptions": [
            {
              "text": "Produces a random slack emoji from objects and symbols category."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::SlackEmoji.objects_and_symbols #=> \":id:\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "slack_emoji.objects_and_symbols"
            }
          ]
        },
        {
          "name": "people",
          "descriptions": [
            {
              "text": "Produces a random slack emoji from people category."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::SlackEmoji.people #=> \":sleepy:\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "slack_emoji.people"
            }
          ]
        },
        {
          "name": "travel_and_places",
          "descriptions": [
            {
              "text": "Produces a random slack emoji from travel and places category."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::SlackEmoji.travel_and_places #=> \":metro:\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "slack_emoji.travel_and_places"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Source",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "hello_world",
          "descriptions": [
            {
              "text": "Produces source code for Hello World in a given language."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "lang",
              "type": "String",
              "default": "'ruby'",
              "descriptions": [
                {
                  "text": "The programming language to use"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Source.hello_world #=> \"puts 'Hello World!'\""
            },
            {
              "description": "",
              "code": "Faker::Source.hello_world(lang: :javascript)\n#=> \"alert('Hello World!');\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "source.hello_world.#{lang}"
            }
          ]
        },
        {
          "name": "print",
          "descriptions": [
            {
              "text": "Produces source code for printing a string in a given language."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "str",
              "type": "String",
              "descriptions": [
                {
                  "text": "\n<p>The string to print</p>\n"
                }
              ]
            },
            {
              "name": "lang",
              "type": "String",
              "default": "'ruby'",
              "descriptions": [
                {
                  "text": "The programming language to use"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Source.print #=> \"puts 'faker_string_to_print'\""
            },
            {
              "description": "",
              "code": "Faker::Source.print(str: 'foo bar', lang: :javascript)\n#=> \"console.log('foo bar');\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "source.print.#{lang}"
            }
          ]
        },
        {
          "name": "print_1_to_10",
          "descriptions": [
            {
              "text": "Produces source code for printing 1 through 10 in a given language."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "lang",
              "type": "String",
              "default": "'ruby'",
              "descriptions": [
                {
                  "text": "The programming language to use"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Source.print_1_to_10 #=> \"(1..10).each { |i| puts i }\""
            },
            {
              "description": "",
              "code": "Faker::Source.print_1_to_10(lang: :javascript)\n# => \"for (let i=0; i<10; i++) {\n#       console.log(i);\n#    }\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "source.print_1_to_10.#{lang}"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "SouthAfrica",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "cell_phone",
          "descriptions": [
            {
              "text": "Produces a South African cell phone number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::SouthAfrica.cell_phone #=> \"082 946 7470\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "with_locale 'en-ZA' do\n          Faker::PhoneNumber.cell_phone"
            }
          ]
        },
        {
          "name": "close_corporation_registration_number",
          "descriptions": [
            {
              "text": "Produces a South African close corporation registration number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::SouthAfrica.close_corporation_registration_number #=> \"CK74/7585/23\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "Faker::Company.south_african_close_corporation_registration_number"
            }
          ]
        },
        {
          "name": "id_number",
          "descriptions": [
            {
              "text": "Produces a South African ID number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::SouthAfrica.id_number #=> \"6110311856083\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "Faker::IDNumber.south_african_id_number"
            }
          ]
        },
        {
          "name": "invalid_id_number",
          "descriptions": [
            {
              "text": "Produces an invalid South African ID number.\n                            <p>Produces an invalid South African ID number</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::SouthAfrica.invalid_id_number #=> \"7018356904081\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "Faker::IDNumber.invalid_south_african_id_number"
            }
          ]
        },
        {
          "name": "listed_company_registration_number",
          "descriptions": [
            {
              "text": "Produces a South African listed company registration number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::SouthAfrica.listed_company_registration_number #=> \"7039/3135/06\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "Faker::Company.south_african_listed_company_registration_number"
            }
          ]
        },
        {
          "name": "phone_number",
          "descriptions": [
            {
              "text": "Produces a South African phone number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::SouthAfrica.phone_number #=> \"010 788 5009\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "with_locale 'en-ZA' do\n          Faker::PhoneNumber.phone_number"
            }
          ]
        },
        {
          "name": "pty_ltd_registration_number",
          "descriptions": [
            {
              "text": "Produces a South African private company registration number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::SouthAfrica.pty_ltd_registration_number #=> \"5301/714689/07\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "Faker::Company.south_african_pty_ltd_registration_number"
            }
          ]
        },
        {
          "name": "trust_registration_number",
          "descriptions": [
            {
              "text": "Produces a South African trust registration number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::SouthAfrica.trust_registration_number #=> \"IT38/6489900\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "Faker::Company.south_african_trust_registration_number"
            }
          ]
        },
        {
          "name": "valid_id_number",
          "descriptions": [
            {
              "text": "Produces a valid South African ID number.\n                            <p>Produces a valid South African ID number</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::SouthAfrica.valid_id_number #=> \"6110311856083\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "Faker::IDNumber.valid_south_african_id_number"
            }
          ]
        },
        {
          "name": "vat_number",
          "descriptions": [
            {
              "text": "Produces a South African VAT number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::SouthAfrica.vat_number #=> \"ZA79494416181\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "Faker::Finance.vat_number(country: 'ZA')"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Space",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "agency",
          "descriptions": [
            {
              "text": "Produces the name of a space agency."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Space.agency #=> \"Japan Aerospace Exploration Agency\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "space.agency"
            }
          ]
        },
        {
          "name": "agency_abv",
          "descriptions": [
            {
              "text": "Produces a space agency abbreviation."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Space.agency_abv #=> \"NASA\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "space.agency_abv"
            }
          ]
        },
        {
          "name": "company",
          "descriptions": [
            {
              "text": "Produces the name of a space company."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Space.company #=> \"SpaceX\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "space.company"
            }
          ]
        },
        {
          "name": "constellation",
          "descriptions": [
            {
              "text": "Produces the name of a constellation."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Space.constellation #=> \"Orion\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "space.constellation"
            }
          ]
        },
        {
          "name": "distance_measurement",
          "descriptions": [
            {
              "text": "Produces a distance measurement."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Space.distance_measurement #=> \"15 parsecs\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "space.distance_measurement"
            }
          ]
        },
        {
          "name": "galaxy",
          "descriptions": [
            {
              "text": "Produces the name of a galaxy."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Space.galaxy #=> \"Andromeda\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "space.galaxy"
            }
          ]
        },
        {
          "name": "launch_vehicle",
          "descriptions": [
            {
              "text": "Produces the name of a launch vehicle."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Space.launch_vehicle #=> \"Saturn IV\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "space.launch_vehicle"
            }
          ]
        },
        {
          "name": "meteorite",
          "descriptions": [
            {
              "text": "Produces the name of a meteorite."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Space.meteorite #=> \"Ensisheim\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "space.meteorite"
            }
          ]
        },
        {
          "name": "moon",
          "descriptions": [
            {
              "text": "Produces the name of a moon."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Space.moon #=> \"Europa\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "space.moon"
            }
          ]
        },
        {
          "name": "nasa_space_craft",
          "descriptions": [
            {
              "text": "Produces the name of a NASA spacecraft."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Space.nasa_space_craft #=> \"Endeavour\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "space.nasa_space_craft"
            }
          ]
        },
        {
          "name": "nebula",
          "descriptions": [
            {
              "text": "Produces the name of a nebula."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Space.nebula #=> \"Triffid Nebula\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "space.nebula"
            }
          ]
        },
        {
          "name": "planet",
          "descriptions": [
            {
              "text": "Produces the name of a planet."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Space.planet #=> \"Venus\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "space.planet"
            }
          ]
        },
        {
          "name": "star",
          "descriptions": [
            {
              "text": "Produces the name of a star."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Space.star #=> \"Proxima Centauri\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "space.star"
            }
          ]
        },
        {
          "name": "star_cluster",
          "descriptions": [
            {
              "text": "Produces the name of a star cluster."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Space.star_cluster #=> \"Messier 70\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "space.star_cluster"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Sport",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "ancient_olympics_sport",
          "descriptions": [
            {
              "text": "Produces a sport from the ancient olympics."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Sport.ancient_olympics_sport #=> \"Pankration\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "sport.ancient_olympics"
            }
          ]
        },
        {
          "name": "sport",
          "descriptions": [
            {
              "text": "Produces a sport from the modern olympics or paralympics, summer or winter."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "include_ancient",
              "type": "Boolean",
              "descriptions": [
                {
                  "text": "\n<p>If true, may produce a sport from the ancient olympics</p>\n"
                }
              ]
            },
            {
              "name": "include_unusual",
              "type": "Boolean",
              "default": "false",
              "descriptions": [
                {
                  "text": "\n<p>If true, may produce an unusual (definitely not olympic) sport</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Sport.sport #=> \"Football\""
            },
            {
              "description": "",
              "code": "Faker::Sport.sport(include_ancient: true) #=> \"Chariot racing\""
            },
            {
              "description": "",
              "code": "Faker::Sport.sport(include_unsual: true) #=> \"Flugtag/Birdman\""
            },
            {
              "description": "",
              "code": "Faker::Sport.sport(include_ancient:true, include_unusual: true) #=> \"Water polo\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "data": "sport.summer_olympics"
            }
          ]
        },
        {
          "name": "summer_olympics_sport",
          "descriptions": [
            {
              "text": "Produces a sport from the summer olympics."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Sport.summer_olympics_sport #=> \"Archery\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "sport.summer_olympics"
            }
          ]
        },
        {
          "name": "summer_paralympics_sport",
          "descriptions": [
            {
              "text": "Produces a sport from the summer paralympics."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Sport.summer_paralympics_sport #=> \"Wheelchair Basketball\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "sport.summer_paralympics"
            }
          ]
        },
        {
          "name": "unusual_sport",
          "descriptions": [
            {
              "text": "Produces an unusual sport."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Sport.unusual_sport #=> \"Camel Jumping\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "sport.unusual"
            }
          ]
        },
        {
          "name": "winter_olympics_sport",
          "descriptions": [
            {
              "text": "Produces a sport from the winter olympics."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Sport.winter_olympics_sport #=> \"Bobsleigh\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "sport.winter_olympics"
            }
          ]
        },
        {
          "name": "winter_paralympics_sport",
          "descriptions": [
            {
              "text": "Produces a sport from the winter paralympics."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Sport.winter_paralympics_sport #=> \"Para Ice Hockey\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "sport.winter_paralympics"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Sports",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [],
      "classes": [
        {
          "name": "Basketball",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "coach",
              "descriptions": [
                {
                  "text": "Produces the name of a basketball coach."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Sports::Basketball.coach #=> \"Gregg Popovich\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "basketball.coaches"
                }
              ]
            },
            {
              "name": "player",
              "descriptions": [
                {
                  "text": "Produces the name of a basketball player."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Sports::Basketball.player #=> \"LeBron James\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "basketball.players"
                }
              ]
            },
            {
              "name": "position",
              "descriptions": [
                {
                  "text": "Produces a position in basketball."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Sports::Basketball.position #=> \"Point Guard\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "basketball.positions"
                }
              ]
            },
            {
              "name": "team",
              "descriptions": [
                {
                  "text": "Produces the name of a basketball team."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Sports::Basketball.team #=> \"Golden State Warriors\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "basketball.teams"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Chess",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "federation",
              "descriptions": [
                {
                  "text": "Produces a long (alpha-3) ISO 3166 country code."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Chess.federation #=> \"COL\""
                }
              ],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "Faker::Address.country_code_long"
                }
              ]
            },
            {
              "name": "opening",
              "descriptions": [
                {
                  "text": "Produces the name of a chess opening."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Sports::Chess.opening #=> \"Giuoco Piano\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "chess.openings"
                }
              ]
            },
            {
              "name": "player",
              "descriptions": [
                {
                  "text": "Produces the name of a chess player name."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Sports::Chess.player #=> \"Golden State Warriors\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "chess.players"
                }
              ]
            },
            {
              "name": "rating",
              "descriptions": [
                {
                  "text": ""
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "(from: 2000, to: 2900)\n          ##\n          # Produces a rating between two provided values. Boundaries are inclusive.\n          #\n          # @param from [Numeric] The lowest number to include.\n          # @param to [Numeric] The highest number to include.\n          # @return [Numeric]\n          #\n          # @example\n          #   Faker::Sports::Chess.rating #=> 2734\n          #   Faker::Sports::Chess.rating(from: 2400, to: 2700) #=> 2580\n          #\n          # @faker.version next\n          Faker::Base.rand_in_range(from, to)"
                }
              ]
            },
            {
              "name": "title",
              "descriptions": [
                {
                  "text": "Produces a chess title."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Sports::Chess.title #=> \"GM\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "chess.titles"
                }
              ]
            },
            {
              "name": "tournament",
              "descriptions": [
                {
                  "text": ""
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "chess.tournaments"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Football",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "coach",
              "descriptions": [
                {
                  "text": "Produces the name of a football coach."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Sports::Football.coach #=> \"Jose Mourinho\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "football.coaches"
                }
              ]
            },
            {
              "name": "competition",
              "descriptions": [
                {
                  "text": "Produces a football competition."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Sports::Football.competition #=> \"FIFA World Cup\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "football.competitions"
                }
              ]
            },
            {
              "name": "player",
              "descriptions": [
                {
                  "text": "Produces the name of a football player."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Sports::Football.player #=> \"Lionel Messi\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "football.players"
                }
              ]
            },
            {
              "name": "position",
              "descriptions": [
                {
                  "text": "Produces a position in football."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Sports::Football.position #=> \"Defensive Midfielder\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "football.positions"
                }
              ]
            },
            {
              "name": "team",
              "descriptions": [
                {
                  "text": "Produces the name of a football team."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Sports::Football.team #=> \"Manchester United\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "football.teams"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Mountaineering",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "mountaineer",
              "descriptions": [
                {
                  "text": "Produces the name of a Mountaineer."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Sports::Mountaineering.mountaineer #=> \"Junko Tabei\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "mountaineering.mountaineer"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Volleyball",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "coach",
              "descriptions": [
                {
                  "text": "Produces the name of a volleyball coach."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Sports::Volleyball.coach #=> \"Russ Rose\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "volleyball.coach"
                }
              ]
            },
            {
              "name": "formation",
              "descriptions": [
                {
                  "text": "Produces a formation in volleyball."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Sports::Volleyball.formation #=> \"4-2\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "volleyball.formation"
                }
              ]
            },
            {
              "name": "player",
              "descriptions": [
                {
                  "text": "Produces the name of a volleyball player."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Sports::Volleyball.player #=> \"Saeid Marouf\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "volleyball.player"
                }
              ]
            },
            {
              "name": "position",
              "descriptions": [
                {
                  "text": "Produces a position in volleyball."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Sports::Volleyball.position #=> \"Middle blocker\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "volleyball.position"
                }
              ]
            },
            {
              "name": "team",
              "descriptions": [
                {
                  "text": "Produces the name of a volleyball team."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::Sports::Volleyball.team #=> \"Leo Shoes Modena\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "volleyball.team"
                }
              ]
            }
          ],
          "classes": []
        }
      ]
    },
    {
      "name": "Stripe",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "ccv",
          "descriptions": [
            {
              "text": "Produces a random ccv number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "card_type",
              "type": "String",
              "default": "nil",
              "descriptions": [
                {
                  "text": "\n<p>Specific valid card type.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Stripe.ccv #=> \"123\"\nFaker::Stripe.ccv(card_type: \"amex\") #=> \"1234\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(card_type: nil)\n        (card_type.to_s == 'amex' ? rand_in_range(1000, 9999) : rand_in_range(100, 999)).to_s"
            }
          ]
        },
        {
          "name": "invalid_card",
          "descriptions": [
            {
              "text": "Produces a random invalid card number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Stripe.invalid_card #=> \"4000000000000002\"\nFaker::Stripe.invalid_card(card_error: \"addressZipFail\") #=> \"4000000000000010\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(card_error: nil)\n        invalid_cards = translate('faker.stripe.invalid_cards').keys\n\n        if card_error.nil?\n          card_error = sample(invalid_cards).to_s\n        else\n          unless invalid_cards.include?(card_error.to_sym)\n            raise ArgumentError,\n                  \"Invalid credit cards argument can be left blank or include #{invalid_cards.join(', ')}\""
            }
          ]
        },
        {
          "name": "month",
          "descriptions": [
            {
              "text": "Produces a random month in two digits format."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Stripe.month #=> \"10\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "format('%02d', rand_in_range(1, 12))"
            }
          ]
        },
        {
          "name": "valid_card",
          "descriptions": [
            {
              "text": "Produces a random valid card number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "card_type",
              "type": "String",
              "default": "nil",
              "descriptions": [
                {
                  "text": "\n<p>Specific valid card type.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Stripe.valid_card #=> \"4242424242424242\"\nFaker::Stripe.valid_card(card_type: \"visa_debit\") #=> \"4000056655665556\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(card_type: nil)\n        valid_cards = translate('faker.stripe.valid_cards').keys\n\n        if card_type.nil?\n          card_type = sample(valid_cards).to_s\n        else\n          unless valid_cards.include?(card_type.to_sym)\n            raise ArgumentError,\n                  \"Valid credit cards argument can be left blank or include #{valid_cards.join(', ')}\""
            }
          ]
        },
        {
          "name": "valid_token",
          "descriptions": [
            {
              "text": "Produces a random valid Stripe token."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "card_type",
              "type": "String",
              "default": "nil",
              "descriptions": [
                {
                  "text": "\n<p>Specific valid card type.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Stripe.valid_token #=> \"tok_visa\"\nFaker::Stripe.valid_token(card_type: \"mc_debit\") #=> \"tok_mastercard_debit\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(card_type: nil)\n        valid_tokens = translate('faker.stripe.valid_tokens').keys\n\n        if card_type.nil?\n          card_type = sample(valid_tokens).to_s\n        else\n          unless valid_tokens.include?(card_type.to_sym)\n            raise ArgumentError,\n                  \"Valid credit cards argument can be left blank or include #{valid_tokens.join(', ')}\""
            }
          ]
        },
        {
          "name": "year",
          "descriptions": [
            {
              "text": "Produces a random year that is always in the future."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Stripe.year #=> \"2018\" # This will always be a year in the future"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "start_year = ::Time.new.year + 1\n        rand_in_range(start_year, start_year + 5).to_s"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Subscription",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "payment_method",
          "descriptions": [
            {
              "text": "Produces the name of a payment method."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Subscription.payment_method #=> \"PayPal\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "subscription.payment_methods"
            }
          ]
        },
        {
          "name": "payment_term",
          "descriptions": [
            {
              "text": "Produces the name of a payment term."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Subscription.payment_term #=> \"Monthly\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "subscription.payment_terms"
            }
          ]
        },
        {
          "name": "plan",
          "descriptions": [
            {
              "text": "Produces the name of a subscription plan."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Subscription.plan #=> \"Platinum\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "subscription.plans"
            }
          ]
        },
        {
          "name": "status",
          "descriptions": [
            {
              "text": "Produces a subscription status."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Subscription.status #=> \"Active\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "subscription.statuses"
            }
          ]
        },
        {
          "name": "subscription_term",
          "descriptions": [
            {
              "text": "Produces the name of a subscription term."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Subscription.subscription_term #=> \"Annual\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "subscription.subscription_terms"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Superhero",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "descriptor",
          "descriptions": [
            {
              "text": "Produces a superhero descriptor."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Superhero.descriptor #=> \"Bizarro\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "superhero.descriptor"
            }
          ]
        },
        {
          "name": "name",
          "descriptions": [
            {
              "text": "Produces a random superhero name."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Superhero.name #=> \"Magnificent Shatterstar\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "superhero.name"
            }
          ]
        },
        {
          "name": "power",
          "descriptions": [
            {
              "text": "Produces a superpower."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Superhero.power #=> \"Photokinesis\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "superhero.power"
            }
          ]
        },
        {
          "name": "prefix",
          "descriptions": [
            {
              "text": "Produces a superhero name prefix."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Superhero.prefix #=> \"the Fated\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "superhero.prefix"
            }
          ]
        },
        {
          "name": "suffix",
          "descriptions": [
            {
              "text": "Produces a superhero name suffix."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Superhero.suffix #=> \"Captain\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "superhero.suffix"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Tea",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "type",
          "descriptions": [
            {
              "text": "Produces a random type of tea."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Tea.type\n#=> \"Green\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "fetch 'tea.type'"
            }
          ]
        },
        {
          "name": "variety",
          "descriptions": [
            {
              "text": "Produces a random variety or blend of tea."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "type",
              "type": "String",
              "default": "nil",
              "descriptions": [
                {
                  "text": "\n<p>the type of tea to query for (valid types: ‘Black’, ‘Green’, ‘Oolong’, ‘White’, and ‘Herbal’)</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Tea.variety\n#=> \"Earl Grey\""
            },
            {
              "description": "",
              "code": "Faker::Tea.variety(type: 'Green')\n#=> \"Jasmine\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "tea.type"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Team",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "creature",
          "descriptions": [
            {
              "text": "Produces a team creature."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Team.creature #=> \"geese\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "team.creature"
            }
          ]
        },
        {
          "name": "mascot",
          "descriptions": [
            {
              "text": "Produces the name of a team mascot."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Team.mascot #=> \"Hugo\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "team.mascot"
            }
          ]
        },
        {
          "name": "name",
          "descriptions": [
            {
              "text": "Produces a team name from a state and a creature."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Team.name #=> \"Oregon vixens\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "team.name"
            }
          ]
        },
        {
          "name": "sport",
          "descriptions": [
            {
              "text": "Produces a team sport."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Team.sport #=> \"Lacrosse\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "team.sport"
            }
          ]
        },
        {
          "name": "state",
          "descriptions": [
            {
              "text": "Produces a team state."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Team.state #=> \"Oregon\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "address.state"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Time",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "backward",
          "descriptions": [
            {
              "text": "Produce a random time in the past (up to N days)."
            }
          ],
          "return_type": "Time",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "days",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>The maximum number of days to go into the past.</p>\n"
                }
              ]
            },
            {
              "name": "period",
              "type": "Symbol",
              "descriptions": [
                {
                  "text": "\n<p>The time of day, if any. See {TIME_RANGES}.</p>\n"
                }
              ]
            },
            {
              "name": "format",
              "type": "Symbol",
              "default": "nil",
              "descriptions": [
                {
                  "text": "\n<p>The name of a DateTime format to use.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Time.backward(days: 14, period: :evening)\n#=> \"2014-09-17 19:56:33 -0700\"\nFaker::Time.backward(days: 5, period: :morning, format: :short)\n#=> \"14 Oct 07:44\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(days: 365, period: :all, format: nil)\n        time_with_format(date_with_random_time(Faker::Date.backward(days: days), period), format)"
            }
          ]
        },
        {
          "name": "between",
          "descriptions": [
            {
              "text": "Produce a random time between two times."
            }
          ],
          "return_type": "Time",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "from",
              "type": "Time",
              "descriptions": [
                {
                  "text": "\n<p>The start of the usable time range.</p>\n"
                }
              ]
            },
            {
              "name": "to",
              "type": "Time",
              "descriptions": [
                {
                  "text": "\n<p>The end of the usable time range.</p>\n"
                }
              ]
            },
            {
              "name": "format",
              "type": "Symbol",
              "default": "nil",
              "descriptions": [
                {
                  "text": "\n<p>The name of a DateTime format to use.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "# Random Stringified time between two times, formatted to the specified I18n format\n# (Examples are from a Rails console with rails-i18n 5.1.1 defaults loaded)\nI18n.locale = 'en-US'\nFaker::Time.between(from: DateTime.now - 1, to: DateTime.now, format: :default) #=> \"Tue, 16 Oct 2018 10:48:27 AM -05:00\"\nFaker::Time.between(from: DateTime.now - 1, to: DateTime.now, format: :short) #=> \"15 Oct 10:48 AM\"\nFaker::Time.between(from: DateTime.now - 1, to: DateTime.now, format: :long) #=> \"October 15, 2018 10:48 AM\"\n\nI18n.locale = 'ja'\nFaker::Time.between(from: DateTime.now - 1, to: DateTime.now, format: :default) #=> \"2018/10/15 10:48:27\"\nFaker::Time.between(from: DateTime.now - 1, to: DateTime.now, format: :short) #=> \"18/10/15 10:48\"\nFaker::Time.between(from: DateTime.now - 1, to: DateTime.now, format: :long) #=> \"2018年10月16日(火) 10時48分27秒 -0500\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(from:, to:, format: nil)\n        from = get_time_object(from)\n        to = get_time_object(to)\n\n        time = Faker::Base.rand_in_range(from, to)\n        time_with_format(time, format)"
            }
          ]
        },
        {
          "name": "between_dates",
          "descriptions": [
            {
              "text": "Produce a random time between two dates."
            }
          ],
          "return_type": "Time",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "from",
              "type": "Date",
              "descriptions": [
                {
                  "text": "\n<p>The start of the usable time range.</p>\n"
                }
              ]
            },
            {
              "name": "to",
              "type": "Date",
              "descriptions": [
                {
                  "text": "\n<p>The end of the usable time range.</p>\n"
                }
              ]
            },
            {
              "name": "period",
              "type": "Symbol",
              "descriptions": [
                {
                  "text": "\n<p>The time of day, if any. See {TIME_RANGES}.</p>\n"
                }
              ]
            },
            {
              "name": "format",
              "type": "Symbol",
              "default": "nil",
              "descriptions": [
                {
                  "text": "\n<p>The name of a DateTime format to use.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Time.between_dates(from: Date.today - 1, to: Date.today, period: :all)\n#=> \"2014-09-19 07:03:30 -0700\"\nFaker::Time.between_dates(from: Date.today - 1, to: Date.today, period: :day)\n#=> \"2014-09-18 16:28:13 -0700\"\nFaker::Time.between_dates(from: Date.today - 1, to: Date.today, period: :night)\n#=> \"2014-09-20 19:39:38 -0700\"\nFaker::Time.between_dates(from: Date.today - 1, to: Date.today, period: :morning)\n#=> \"2014-09-19 08:07:52 -0700\"\nFaker::Time.between_dates(from: Date.today - 1, to: Date.today, period: :afternoon)\n#=> \"2014-09-18 12:10:34 -0700\"\nFaker::Time.between_dates(from: Date.today - 1, to: Date.today, period: :evening)\n#=> \"2014-09-19 20:21:03 -0700\"\nFaker::Time.between_dates(from: Date.today - 1, to: Date.today, period: :midnight)\n#=> \"2014-09-20 00:40:14 -0700\"\nFaker::Time.between_dates(from: Date.today - 5, to: Date.today + 5, period: :afternoon, format: :default)\n#=> \"Fri, 19 Oct 2018 15:17:46 -0500\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(from:, to:, period: :all, format: nil)\n        date = Faker::Date.between(from: from, to: to)\n        time = date_with_random_time(date, period)\n        time_with_format(time, format)"
            }
          ]
        },
        {
          "name": "date_with_random_time",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(date, period)\n        ::Time.local(date.year, date.month, date.day, hours(period), minutes, seconds)"
            }
          ]
        },
        {
          "name": "forward",
          "descriptions": [
            {
              "text": "Produce a random time in the future (up to N days)."
            }
          ],
          "return_type": "Time",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "days",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>The maximum number of days to go into the future.</p>\n"
                }
              ]
            },
            {
              "name": "period",
              "type": "Symbol",
              "descriptions": [
                {
                  "text": "\n<p>The time of day, if any. See {TIME_RANGES}.</p>\n"
                }
              ]
            },
            {
              "name": "format",
              "type": "Symbol",
              "default": "nil",
              "descriptions": [
                {
                  "text": "\n<p>The name of a DateTime format to use.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Time.forward(days: 23, period: :morning)\n# => \"2014-09-26 06:54:47 -0700\"\nFaker::Time.forward(days: 5,  period: :evening, format: :long)\n#=> \"October 21, 2018 20:47\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(days: 365, period: :all, format: nil)\n        time_with_format(date_with_random_time(Faker::Date.forward(days: days), period), format)"
            }
          ]
        },
        {
          "name": "get_time_object",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(time)\n        time = ::Time.parse(time) if time.is_a? String\n        time = time.to_time if time.respond_to?(:to_time)\n        time"
            }
          ]
        },
        {
          "name": "hours",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(period)\n        raise ArgumentError, 'invalid period' unless TIME_RANGES.key? period\n\n        sample(TIME_RANGES[period].to_a)"
            }
          ]
        },
        {
          "name": "minutes",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "seconds"
            }
          ]
        },
        {
          "name": "seconds",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "sample((0..59).to_a)"
            }
          ]
        },
        {
          "name": "time_with_format",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(time, format)\n        format.nil? ? time : I18n.localize(time, format: format)"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Travel",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [],
      "classes": [
        {
          "name": "Airport",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "iata",
              "descriptions": [
                {
                  "text": "Produces random Airport by IATA code and takes arguments for size and region.\n                                <p>Produces random Airport by IATA code and takes arguments for size and region</p>\n\n                                <p>Faker::Travel::Airport.iata(size: ‘large’, region: ‘united_states’) =&gt; “LAX”</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [
                {
                  "name": "size",
                  "type": "String",
                  "descriptions": [
                    {
                      "text": "\n<p>airport size, united_states has large, or medium, or small, european_union has large, or medium</p>\n"
                    }
                  ]
                },
                {
                  "name": "region",
                  "type": "String",
                  "descriptions": [
                    {
                      "text": "\n<p>airport region, currently available -&gt; united_states or european_union</p>\n"
                    }
                  ]
                }
              ],
              "examples": [],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "airport.#{region}.iata_code.#{size}"
                }
              ]
            },
            {
              "name": "name",
              "descriptions": [
                {
                  "text": "Produces random Airport by name and takes arguments for size and region.\n                                <p>Produces random Airport by name and takes arguments for size and region</p>\n\n                                <p>Faker::Travel::Airport.name(size: ‘large’, region: ‘united_states’) =&gt; “Los Angeles International Airport”</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [
                {
                  "name": "size",
                  "type": "String",
                  "descriptions": [
                    {
                      "text": "\n<p>airport size, united_states has large, or medium, or small, european_union has large, or medium</p>\n"
                    }
                  ]
                },
                {
                  "name": "region",
                  "type": "String",
                  "descriptions": [
                    {
                      "text": "\n<p>airport region, currently available -&gt; united_states or european_union</p>\n"
                    }
                  ]
                }
              ],
              "examples": [],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "airport.#{region}.#{size}"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "TrainStation",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "fill_missing_inputs_with_samples",
              "descriptions": [
                {
                  "text": ""
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "(region, type)\n          regions = %w[germany spain united_kingdom united_states]\n          types = %w[metro railway]\n\n          if region.nil? && type.nil?\n            region = sample(regions)\n            type = sample(types)\n          elsif region.nil?\n            validate_arguments(type, types, 'type')\n            region = sample(regions)\n          elsif type.nil?\n            validate_arguments(region, regions, 'region')\n            type = sample(types)"
                }
              ]
            },
            {
              "name": "name",
              "descriptions": [
                {
                  "text": "Produces random Train Station by name and takes optional arguments for region and type.\n                                <p>Produces random Train Station by name and takes optional arguments for region and type</p>\n\n                                <p>Faker::Travel::TrainStation.name(region: ‘united_kingdom’, type: ‘metro’) =&gt; “Brockley” Faker::Travel::TrainStation.name(type: ‘railway’) =&gt; “Düsseldorf Hauptbahnhof” Faker::Travel::TrainStation.name(region: ‘spain’) =&gt; “Santa Eulàlia”</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [
                {
                  "name": "region",
                  "type": "String",
                  "descriptions": [
                    {
                      "text": "\n<p>Train station region: germany, spain, united_kingdom, united_states</p>\n"
                    }
                  ]
                },
                {
                  "name": "type",
                  "type": "String",
                  "default": "nil",
                  "descriptions": [
                    {
                      "text": "\n<p>Train station type: metro, railway</p>\n"
                    }
                  ]
                }
              ],
              "examples": [],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "train_station.#{region}.#{type}"
                }
              ]
            },
            {
              "name": "validate_arguments",
              "descriptions": [
                {
                  "text": ""
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [],
              "implementations": [
                {
                  "platform": "Ruby",
                  "type": "Native",
                  "charSubst": false,
                  "digitSubst": false,
                  "translate": false,
                  "data": "(argument, correct_values, argument_name)\n          return if correct_values.include?(argument)\n\n          raise ArgumentError, \"'#{argument}' not found, #{argument_name} can be blank, or one of the following, as strings: #{correct_values.join(', ')}\""
                }
              ]
            }
          ],
          "classes": []
        }
      ]
    },
    {
      "name": "TvShows",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [],
      "classes": [
        {
          "name": "AquaTeenHungerForce",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Aqua Teen Hunger Force."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::AquaTeenHungerForce.character #=> \"Master Shake\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "aqua_teen_hunger_force.character"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a perl of great ATHF wisdom.\n                                <p>Produces a perl of great ATHF wisdom</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::AquaTeenHungerForce.quote #=> \"Friendship ain't about trust. Friendship's about nunchucks.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "aqua_teen_hunger_force.quote"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Archer",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Archer."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Archer.character #=> \"Sterling Archer\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "archer.characters"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces a location from Archer."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Archer.location #=> \"The Tuntmore Towers\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "archer.locations"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Archer."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Archer.quote\n#=> \"You're not my supervisor!\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "archer.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "BigBangTheory",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Big Bang Theory.\n                                <p>Produces a character from Big Bang Theory</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::BigBangTheory.character #=> \"Sheldon Cooper\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "big_bang_theory.characters"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Bing Bang Theory.\n                                <p>Produces a quote from Bing Bang Theory</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::BigBangTheory.quote #=> \"I'm not crazy. My mother had me tested.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "big_bang_theory.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "BojackHorseman",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from BoJack Horseman."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::BojackHorseman.character #=> \"BoJack Horseman\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "bojack_horseman.characters"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from BoJack Horseman."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::BojackHorseman.quote\n#=> \"Not understanding that you're a horrible person doesn't make you less of a horrible person.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "bojack_horseman.quotes"
                }
              ]
            },
            {
              "name": "tongue_twister",
              "descriptions": [
                {
                  "text": "Produces a tongue twister from BoJack Horseman."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::BojackHorseman.tongue_twister #=> \"Did you steal a meal from Neal McBeal the Navy Seal?\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "bojack_horseman.tongue_twisters"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "BreakingBad",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces the name of a character from Breaking Bad."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::BreakingBad.character #=> \"Walter White\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "breaking_bad.character"
                }
              ]
            },
            {
              "name": "episode",
              "descriptions": [
                {
                  "text": "Produces the name of an episode from Breaking Bad."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::BreakingBad.episode #=> \"Fly\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "breaking_bad.episode"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "BrooklynNineNine",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Brooklyn Nine Nine."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::BrooklynNineNine.character #=> \"Jake Peralta\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "brooklyn_nine_nine.characters"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Brooklyn Nine Nine."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::BrooklynNineNine.quote\n#=> \"Cool, cool, cool, cool, cool. No doubt, no doubt, no doubt.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "brooklyn_nine_nine.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Buffy",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "actor",
              "descriptions": [
                {
                  "text": "Produces a actor from Buffy the Vampire Slayer."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Buffy.actor #=> \"John Ritter\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "buffy.actors"
                }
              ]
            },
            {
              "name": "big_bad",
              "descriptions": [
                {
                  "text": "Produces a big bad from Buffy the Vampire Slayer."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Buffy.big_bad #=> \"Glory\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "buffy.big_bads"
                }
              ]
            },
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Buffy the Vampire Slayer."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Buffy.character #=> \"Buffy Summers\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "buffy.characters"
                }
              ]
            },
            {
              "name": "episode",
              "descriptions": [
                {
                  "text": "Produces an episode from Buffy the Vampire Slayer."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Buffy.episode #=> \"Once More, with Feeling\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "buffy.episodes"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Buffy the Vampire Slayer."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Buffy.quote #=> \"If the apocalypse comes, beep me.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "buffy.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Community",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "characters",
              "descriptions": [
                {
                  "text": "Produces a character from Community."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Community.characters #=> \"Jeff Winger\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "community.characters"
                }
              ]
            },
            {
              "name": "quotes",
              "descriptions": [
                {
                  "text": "Produces a quote from Community."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Community.quotes\n#=> \"I fear a political career could shine a negative light on my drug dealing.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "community.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "DrWho",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "actor",
              "descriptions": [
                {
                  "text": "Produces an actor from Doctor Who."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::DrWho.actor #=> \"Matt Smith\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "dr_who.actors"
                }
              ]
            },
            {
              "name": "catch_phrase",
              "descriptions": [
                {
                  "text": "Produces a catch phrase from Doctor Who."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::DrWho.catch_phrase #=> \"Fantastic!\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "dr_who.catch_phrases"
                }
              ]
            },
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Doctor Who."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::DrWho.character #=> \"Captain Jack Harkness\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "dr_who.character"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Doctor Who."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::DrWho.quote #=> \"Lots of planets have a north!\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "dr_who.quotes"
                }
              ]
            },
            {
              "name": "specie",
              "descriptions": [
                {
                  "text": "Produces a species from Doctor Who."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::DrWho.specie #=> \"Dalek\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "dr_who.species"
                }
              ]
            },
            {
              "name": "the_doctor",
              "descriptions": [
                {
                  "text": "Produces an iteration of The Doctor from Doctor Who."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::DrWho.the_doctor #=> \"Ninth Doctor\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "dr_who.the_doctors"
                }
              ]
            },
            {
              "name": "villain",
              "descriptions": [
                {
                  "text": "Produces a villain from Doctor Who."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::DrWho.villain #=> \"The Master\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "dr_who.villains"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "DumbAndDumber",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "actor",
              "descriptions": [
                {
                  "text": "Produces an actor from Dumb and Dumber."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::DumbAndDumber.actor #=> \"Jim Carrey\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "dumb_and_dumber.actors"
                }
              ]
            },
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Dumb and Dumber."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::DumbAndDumber.character #=> \"Harry Dunne\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "dumb_and_dumber.characters"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Dumb and Dumber."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::DumbAndDumber.quote\n#=> \"Why you going to the airport? Flying somewhere?\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "dumb_and_dumber.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "FamilyGuy",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Family Guy."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::FamilyGuy.character #=> \"Peter Griffin\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "family_guy.character"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces a location from Family Guy."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::FamilyGuy.location #=> \"James Woods High\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "family_guy.location"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Family Guy."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::FamilyGuy.quote\n#=> \"It's Peanut Butter Jelly Time.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "family_guy.quote"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "FinalSpace",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Final Space."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::FinalSpace.character #=> \"Gary Goodspeed\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "final_space.characters"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Final Space."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::FinalSpace.quote\n#=> \"It's an alien on my face! It's an alien on my...It's a space alien!\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "final_space.quotes"
                }
              ]
            },
            {
              "name": "vehicle",
              "descriptions": [
                {
                  "text": "Produces a vehicle from Final Space."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::FinalSpace.vehicle #=> \"Imperium Cruiser\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "final_space.vehicles"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Friends",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Friends."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Friends.character #=> \"Rachel Green\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "friends.characters"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces a location from Friends."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Friends.location #=> \"Central Perk\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "friends.locations"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Friends."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Friends.quote #=> \"We were on a break!\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "friends.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Futurama",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Futurama."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Futurama.character #=> \"Amy Wong\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "futurama.characters"
                }
              ]
            },
            {
              "name": "hermes_catchphrase",
              "descriptions": [
                {
                  "text": "Produces a catchphrase from Hermes Conrad."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Futurama.hermes_catchphrase\n#=> \"Great foo of bar!\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "futurama.hermes_catchphrases"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces a location from Futurama."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Futurama.location #=> \"Wormulon\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "futurama.locations"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Futurama."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Futurama.quote\n#=> \"Ugh, it's like a party in my mouth & everyone's throwing up.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "futurama.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "GameOfThrones",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Game of Thrones."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::GameOfThrones.character #=> \"Tyrion Lannister\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "game_of_thrones.characters"
                }
              ]
            },
            {
              "name": "city",
              "descriptions": [
                {
                  "text": "Produces a city from Game of Thrones."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::GameOfThrones.city #=> \"Lannisport\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "game_of_thrones.cities"
                }
              ]
            },
            {
              "name": "dragon",
              "descriptions": [
                {
                  "text": "Produces a dragon from Game of Thrones."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::GameOfThrones.dragon #=> \"Drogon\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "game_of_thrones.dragons"
                }
              ]
            },
            {
              "name": "house",
              "descriptions": [
                {
                  "text": "Produces a house from Game of Thrones."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::GameOfThrones.house #=> \"Stark\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "game_of_thrones.houses"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Game of Thrones."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::GameOfThrones.quote\n#=> \"Never forget who you are. The rest of the world won't. Wear it like an armor and it can never be used against you.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "game_of_thrones.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "HeyArnold",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Hey Arnold!.\n                                <p>Produces a character from Hey Arnold!</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::HeyArnold.character #=> \"Arnold\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "hey_arnold.characters"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces a location from Hey Arnold!.\n                                <p>Produces a location from Hey Arnold!</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::HeyArnold.location #=> \"Big Bob's Beeper Emporium\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "hey_arnold.locations"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Hey Arnold!.\n                                <p>Produces a quote from Hey Arnold!</p>\n                            "
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::HeyArnold.quote #=> \"Stoop Kid's afraid to leave his stoop!\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "hey_arnold.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "HowIMetYourMother",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "catch_phrase",
              "descriptions": [
                {
                  "text": "Produces a catch phrase from How I Met Your Mother."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::HowIMetYourMother.catch_phrase #=> \"Legendary\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "how_i_met_your_mother.catch_phrase"
                }
              ]
            },
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from How I Met Your Mother."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::HowIMetYourMother.character #=> \"Barney Stinson\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "how_i_met_your_mother.character"
                }
              ]
            },
            {
              "name": "high_five",
              "descriptions": [
                {
                  "text": "Produces a high five from How I Met Your Mother."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::HowIMetYourMother.high_five #=> \"Relapse Five\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "how_i_met_your_mother.high_five"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from How I Met Your Mother."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::HowIMetYourMother.quote\n#=> \"Whenever I'm sad, I stop being sad and be awesome instead.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "how_i_met_your_mother.quote"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "MichaelScott",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Michael Scott."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::MichaelScott.quote\n#=> \"I am Beyoncé, always.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "michael_scott.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "NewGirl",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from New Girl."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::NewGirl.character #=> \"Jessica Day\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "new_girl.characters"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from New Girl."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::NewGirl.quote\n#=> \"Are you cooking a frittata in a sauce pan? What is this - prison?\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "new_girl.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "ParksAndRec",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Parks and Recreation."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::ParksAndRec.character #=> \"Leslie Knope\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "parks_and_rec.characters"
                }
              ]
            },
            {
              "name": "city",
              "descriptions": [
                {
                  "text": "Produces a city from Parks and Recreation."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::ParksAndRec.city #=> \"Pawnee\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "parks_and_rec.cities"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "RickAndMorty",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Rick and Morty."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::RickAndMorty.character #=> \"Rick Sanchez\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "rick_and_morty.characters"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces a location from Rick and Morty."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::RickAndMorty.location #=> \"Dimension C-132\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "rick_and_morty.locations"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Rick and Morty."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::RickAndMorty.quote\n#=> \"Ohh yea, you gotta get schwifty.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "rick_and_morty.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "RuPaul",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "queen",
              "descriptions": [
                {
                  "text": "Produces a queen from RuPaul's Drag Race."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::RuPaul.queen #=> \"Latrice Royale\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "rupaul.queens"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from RuPaul's Drag Race."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::RuPaul.quote #=> \"That's Funny, Tell Another One.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "rupaul.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Seinfeld",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "business",
              "descriptions": [
                {
                  "text": "Produces a business from Seinfeld."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Seinfeld.business #=> \"Kruger Industrial Smoothing\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "seinfeld.business"
                }
              ]
            },
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Seinfeld."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Seinfeld.character #=> \"George Costanza\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "seinfeld.character"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Seinfeld."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Seinfeld.quote\n#=> \"I'm not a lesbian. I hate men, but I'm not a lesbian.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "seinfeld.quote"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "SiliconValley",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "app",
              "descriptions": [
                {
                  "text": "Produces an app from Silicon Valley."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::SiliconValley.app #=> \"Nip Alert\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "silicon_valley.apps"
                }
              ]
            },
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Silicon Valley."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::SiliconValley.character #=> \"Jian Yang\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "silicon_valley.characters"
                }
              ]
            },
            {
              "name": "company",
              "descriptions": [
                {
                  "text": "Produces a company from Silicon Valley."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::SiliconValley.company #=> \"Bachmanity\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "silicon_valley.companies"
                }
              ]
            },
            {
              "name": "email",
              "descriptions": [
                {
                  "text": "Produces an email address from Silicon Valley."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::SiliconValley.email #=> \"richard@piedpiper.test\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "silicon_valley.email"
                }
              ]
            },
            {
              "name": "invention",
              "descriptions": [
                {
                  "text": "Produces an invention from Silicon Valley."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::SiliconValley.invention\n#=> \"Tres Comas Tequila\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "silicon_valley.inventions"
                }
              ]
            },
            {
              "name": "motto",
              "descriptions": [
                {
                  "text": "Produces a motto from Silicon Valley."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::SiliconValley.motto\n#=> \"Our products are products, producing unrivaled results\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "silicon_valley.mottos"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Silicon Valley."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::SiliconValley.quote\n#=> \"I don't want to live in a world where someone else is making the world a better place better than we are.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "silicon_valley.quotes"
                }
              ]
            },
            {
              "name": "url",
              "descriptions": [
                {
                  "text": "Produces a URL from Silicon Valley."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::SiliconValley.url #=> \"http://www.piedpiper.com\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "silicon_valley.urls"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Simpsons",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from The Simpsons."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Simpsons.character #=> \"Charles Montgomery Burns\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "simpsons.characters"
                }
              ]
            },
            {
              "name": "episode_title",
              "descriptions": [
                {
                  "text": "Produces an episode title from The Simpsons."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Simpsons.episode_title\n#=> \"Two Cars in Every Garage and Three Eyes on Every Fish\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "simpsons.episode_titles"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces a location from The Simpsons."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Simpsons.location #=> \"Moe's Tavern\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "simpsons.locations"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from The Simpsons."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Simpsons.quote\n#=> \"It takes two to lie: one to lie and one to listen.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "simpsons.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "SouthPark",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from South Park."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::SouthPark.character #=> \"Mr. Garrison\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "south_park.characters"
                }
              ]
            },
            {
              "name": "episode_name",
              "descriptions": [
                {
                  "text": "Produces an episode name from South Park."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::SouthPark.episode_name\n#=> \"Make Love, Not Warcraft\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "south_park.episodes"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from South Park."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::SouthPark.quote\n#=> \"I'm just getting a little cancer Stan.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "south_park.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Spongebob",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Spongebob."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Spongebob.character #=> \"Patrick\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "spongebob.characters"
                }
              ]
            },
            {
              "name": "episode",
              "descriptions": [
                {
                  "text": "Produces an episode from Spongebob."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Spongebob.episode #=> \"Reef Blower\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "spongebob.episodes"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Spongebob."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Spongebob.quote #=> \"I'm ready! I'm ready!\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "spongebob.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "StarTrek",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Star Trek."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::StarTrek.character #=> \"Spock\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "star_trek.character"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces a location from Star Trek."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::StarTrek.location #=> \"Cardassia\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "star_trek.location"
                }
              ]
            },
            {
              "name": "specie",
              "descriptions": [
                {
                  "text": "Produces a species from Star Trek."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::StarTrek.specie #=> \"Ferengi\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "star_trek.specie"
                }
              ]
            },
            {
              "name": "villain",
              "descriptions": [
                {
                  "text": "Produces a villain from Star Trek."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::StarTrek.villain #=> \"Khan Noonien Singh\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "star_trek.villain"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Stargate",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Stargate."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Stargate.character #=> \"Jack O'Neill\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "stargate.characters"
                }
              ]
            },
            {
              "name": "planet",
              "descriptions": [
                {
                  "text": "Produces a planet from Stargate."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Stargate.planet #=> \"Abydos\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "stargate.planets"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Stargate."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Stargate.quote\n#=> \"General, request permission to beat the crap out of this man.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "stargate.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "StrangerThings",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a quote from Stranger Things."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::StrangerThings.quote\n#=> \"Friends don't lie.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "stranger_things.character"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a character from Stranger Things."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::StrangerThings.character #=> \"six\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "stranger_things.quote"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Suits",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Suits."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Suits.character #=> \"Harvey Specter\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "suits.characters"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Suits."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Suits.quote #=> \"Don't play the odds, play the man.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "suits.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "Supernatural",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces the name of a character from Supernatural."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Supernatural.character #=> \"Dean Winchester\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "supernatural.character"
                }
              ]
            },
            {
              "name": "creature",
              "descriptions": [
                {
                  "text": "Produces the name of a hunted creature."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Supernatural.creature #=> \"Demon\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "supernatural.creature"
                }
              ]
            },
            {
              "name": "weapon",
              "descriptions": [
                {
                  "text": "Produces the name of a weapon used by the hunters."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::Supernatural.weapon #=> \"Colt\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "supernatural.weapon"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "TheExpanse",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from The Expanse."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::TheExpanse.character #=> \"Jim Holden\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "the_expanse.characters"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces a location from The Expanse."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::TheExpanse.location #=> \"Ganymede\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "the_expanse.locations"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from The Expanse."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::TheExpanse.quote #=> \"I am that guy.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "the_expanse.quotes"
                }
              ]
            },
            {
              "name": "ship",
              "descriptions": [
                {
                  "text": "Produces a ship from The Expanse."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::TheExpanse.ship #=> \"Nauvoo\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "the_expanse.ships"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "TheFreshPrinceOfBelAir",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "actor",
              "descriptions": [
                {
                  "text": "Produces a actor from The Fresh Prince of Bel-Air."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::TheFreshPrinceOfBelAir.actor #=> \"Quincy Jones\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "the_fresh_prince_of_bel_air.actors"
                }
              ]
            },
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from The Fresh Prince of Bel-Air."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::TheFreshPrinceOfBelAir.character #=> \"Will Smith\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "the_fresh_prince_of_bel_air.characters"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from The Fresh Prince of Bel-Air."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::TheFreshPrinceOfBelAir.quote\n#=> \"Girl, you look so good, I would marry your brother just to get in your family.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "the_fresh_prince_of_bel_air.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "TheITCrowd",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "actor",
              "descriptions": [
                {
                  "text": "Produces an actor from The IT Crowd."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::TheITCrowd.actor #=> \"Chris O'Dowd\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "the_it_crowd.actors"
                }
              ]
            },
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from The IT Crowd."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::TheITCrowd.character #=> \"Roy Trenneman\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "the_it_crowd.characters"
                }
              ]
            },
            {
              "name": "email",
              "descriptions": [
                {
                  "text": "Produces an email from The IT Crowd."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::TheITCrowd.email #=> \"roy.trenneman@reynholm.test\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "the_it_crowd.emails"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from The IT Crowd."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::TheITCrowd.quote\n#=> \"Hello, IT. Have you tried turning it off and on again?\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "the_it_crowd.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "TheOffice",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from The Office."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::TheOffice.character #=> \"Michael Scott\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "the_office.characters"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from The Office."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::TheOffice.quote #=> \"Identity theft is not a joke, Jim! Millions of families suffer every year.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "the_office.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "TheThickOfIt",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from The Thick of It."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::TheThickOfIt.character #=> \"Nicola Murray\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "the_thick_of_it.characters"
                }
              ]
            },
            {
              "name": "department",
              "descriptions": [
                {
                  "text": "Produces a department from The Thick of It."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::TheThickOfIt.department #=> \"Shadow Cabinet\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "the_thick_of_it.departments"
                }
              ]
            },
            {
              "name": "position",
              "descriptions": [
                {
                  "text": "Produces a position from The Thick of It."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::TheThickOfIt.position\n#=> \"Director of Communications\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "the_thick_of_it.positions"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "TwinPeaks",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from Twin Peaks."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::TwinPeaks.character #=> \"Dale Cooper\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "twin_peaks.characters"
                }
              ]
            },
            {
              "name": "location",
              "descriptions": [
                {
                  "text": "Produces a location from Twin Peaks."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::TwinPeaks.location #=> \"Black Lodge\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "twin_peaks.locations"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from Twin Peaks."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::TwinPeaks.quote\n#=> \"The owls are not what they seem.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "twin_peaks.quotes"
                }
              ]
            }
          ],
          "classes": []
        },
        {
          "name": "VentureBros",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "methods": [
            {
              "name": "character",
              "descriptions": [
                {
                  "text": "Produces a character from The Venture Bros."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::VentureBros.character #=> \"Scaramantula\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "venture_bros.character"
                }
              ]
            },
            {
              "name": "organization",
              "descriptions": [
                {
                  "text": "Produces an organization from The Venture Bros."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::VentureBros.organization\n#=> \"Guild of Calamitous Intent\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "venture_bros.organization"
                }
              ]
            },
            {
              "name": "quote",
              "descriptions": [
                {
                  "text": "Produces a quote from The Venture Bros."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::VentureBros.quote\n#=> \"Revenge, like gazpacho soup, is best served cold, precise, and merciless.\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "venture_bros.quote"
                }
              ]
            },
            {
              "name": "vehicle",
              "descriptions": [
                {
                  "text": "Produces a vehicle from The Venture Bros."
                }
              ],
              "return_type": "String",
              "return_desc": "",
              "arguments": [],
              "examples": [
                {
                  "description": "",
                  "code": "Faker::TvShows::VentureBros.vehicle #=> \"Monarchmobile\""
                }
              ],
              "implementations": [
                {
                  "type": "Resolve",
                  "charSubst": true,
                  "digitSubst": true,
                  "translate": true,
                  "data": "venture_bros.vehicle"
                }
              ]
            }
          ],
          "classes": []
        }
      ]
    },
    {
      "name": "Twitter",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "created_at",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "Faker::Date.between(from: '2006-03-21', to: ::Date.today).strftime('%a %b %d %H:%M:%S %z %Y')"
            }
          ]
        },
        {
          "name": "id",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "Faker::Number.between(from: 1, to: 9_223_372_036_854_775_807)"
            }
          ]
        },
        {
          "name": "photo_entity",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "media_url = Faker::LoremFlickr.image(size: '1064x600')\n        media_id = id\n        {\n          id: media_id,\n          id_str: media_id.to_s,\n          indices: [\n            103,\n            126\n          ],\n          media_url: media_url.sub('https://', 'http://'),\n          media_url_https: media_url,\n          url: Faker::Internet.url(host: 'example.com'),\n          display_url: 'example.com',\n          expanded_url: Faker::Internet.url(host: 'example.com'),\n          type: 'photo',\n          sizes: {\n            medium: {\n              w: 1064,\n              h: 600,\n              resize: 'fit'\n            },\n            large: {\n              w: 1064,\n              h: 600,\n              resize: 'fit'\n            },\n            small: {\n              w: 680,\n              h: 383,\n              resize: 'fit'\n            },\n            thumb: {\n              w: 150,\n              h: 150,\n              resize: 'crop'\n            }\n          }\n        }"
            }
          ]
        },
        {
          "name": "screen_name",
          "descriptions": [
            {
              "text": "Produces a random screen name."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Twitter.screen_name #=> \"audreanne_hackett\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "Faker::Internet.username(specifier: nil, separators: ['_'])[0...20]"
            }
          ]
        },
        {
          "name": "status",
          "descriptions": [
            {
              "text": "Produces a random Twitter user."
            }
          ],
          "return_type": "Hash",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "include_user",
              "type": "Boolean",
              "descriptions": [
                {
                  "text": "\n<p>Include or exclude user details</p>\n"
                }
              ]
            },
            {
              "name": "include_photo",
              "type": "Boolean",
              "default": "false",
              "descriptions": [
                {
                  "text": "\n<p>Include or exclude user photo</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Twitter.status #=> {:id=>8821452687517076614, :text=>\"Ea et laboriosam vel non.\"...\nFaker::Twitter.status(include_user: false) # Just get a status object with no embed user\nFaker::Twitter.status(include_photo: true) # Includes entities for an attached image"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(include_user: true, include_photo: false)\n        status_id = id\n        status = {\n          id: status_id,\n          id_str: status_id.to_s,\n          contributors: nil,\n          coordinates: nil,\n          created_at: created_at,\n          entities: status_entities(include_photo: include_photo),\n          favorite_count: Faker::Number.between(to: 1, from: 10_000),\n          favorited: false,\n          geo: nil,\n          in_reply_to_screen_name: nil,\n          in_reply_to_status_id: nil,\n          in_reply_to_user_id_str: nil,\n          in_reply_to_user_id: nil,\n          is_quote_status: false,\n          lang: Faker::Address.country_code,\n          nil: nil,\n          place: nil,\n          possibly_sensitive: Faker::Boolean.boolean(true_ratio: 0.1),\n          retweet_count: Faker::Number.between(to: 1, from: 10_000),\n          retweeted_status: nil,\n          retweeted: false,\n          source: \"<a href=\\\"#{Faker::Internet.url(host: 'example.com')}\\\" rel=\\\"nofollow\\\">#{Faker::Company.name}</a>\",\n          text: Faker::Lorem.sentence,\n          truncated: false\n        }\n        status[:user] = Faker::Twitter.user(include_status: false) if include_user\n        status[:text] = \"#{status[:text]} #{status[:entities][:media].first[:url]}\" if include_photo\n        status"
            }
          ]
        },
        {
          "name": "status_entities",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(include_photo: false)\n        entities = {\n          hashtags: [],\n          symbols: [],\n          user_mentions: [],\n          urls: []\n        }\n        entities[:media] = [photo_entity] if include_photo\n        entities"
            }
          ]
        },
        {
          "name": "user",
          "descriptions": [
            {
              "text": "Produces a random Twitter user."
            }
          ],
          "return_type": "Hash",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "include_status",
              "type": "Boolean",
              "descriptions": [
                {
                  "text": "\n<p>Include or exclude user status details</p>\n"
                }
              ]
            },
            {
              "name": "include_email",
              "type": "Boolean",
              "default": "false",
              "descriptions": [
                {
                  "text": "\n<p>Include or exclude user email details</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Twitter.user #=>  {:id=>8821452687517076614, :name=>\"Lincoln Paucek\", :screen_name=>\"cody\"...\nFaker::Twitter.user(include_status: false) # Just get a user object with no embed status\nFaker::Twitter.user(include_email: true) # Simulate an authenticated user with the email permission"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(include_status: true, include_email: false)\n        user_id = id\n        background_image_url = Faker::LoremFlickr.image(size: '600x400')\n        profile_image_url = Faker::Avatar.image(slug: user_id, size: '48x48')\n        user = {\n          id: user_id,\n          id_str: user_id.to_s,\n          contributors_enabled: Faker::Boolean.boolean(true_ratio: 0.1),\n          created_at: created_at,\n          default_profile_image: Faker::Boolean.boolean(true_ratio: 0.1),\n          default_profile: Faker::Boolean.boolean(true_ratio: 0.1),\n          description: Faker::Lorem.sentence,\n          entities: user_entities,\n          favourites_count: Faker::Number.between(to: 1, from: 100_000),\n          follow_request_sent: false,\n          followers_count: Faker::Number.between(to: 1, from: 10_000_000),\n          following: false,\n          friends_count: Faker::Number.between(to: 1, from: 100_000),\n          geo_enabled: Faker::Boolean.boolean(true_ratio: 0.1),\n          is_translation_enabled: Faker::Boolean.boolean(true_ratio: 0.1),\n          is_translator: Faker::Boolean.boolean(true_ratio: 0.1),\n          lang: Faker::Address.country_code,\n          listed_count: Faker::Number.between(to: 1, from: 1000),\n          location: \"#{Faker::Address.city}, #{Faker::Address.state_abbr}, #{Faker::Address.country_code}\",\n          name: Faker::Name.name,\n          notifications: false,\n          profile_background_color: Faker::Color.hex_color,\n          profile_background_image_url_https: background_image_url,\n          profile_background_image_url: background_image_url.sub('https://', 'http://'),\n          profile_background_tile: Faker::Boolean.boolean(true_ratio: 0.1),\n          profile_banner_url: Faker::LoremFlickr.image(size: '1500x500'),\n          profile_image_url_https: profile_image_url,\n          profile_image_url: profile_image_url.sub('https://', 'http://'),\n          profile_link_color: Faker::Color.hex_color,\n          profile_sidebar_border_color: Faker::Color.hex_color,\n          profile_sidebar_fill_color: Faker::Color.hex_color,\n          profile_text_color: Faker::Color.hex_color,\n          profile_use_background_image: Faker::Boolean.boolean(true_ratio: 0.4),\n          protected: Faker::Boolean.boolean(true_ratio: 0.1),\n          screen_name: screen_name,\n          statuses_count: Faker::Number.between(to: 1, from: 100_000),\n          time_zone: Faker::Address.time_zone,\n          url: Faker::Internet.url(host: 'example.com'),\n          utc_offset: utc_offset,\n          verified: Faker::Boolean.boolean(true_ratio: 0.1)\n        }\n        user[:status] = Faker::Twitter.status(include_user: false) if include_status\n        user[:email] = Faker::Internet.email if include_email\n        user"
            }
          ]
        },
        {
          "name": "user_entities",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "{\n          url: {\n            urls: []\n          },\n          description: {\n            urls: []\n          }\n        }"
            }
          ]
        },
        {
          "name": "utc_offset",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "Faker::Number.between(to: -43_200, from: 50_400)"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Types",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "character",
          "descriptions": [
            {
              "text": "Produces a random character from the a-z, 0-9 ranges."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Types.character #=> \"n\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "sample(CHARACTERS)"
            }
          ]
        },
        {
          "name": "complex_rb_hash",
          "descriptions": [
            {
              "text": "Produces a random complex hash with random keys and values where the values may include other hashes and arrays."
            }
          ],
          "return_type": "Hash",
          "return_desc": "",
          "arguments": [
            {
              "name": "number",
              "type": "Integer",
              "default": "1",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the number of key-value pairs.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Types.complex_rb_hash #=> {user: {first: \"bob\", last: \"marley\"}}\nFaker::Types.complex_rb_hash(number: 1) #=> {user: {first: \"bob\", last: \"marley\"}}\nFaker::Types.complex_rb_hash(number: 2) #=> {user: {first: \"bob\", last: \"marley\"}, son: [\"damien\", \"marley\"]}"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(number: 1)\n        rb_hash(number: number, type: -> { random_complex_type })"
            }
          ]
        },
        {
          "name": "random_complex_type",
          "descriptions": [
            {
              "text": "Produces a random complex type that's either a String, an Integer, an array or a hash."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Types.random_complex_type #=> 1 or \"a\" or \"bob\" or {foo: \"bar\"}"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "types = SIMPLE_TYPES + COMPLEX_TYPES\n        type_to_use = types[rand(0..types.length - 1)]\n        case type_to_use\n        when :string\n          rb_string\n        when :fixnum\n          rb_integer\n        when :hash\n          rb_hash\n        when :array\n          rb_array"
            }
          ]
        },
        {
          "name": "random_type",
          "descriptions": [
            {
              "text": "Produces a random type that's either a String or an Integer."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Types.random_type #=> 1 or \"a\" or \"bob\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "type_to_use = SIMPLE_TYPES[rand(0..SIMPLE_TYPES.length - 1)]\n        case type_to_use\n        when :string\n          rb_string\n        when :fixnum\n          rb_integer"
            }
          ]
        },
        {
          "name": "rb_array",
          "descriptions": [
            {
              "text": "Produces a random array."
            }
          ],
          "return_type": "Array",
          "return_desc": "",
          "arguments": [
            {
              "name": "len",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the number of elements in the array.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Types.rb_array #=> [\"a\"]\nFaker::Types.rb_array(len: 4) #=> [\"a\", 1, 2, \"bob\"]\nFaker::Types.rb_array(len: 2, type: -> { Faker::Types.rb_string }) #=> [\"cat\", \"foo\"]"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(len: 1, type: -> { random_type })\n        [].tap do |ar|\n          len.times do\n            ar.push type.is_a?(Proc) ? type.call : type"
            }
          ]
        },
        {
          "name": "rb_hash",
          "descriptions": [
            {
              "text": "Produces a random hash with random keys and values."
            }
          ],
          "return_type": "Hash",
          "return_desc": "",
          "arguments": [
            {
              "name": "number",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>Specifies the number of key-value pairs.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Types.rb_hash #=> {name: \"bob\"}\nFaker::Types.rb_hash(number: 1) #=> {name: \"bob\"}\nFaker::Types.rb_hash(number: 2) #=> {name: \"bob\", last: \"marley\"}"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(number: 1, type: -> { random_type })\n        {}.tap do |hsh|\n          Lorem.words(number: number * 2).uniq.first(number).each do |s|\n            value = type.is_a?(Proc) ? type.call : type\n            hsh.merge!(s.to_sym => value)"
            }
          ]
        },
        {
          "name": "rb_integer",
          "descriptions": [
            {
              "text": "Produces a random integer."
            }
          ],
          "return_type": "Integer",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Types.rb_integer #=> 1"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(from: 0, to: 100)\n        rand(from..to).to_i"
            }
          ]
        },
        {
          "name": "rb_string",
          "descriptions": [
            {
              "text": "Produces a random String created from word (Faker::Lorem.word).\n                            <p>Produces a random String created from word (Faker::Lorem.word)</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Types.rb_string #=> \"foobar\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(words: 1)\n        resolved_num = resolve(words)\n        word_list =\n          translate('faker.lorem.words')\n\n        word_list *= ((resolved_num / word_list.length) + 1)\n        shuffle(word_list)[0, resolved_num].join(' ')"
            }
          ]
        },
        {
          "name": "titleize",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(word)\n        word.split(/(\\W)/).map(&:capitalize).join"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "University",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "greek_alphabet",
          "descriptions": [
            {
              "text": "Produces a greek alphabet."
            }
          ],
          "return_type": "Array<String>",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::University.greek_alphabet #=> [\"Α\", \"B\", \"Γ\", \"Δ\", ...]"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "%w[Α B Γ Δ E Z H Θ I K Λ M N Ξ\n           O Π P Σ T Y Φ X Ψ Ω]"
            }
          ]
        },
        {
          "name": "greek_organization",
          "descriptions": [
            {
              "text": "Produces a random greek organization."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::University.greek_organization #=> \"BEX\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "Array.new(3) { |_| sample(greek_alphabet) }.join"
            }
          ]
        },
        {
          "name": "name",
          "descriptions": [
            {
              "text": "Produces a random university name."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::University.name #=> \"Eastern Mississippi Academy\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "university.name"
            }
          ]
        },
        {
          "name": "prefix",
          "descriptions": [
            {
              "text": "Produces a random university prefix."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::University.prefix #=> \"Western\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "university.prefix"
            }
          ]
        },
        {
          "name": "suffix",
          "descriptions": [
            {
              "text": "Produces a random university suffix."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::University.suffix #=> \"Academy\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "university.suffix"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Vehicle",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "car_options",
          "descriptions": [
            {
              "text": "Produces a random list of car options."
            }
          ],
          "return_type": "Array<String>",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Vehicle.car_options #=> [\"DVD System\", \"MP3 (Single Disc)\", \"Tow Package\", \"CD (Multi Disc)\", \"Cassette Player\", \"Bucket Seats\", \"Cassette Player\", \"Leather Interior\", \"AM/FM Stereo\", \"Third Row Seats\"]"
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "vehicle.car_options"
            }
          ]
        },
        {
          "name": "car_type",
          "descriptions": [
            {
              "text": "Produces a random car type."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Vehicle.car_type #=> \"Sedan\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "vehicle.car_types"
            }
          ]
        },
        {
          "name": "color",
          "descriptions": [
            {
              "text": "Produces a random vehicle color."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Vehicle.color #=> \"Red\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "vehicle.colors"
            }
          ]
        },
        {
          "name": "doors",
          "descriptions": [
            {
              "text": "Produces a random vehicle door count."
            }
          ],
          "return_type": "Integer",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Vehicle.doors #=> 1\nFaker::Vehicle.door_count #=> 3"
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "data": "vehicle.doors"
            }
          ]
        },
        {
          "name": "drive_type",
          "descriptions": [
            {
              "text": "Produces a random vehicle drive type."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Vehicle.drive_type #=> \"4x2/2-wheel drive\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "vehicle.drive_types"
            }
          ]
        },
        {
          "name": "engine",
          "descriptions": [
            {
              "text": "Produces a random engine cylinder count."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Vehicle.engine_size #=> 6\nFaker::Vehicle.engine #=> 4"
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "vehicle.cylinder_engine"
            }
          ]
        },
        {
          "name": "fuel_type",
          "descriptions": [
            {
              "text": "Produces a random vehicle fuel type."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Vehicle.fuel_type #=> \"Diesel\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "vehicle.fuel_types"
            }
          ]
        },
        {
          "name": "license_plate",
          "descriptions": [
            {
              "text": "Produces a random license plate number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "state_abbreviation",
              "type": "String",
              "default": "''",
              "descriptions": [
                {
                  "text": "\n<p>Two letter state abbreviation for license plate generation.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Vehicle.license_plate #=> \"DEP-2483\"\nFaker::Vehicle.license_plate(state_abbreviation: 'FL') #=> \"977 UNU\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "vehicle.license_plate"
            }
          ]
        },
        {
          "name": "make",
          "descriptions": [
            {
              "text": "Produces a random vehicle make."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Vehicle.make #=> \"Honda\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "vehicle.makes"
            }
          ]
        },
        {
          "name": "make_and_model",
          "descriptions": [
            {
              "text": "Produces a random vehicle make and model."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Vehicle.make_and_model #=> \"Dodge Charger\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "m = make\n\n        \"#{m} #{model(make_of_model: m)}\""
            }
          ]
        },
        {
          "name": "manufacture",
          "descriptions": [
            {
              "text": "Produces a random vehicle manufacturer."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Vehicle.manufacture #=> \"Lamborghini\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "vehicle.manufacture"
            }
          ]
        },
        {
          "name": "mileage",
          "descriptions": [
            {
              "text": "Produces a random mileage/kilometrage for a vehicle."
            }
          ],
          "return_type": "Integer",
          "return_desc": "",
          "hidden": false,
          "arguments": [
            {
              "name": "min",
              "type": "Integer",
              "descriptions": [
                {
                  "text": "\n<p>Specific minimum limit for mileage generation.</p>\n"
                }
              ]
            },
            {
              "name": "max",
              "type": "Integer",
              "default": "MILEAGE_MAX",
              "descriptions": [
                {
                  "text": "\n<p>Specific maximum limit for mileage generation.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Vehicle.mileage #=> 26961\nFaker::Vehicle.mileage(min: 50_000) #=> 81557\nFaker::Vehicle.mileage(min: 50_000, max: 250_000) #=> 117503\nFaker::Vehicle.kilometrage #=> 35378"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(min: MILEAGE_MIN, max: MILEAGE_MAX)\n        rand_in_range(min, max)"
            }
          ]
        },
        {
          "name": "model",
          "descriptions": [
            {
              "text": "Produces a random vehicle model."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "make_of_model",
              "type": "String",
              "default": "''",
              "descriptions": [
                {
                  "text": "\n<p>Specific valid vehicle make.</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::Vehicle.model #=> \"A8\"\nFaker::Vehicle.model(make_of_model: 'Toyota') #=> \"Prius\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "vehicle.models_by_make.#{make}"
            }
          ]
        },
        {
          "name": "singapore_checksum",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(plate_number)\n        padded_alphabets = format('%3s', plate_number[/^[A-Z]+/]).tr(' ', '-').chars\n        padded_digits = format('%04d', plate_number[/\\d+/]).chars.map(&:to_i)\n        sum = [*padded_alphabets, *padded_digits].each_with_index.reduce(0) do |memo, (char, i)|\n          value = char.is_a?(Integer) ? char : char.ord - 64\n          memo + (SG_CHECKSUM_WEIGHTS[i] * value)"
            }
          ]
        },
        {
          "name": "singapore_license_plate",
          "descriptions": [
            {
              "text": "Produces a random license plate number for Singapore."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Vehicle.singapore_license_plate #=> \"SLV1854M\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "key = 'vehicle.license_plate'\n        plate_number = regexify(bothify(fetch(key)))\n        \"#{plate_number}#{singapore_checksum(plate_number)}\""
            }
          ]
        },
        {
          "name": "standard_specs",
          "descriptions": [
            {
              "text": "Produces a random list of standard specs."
            }
          ],
          "return_type": "Array<String>",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Vehicle.standard_specs #=> [\"Full-size spare tire w/aluminum alloy wheel\", \"Back-up camera\", \"Carpeted cargo area\", \"Silver accent IP trim finisher -inc: silver shifter finisher\", \"Back-up camera\", \"Water-repellent windshield & front door glass\", \"Floor carpeting\"]"
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "vehicle.standard_specs"
            }
          ]
        },
        {
          "name": "style",
          "descriptions": [
            {
              "text": "Produces a random vehicle style."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Vehicle.style #=> \"ESi\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "vehicle.styles"
            }
          ]
        },
        {
          "name": "transmission",
          "descriptions": [
            {
              "text": "Produces a random vehicle transmission."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Vehicle.transmission #=> \"Automanual\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "vehicle.transmissions"
            }
          ]
        },
        {
          "name": "version",
          "descriptions": [
            {
              "text": "Produces a car version.\n                            <p>Produces a car version</p>\n                        "
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Vehicle.version #=> \"40 TFSI Premium\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "vehicle.version"
            }
          ]
        },
        {
          "name": "vin",
          "descriptions": [
            {
              "text": "Produces a random vehicle VIN number."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Vehicle.vin #=> \"LLDWXZLG77VK2LUUF\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "generate(:string) do |g|\n          g.letter(name: :wmi, ranges: ['100'..'199', '400'..'499', '500'..'599', '700'..'799', '7A0'..'7F9'])\n          g.letter(name: :vds, length: 5, ranges: [VIN_KEYSPACE])\n          g.computed(name: :checksum, deps: %i[wmi vds model_year plant_code vis]) do |wmi, vds, model_year, plant_code, vis|\n            checksum = \"#{wmi}#{vds}0#{model_year}#{plant_code}#{vis}\".chars.each_with_index.map do |char, i|\n              value = (char =~ /\\A\\d\\z/ ? char.to_i : VIN_TRANSLITERATION[char.to_sym])\n              value * VIN_WEIGHT[i]\n            end.inject(:+) % 11\n\n            if checksum == 10\n              'X'\n            else\n              checksum"
            }
          ]
        },
        {
          "name": "year",
          "descriptions": [
            {
              "text": "Produces a random car year between 1 and 15 years ago."
            }
          ],
          "return_type": "Integer",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Vehicle.year #=> 2008"
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "Faker::Time.backward(days: rand_in_range(365, 5475), period: :all, format: '%Y').to_i"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Verb",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "base",
          "descriptions": [
            {
              "text": "Produces the base form of a random verb."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Verb.base #=> \"hurt\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "verbs.base"
            }
          ]
        },
        {
          "name": "ing_form",
          "descriptions": [
            {
              "text": "Produces a random verb in the .ing form."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Verb.ing_form #=> \"causing\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "verbs.ing_form"
            }
          ]
        },
        {
          "name": "past",
          "descriptions": [
            {
              "text": "Produces a random verb in past tense."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Verb.past #=> \"completed\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "verbs.past"
            }
          ]
        },
        {
          "name": "past_participle",
          "descriptions": [
            {
              "text": "Produces a random verb in past participle."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Verb.past_participle #=> \"digested\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "verbs.past_participle"
            }
          ]
        },
        {
          "name": "simple_present",
          "descriptions": [
            {
              "text": "Produces a random verb in simple present."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::Verb.simple_present #=> \"climbs\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "verbs.simple_present"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "VulnerabilityIdentifier",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "cve",
          "descriptions": [
            {
              "text": "Produces a Common Vulnerabilities and Exposures (CVE) identifier."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "year",
              "type": "Integer",
              "default": "::Date.today.year",
              "descriptions": [
                {
                  "text": "\n<p>The year-part of the CVE identifier (defaults to the current year)</p>\n"
                }
              ]
            }
          ],
          "examples": [
            {
              "description": "",
              "code": "Faker::VulnerabilityIdentifier.cve #=> \"CVE-2021-1337\"\nFaker::VulnerabilityIdentifier.cve(year: 1999) #=> \"CVE-1999-0523\""
            }
          ],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(year: ::Date.today.year)\n        index = rand_in_range(1, 99_999).to_s.rjust(4, '0')\n        \"CVE-#{year}-#{index}\""
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "WorldCup",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "city",
          "descriptions": [
            {
              "text": "Produces a city name hosting the World Cup match."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::WorldCup.city #=> \"Moscow\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "world_cup.cities"
            }
          ]
        },
        {
          "name": "group",
          "descriptions": [
            {
              "text": "Produces a random national team name from a group."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::WorldCup.group(group: 'group_B') #=> \"Spain\""
            },
            {
              "description": "",
              "code": "Faker::WorldCup.group #=> \"Russia\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "world_cup.groups.#{group}"
            }
          ]
        },
        {
          "name": "roster",
          "descriptions": [
            {
              "text": "Produces a random name from national team roster."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::WorldCup.roster #=> \"Hector Cuper\""
            },
            {
              "description": "",
              "code": "Faker::WorldCup.roster(country: 'Spain', type: 'forwards') #=> \"Diego Costa\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "world_cup.rosters.#{country}.#{type}"
            }
          ]
        },
        {
          "name": "stadium",
          "descriptions": [
            {
              "text": "Produces the name of a stadium that has hosted a World Cup match."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::WorldCup.stadium #=> \"Rostov Arena\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "world_cup.stadiums"
            }
          ]
        },
        {
          "name": "team",
          "descriptions": [
            {
              "text": "Produces a national team name."
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [
            {
              "description": "",
              "code": "Faker::WorldCup.team #=> \"Iran\""
            }
          ],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "world_cup.teams"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "String",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "length",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "Integer",
          "return_desc": "",
          "arguments": [
            {
              "name": "text",
              "type": "String",
              "descriptions": [
                {
                  "text": "The string to get the length of"
                }
              ]
            }
          ],
          "examples": [],
          "implementations": [
            {
              "platform": "C#",
              "type": "Native",
              "data": "return text.Length;"
            }
          ]
        },
        {
          "name": "lower",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [
            {
              "name": "text",
              "type": "String",
              "descriptions": [
                {
                  "text": "The string as lower case"
                }
              ]
            }
          ],
          "examples": [],
          "implementations": [
            {
              "platform": "C#",
              "type": "Native",
              "data": "return text.ToLower();"
            }
          ]
        },
        {
          "name": "random",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(length: 32)\n\t\t\t\tutf8string select_a length"
            }
          ]
        },
        {
          "name": "select_a",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(length)\n\t\t\t\tif length.class.included_modules.include? Enumerable\n\t\t\t\tselect_a sample(length.to_enum.to_a)\n\t\t\t\telse\n\t\t\t\tlength # recursive base case"
            }
          ]
        },
        {
          "name": "utf8string",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "(length)\n\t\t\t\tratio = char_space_ratio\n\t\t\t\t(1..length.to_i).map do\n\t\t\t\tspace_or_utf8_char ratio\n\t\t\t\tend.join"
            }
          ]
        },
        {
          "name": "space_or_utf8_char",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "(ratio)\n\t\t\t\tsample [32.chr(Encoding::UTF_8), [utf8character] * ratio].flatten"
            }
          ]
        },
        {
          "name": "char_space_ratio",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": false,
              "digitSubst": false,
              "translate": false,
              "data": "sample [2, [3] * 5, [5] * 17, [7] * 11, 11, 191].flatten"
            }
          ]
        },
        {
          "name": "utf8character",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "platform": "Ruby",
              "type": "Native",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "sample([\n\t\t\t\trand(32..90),           # latin alphabet\n\t\t\t\trand(128),              # 7-bit ASCII\n\t\t\t\trand(0xd800),           # utf-8 codepoints below utf-16 surrogate halves\n\t\t\t\trand(57_344..1_114_111) # utf-8 codepoints above utf-16 surrogate halves\n\t\t\t\t]).chr(Encoding::UTF_8)"
            }
          ]
        }
      ],
      "classes": []
    },
    {
      "name": "Bible",
      "descriptions": [
        {
          "text": ""
        }
      ],
      "methods": [
        {
          "name": "character",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "bible.character"
            }
          ]
        },
        {
          "name": "location",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "bible.location"
            }
          ]
        },
        {
          "name": "quote",
          "descriptions": [
            {
              "text": ""
            }
          ],
          "return_type": "String",
          "return_desc": "",
          "arguments": [],
          "examples": [],
          "implementations": [
            {
              "type": "Resolve",
              "charSubst": true,
              "digitSubst": true,
              "translate": true,
              "data": "bible.quote"
            }
          ]
        }
      ],
      "classes": []
    }
  ]
}